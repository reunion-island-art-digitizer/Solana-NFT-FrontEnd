{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Percent = void 0;\n\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\n\nconst fraction_1 = require(\"./fraction\");\n\nconst ONE_HUNDRED = new fraction_1.Fraction(jsbi_1.default.BigInt(100));\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nclass Percent extends fraction_1.Fraction {\n  constructor() {\n    super(...arguments);\n    /**\n     * This boolean prevents a fraction from being interpreted as a Percent\n     */\n\n    this.isPercent = true;\n  }\n  /**\n   * Parses a {@link Percent} from a float.\n   * @param number Number to parse. (100% is 1.00)\n   * @param decimals Number of decimals of precision. (default 10)\n   * @returns Percent\n   */\n\n\n  static fromNumber(number, decimals = 10) {\n    const frac = fraction_1.Fraction.fromNumber(number, decimals);\n    return new Percent(frac.numerator, frac.denominator);\n  }\n  /**\n   * Parses a {@link Percent} from a given number of bps.\n   * @returns Percent\n   */\n\n\n  static fromBPS(bps) {\n    return new Percent(bps, 10000);\n  }\n\n  add(other) {\n    return toPercent(super.add(other));\n  }\n\n  subtract(other) {\n    return toPercent(super.subtract(other));\n  }\n\n  multiply(other) {\n    return toPercent(super.multiply(other));\n  }\n\n  divide(other) {\n    return toPercent(super.divide(other));\n  }\n\n  toSignificant(significantDigits = 5, format, rounding) {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n\n  toFixed(decimalPlaces = 2, format, rounding) {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n  /**\n   * Returns true if the other object is a {@link Percent}.\n   *\n   * @param other\n   * @returns\n   */\n\n\n  static isPercent(other) {\n    var _a;\n\n    return fraction_1.Fraction.isFraction(other) && ((_a = other) === null || _a === void 0 ? void 0 : _a.isPercent) === true;\n  }\n\n}\n\nexports.Percent = Percent;\nPercent.ZERO = new Percent(0);\n/**\n * 1%\n */\n\nPercent.ONE = new Percent(1, 100);\n/**\n * 100% (1/1)\n */\n\nPercent.ONE_HUNDRED = new Percent(1);","map":{"version":3,"sources":["../src/percent.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAGA,MAAM,WAAW,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,MAAA,CAAA,OAAA,CAAK,MAAL,CAAY,GAAZ,CAAb,CAApB;AAEA;;;AAGG;;AACH,SAAS,SAAT,CAAmB,QAAnB,EAAqC;AACnC,SAAO,IAAI,OAAJ,CAAY,QAAQ,CAAC,SAArB,EAAgC,QAAQ,CAAC,WAAzC,CAAP;AACD;;AAED,MAAa,OAAb,SAA6B,UAAA,CAAA,QAA7B,CAAqC;AAArC,EAAA,WAAA,GAAA;;AACE;;AAEG;;AACa,SAAA,SAAA,GAAkB,IAAlB;AA+EjB;AAjEC;;;;;AAKG;;;AAC8B,SAAV,UAAU,CAAC,MAAD,EAAiB,QAAQ,GAAG,EAA5B,EAA8B;AAC7D,UAAM,IAAI,GAAG,UAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,CAAb;AACA,WAAO,IAAI,OAAJ,CAAY,IAAI,CAAC,SAAjB,EAA4B,IAAI,CAAC,WAAjC,CAAP;AACD;AAED;;;AAGG;;;AACkB,SAAP,OAAO,CAAC,GAAD,EAAe;AAClC,WAAO,IAAI,OAAJ,CAAY,GAAZ,EAAiB,KAAjB,CAAP;AACD;;AAEe,EAAA,GAAG,CAAC,KAAD,EAA4B;AAC7C,WAAO,SAAS,CAAC,MAAM,GAAN,CAAU,KAAV,CAAD,CAAhB;AACD;;AAEe,EAAA,QAAQ,CAAC,KAAD,EAA4B;AAClD,WAAO,SAAS,CAAC,MAAM,QAAN,CAAe,KAAf,CAAD,CAAhB;AACD;;AAEe,EAAA,QAAQ,CAAC,KAAD,EAA4B;AAClD,WAAO,SAAS,CAAC,MAAM,QAAN,CAAe,KAAf,CAAD,CAAhB;AACD;;AAEe,EAAA,MAAM,CAAC,KAAD,EAA4B;AAChD,WAAO,SAAS,CAAC,MAAM,MAAN,CAAa,KAAb,CAAD,CAAhB;AACD;;AAEe,EAAA,aAAa,CAC3B,iBAAiB,GAAG,CADO,EAE3B,MAF2B,EAG3B,QAH2B,EAGR;AAEnB,WAAO,MACJ,QADI,CACK,WADL,EAEJ,aAFI,CAEU,iBAFV,EAE6B,MAF7B,EAEqC,QAFrC,CAAP;AAGD;;AAEe,EAAA,OAAO,CACrB,aAAa,GAAG,CADK,EAErB,MAFqB,EAGrB,QAHqB,EAGF;AAEnB,WAAO,MAAM,QAAN,CAAe,WAAf,EAA4B,OAA5B,CAAoC,aAApC,EAAmD,MAAnD,EAA2D,QAA3D,CAAP;AACD;AAED;;;;;AAKG;;;AACoB,SAAT,SAAS,CAAC,KAAD,EAAe;;;AACpC,WACE,UAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,KACA,CAAA,CAAA,EAAA,GAAC,KAAD,MAA6C,IAA7C,IAA6C,EAAA,KAAA,KAAA,CAA7C,GAA6C,KAAA,CAA7C,GAA6C,EAAA,CAAE,SAA/C,MAA6D,IAF/D;AAID;;AAlFkC;;AAArC,OAAA,CAAA,OAAA,GAAA,OAAA;AAMkC,OAAA,CAAA,IAAA,GAAgB,IAAI,OAAJ,CAAY,CAAZ,CAAhB;AAEhC;;AAEG;;AAC6B,OAAA,CAAA,GAAA,GAAe,IAAI,OAAJ,CAAY,CAAZ,EAAe,GAAf,CAAf;AAEhC;;AAEG;;AACoB,OAAA,CAAA,WAAA,GAAuB,IAAI,OAAJ,CAAY,CAAZ,CAAvB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = void 0;\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst fraction_1 = require(\"./fraction\");\nconst ONE_HUNDRED = new fraction_1.Fraction(jsbi_1.default.BigInt(100));\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction) {\n    return new Percent(fraction.numerator, fraction.denominator);\n}\nclass Percent extends fraction_1.Fraction {\n    constructor() {\n        super(...arguments);\n        /**\n         * This boolean prevents a fraction from being interpreted as a Percent\n         */\n        this.isPercent = true;\n    }\n    /**\n     * Parses a {@link Percent} from a float.\n     * @param number Number to parse. (100% is 1.00)\n     * @param decimals Number of decimals of precision. (default 10)\n     * @returns Percent\n     */\n    static fromNumber(number, decimals = 10) {\n        const frac = fraction_1.Fraction.fromNumber(number, decimals);\n        return new Percent(frac.numerator, frac.denominator);\n    }\n    /**\n     * Parses a {@link Percent} from a given number of bps.\n     * @returns Percent\n     */\n    static fromBPS(bps) {\n        return new Percent(bps, 10000);\n    }\n    add(other) {\n        return toPercent(super.add(other));\n    }\n    subtract(other) {\n        return toPercent(super.subtract(other));\n    }\n    multiply(other) {\n        return toPercent(super.multiply(other));\n    }\n    divide(other) {\n        return toPercent(super.divide(other));\n    }\n    toSignificant(significantDigits = 5, format, rounding) {\n        return super\n            .multiply(ONE_HUNDRED)\n            .toSignificant(significantDigits, format, rounding);\n    }\n    toFixed(decimalPlaces = 2, format, rounding) {\n        return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n    }\n    /**\n     * Returns true if the other object is a {@link Percent}.\n     *\n     * @param other\n     * @returns\n     */\n    static isPercent(other) {\n        var _a;\n        return (fraction_1.Fraction.isFraction(other) &&\n            ((_a = other) === null || _a === void 0 ? void 0 : _a.isPercent) === true);\n    }\n}\nexports.Percent = Percent;\nPercent.ZERO = new Percent(0);\n/**\n * 1%\n */\nPercent.ONE = new Percent(1, 100);\n/**\n * 100% (1/1)\n */\nPercent.ONE_HUNDRED = new Percent(1);\n//# sourceMappingURL=percent.js.map"]},"metadata":{},"sourceType":"script"}