{"ast":null,"code":"\"use strict\";\n/**\n * This file is a port of serum-common, which was built for web3.js 0.x.\n */\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sleep = exports.getTokenAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.token = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar _1 = require(\".\");\n\nexports.token = (0, tslib_1.__importStar)(require(\"./token\"));\nexports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey(\"shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL\");\n\nfunction createMint(provider, authority, decimals) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var mint, instructions, tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (authority === undefined) {\n              authority = provider.wallet.publicKey;\n            }\n\n            mint = web3_js_1.Keypair.generate();\n            _context.next = 4;\n            return createMintInstructions(provider, authority, mint.publicKey, decimals);\n\n          case 4:\n            instructions = _context.sent;\n            tx = new web3_js_1.Transaction();\n            tx.add.apply(tx, _toConsumableArray(instructions));\n            _context.next = 9;\n            return provider.send(tx, [mint]);\n\n          case 9:\n            return _context.abrupt(\"return\", mint.publicKey);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.createMint = createMint;\n\nfunction createMintInstructions(provider, authority, mint) {\n  var decimals = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 6;\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var instructions;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.t0 = web3_js_1.SystemProgram;\n            _context2.t1 = provider.wallet.publicKey;\n            _context2.t2 = mint;\n            _context2.next = 5;\n            return provider.connection.getMinimumBalanceForRentExemption(82);\n\n          case 5:\n            _context2.t3 = _context2.sent;\n            _context2.t4 = spl_token_1.TOKEN_PROGRAM_ID;\n            _context2.t5 = {\n              fromPubkey: _context2.t1,\n              newAccountPubkey: _context2.t2,\n              space: 82,\n              lamports: _context2.t3,\n              programId: _context2.t4\n            };\n            _context2.t6 = _context2.t0.createAccount.call(_context2.t0, _context2.t5);\n            _context2.t7 = spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, decimals, authority, null);\n            instructions = [_context2.t6, _context2.t7];\n            return _context2.abrupt(\"return\", instructions);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.createMintInstructions = createMintInstructions;\n\nfunction createMintAndVault(provider, amount, owner, decimals) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var mint, vault, tx;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (owner === undefined) {\n              owner = provider.wallet.publicKey;\n            }\n\n            mint = web3_js_1.Keypair.generate();\n            vault = web3_js_1.Keypair.generate();\n            tx = new web3_js_1.Transaction();\n            _context3.t0 = tx.add;\n            _context3.t1 = tx;\n            _context3.t3 = _toConsumableArray;\n            _context3.next = 9;\n            return createMintInstructions(provider, provider.wallet.publicKey, mint.publicKey, decimals);\n\n          case 9:\n            _context3.t4 = _context3.sent;\n            _context3.t2 = (0, _context3.t3)(_context3.t4);\n            _context3.t5 = web3_js_1.SystemProgram;\n            _context3.t6 = provider.wallet.publicKey;\n            _context3.t7 = vault.publicKey;\n            _context3.next = 16;\n            return provider.connection.getMinimumBalanceForRentExemption(165);\n\n          case 16:\n            _context3.t8 = _context3.sent;\n            _context3.t9 = spl_token_1.TOKEN_PROGRAM_ID;\n            _context3.t10 = {\n              fromPubkey: _context3.t6,\n              newAccountPubkey: _context3.t7,\n              space: 165,\n              lamports: _context3.t8,\n              programId: _context3.t9\n            };\n            _context3.t11 = _context3.t5.createAccount.call(_context3.t5, _context3.t10);\n            _context3.t12 = spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, owner);\n            _context3.t13 = spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, provider.wallet.publicKey, [], amount);\n            _context3.t14 = [_context3.t11, _context3.t12, _context3.t13];\n            _context3.t15 = _context3.t2.concat.call(_context3.t2, _context3.t14);\n\n            _context3.t0.apply.call(_context3.t0, _context3.t1, _context3.t15);\n\n            _context3.next = 27;\n            return provider.send(tx, [mint, vault]);\n\n          case 27:\n            return _context3.abrupt(\"return\", [mint.publicKey, vault.publicKey]);\n\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.createMintAndVault = createMintAndVault;\n\nfunction createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(lamports === undefined)) {\n              _context4.next = 4;\n              break;\n            }\n\n            _context4.next = 3;\n            return provider.connection.getMinimumBalanceForRentExemption(165);\n\n          case 3:\n            lamports = _context4.sent;\n\n          case 4:\n            return _context4.abrupt(\"return\", [web3_js_1.SystemProgram.createAccount({\n              fromPubkey: provider.wallet.publicKey,\n              newAccountPubkey: newAccountPubkey,\n              space: 165,\n              lamports: lamports,\n              programId: spl_token_1.TOKEN_PROGRAM_ID\n            }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, newAccountPubkey, owner)]);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.createTokenAccountInstrs = createTokenAccountInstrs;\n\nfunction createAccountRentExempt(provider, programId, size) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var acc, tx;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            acc = web3_js_1.Keypair.generate();\n            tx = new web3_js_1.Transaction();\n            _context5.t0 = tx;\n            _context5.t1 = web3_js_1.SystemProgram;\n            _context5.t2 = provider.wallet.publicKey;\n            _context5.t3 = acc.publicKey;\n            _context5.t4 = size;\n            _context5.next = 9;\n            return provider.connection.getMinimumBalanceForRentExemption(size);\n\n          case 9:\n            _context5.t5 = _context5.sent;\n            _context5.t6 = programId;\n            _context5.t7 = {\n              fromPubkey: _context5.t2,\n              newAccountPubkey: _context5.t3,\n              space: _context5.t4,\n              lamports: _context5.t5,\n              programId: _context5.t6\n            };\n            _context5.t8 = _context5.t1.createAccount.call(_context5.t1, _context5.t7);\n\n            _context5.t0.add.call(_context5.t0, _context5.t8);\n\n            _context5.next = 16;\n            return provider.send(tx, [acc]);\n\n          case 16:\n            return _context5.abrupt(\"return\", acc);\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}\n\nexports.createAccountRentExempt = createAccountRentExempt;\n\nfunction getMintInfo(provider, addr) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n    var depositorAccInfo;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return provider.connection.getAccountInfo(addr);\n\n          case 2:\n            depositorAccInfo = _context6.sent;\n\n            if (!(depositorAccInfo === null)) {\n              _context6.next = 5;\n              break;\n            }\n\n            throw new Error(\"Failed to find token account\");\n\n          case 5:\n            return _context6.abrupt(\"return\", (0, _1.deserializeMint)(depositorAccInfo.data));\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n}\n\nexports.getMintInfo = getMintInfo;\n\nfunction getTokenAccount(provider, addr) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var depositorAccInfo;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return provider.connection.getAccountInfo(addr);\n\n          case 2:\n            depositorAccInfo = _context7.sent;\n\n            if (!(depositorAccInfo === null)) {\n              _context7.next = 5;\n              break;\n            }\n\n            throw new Error(\"Failed to find token account\");\n\n          case 5:\n            return _context7.abrupt(\"return\", (0, _1.deserializeAccount)(depositorAccInfo.data));\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n}\n\nexports.getTokenAccount = getTokenAccount;\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nexports.sleep = sleep;","map":{"version":3,"sources":["../src/common.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * This file is a port of serum-common, which was built for web3.js 0.x.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sleep = exports.getTokenAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.token = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst _1 = require(\".\");\nexports.token = (0, tslib_1.__importStar)(require(\"./token\"));\nexports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey(\"shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL\");\nfunction createMint(provider, authority, decimals) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (authority === undefined) {\n            authority = provider.wallet.publicKey;\n        }\n        const mint = web3_js_1.Keypair.generate();\n        const instructions = yield createMintInstructions(provider, authority, mint.publicKey, decimals);\n        const tx = new web3_js_1.Transaction();\n        tx.add(...instructions);\n        yield provider.send(tx, [mint]);\n        return mint.publicKey;\n    });\n}\nexports.createMint = createMint;\nfunction createMintInstructions(provider, authority, mint, decimals = 6) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const instructions = [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: provider.wallet.publicKey,\n                newAccountPubkey: mint,\n                space: 82,\n                lamports: yield provider.connection.getMinimumBalanceForRentExemption(82),\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, decimals, authority, null),\n        ];\n        return instructions;\n    });\n}\nexports.createMintInstructions = createMintInstructions;\nfunction createMintAndVault(provider, amount, owner, decimals) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (owner === undefined) {\n            owner = provider.wallet.publicKey;\n        }\n        const mint = web3_js_1.Keypair.generate();\n        const vault = web3_js_1.Keypair.generate();\n        const tx = new web3_js_1.Transaction();\n        tx.add(...(yield createMintInstructions(provider, provider.wallet.publicKey, mint.publicKey, decimals)), web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey: vault.publicKey,\n            space: 165,\n            lamports: yield provider.connection.getMinimumBalanceForRentExemption(165),\n            programId: spl_token_1.TOKEN_PROGRAM_ID,\n        }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, owner), spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, provider.wallet.publicKey, [], amount));\n        yield provider.send(tx, [mint, vault]);\n        return [mint.publicKey, vault.publicKey];\n    });\n}\nexports.createMintAndVault = createMintAndVault;\nfunction createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (lamports === undefined) {\n            lamports = yield provider.connection.getMinimumBalanceForRentExemption(165);\n        }\n        return [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: provider.wallet.publicKey,\n                newAccountPubkey,\n                space: 165,\n                lamports,\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, newAccountPubkey, owner),\n        ];\n    });\n}\nexports.createTokenAccountInstrs = createTokenAccountInstrs;\nfunction createAccountRentExempt(provider, programId, size) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const acc = web3_js_1.Keypair.generate();\n        const tx = new web3_js_1.Transaction();\n        tx.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey: acc.publicKey,\n            space: size,\n            lamports: yield provider.connection.getMinimumBalanceForRentExemption(size),\n            programId,\n        }));\n        yield provider.send(tx, [acc]);\n        return acc;\n    });\n}\nexports.createAccountRentExempt = createAccountRentExempt;\nfunction getMintInfo(provider, addr) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n        if (depositorAccInfo === null) {\n            throw new Error(\"Failed to find token account\");\n        }\n        return (0, _1.deserializeMint)(depositorAccInfo.data);\n    });\n}\nexports.getMintInfo = getMintInfo;\nfunction getTokenAccount(provider, addr) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n        if (depositorAccInfo === null) {\n            throw new Error(\"Failed to find token account\");\n        }\n        return (0, _1.deserializeAccount)(depositorAccInfo.data);\n    });\n}\nexports.getTokenAccount = getTokenAccount;\nfunction sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\nexports.sleep = sleep;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}