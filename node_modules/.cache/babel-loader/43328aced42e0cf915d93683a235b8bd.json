{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MathWalletAdapter = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst eventemitter3_1 = (0, tslib_1.__importDefault)(require(\"eventemitter3\"));\n\nconst types_1 = require(\"../types\");\n\nclass MathWalletAdapter extends eventemitter3_1.default {\n  constructor() {\n    super();\n\n    this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      if (this._onProcess) {\n        return;\n      }\n\n      if (!this._provider) {\n        window.open(\"https://mathwallet.org/\", \"_blank\", \"noopener noreferrer\");\n        throw new Error(\"Math Wallet not installed\");\n      }\n\n      this._onProcess = true;\n      yield this._provider.getAccount().then(account => {\n        this._publicKey = new web3_js_1.PublicKey(account);\n        this._connected = true;\n        this.emit(\"connect\", this._publicKey);\n      }).catch(() => {\n        this.disconnect();\n      }).finally(() => {\n        this._onProcess = false;\n      });\n    });\n\n    this._onProcess = false;\n    this._connected = false;\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  signAllTransactions(transactions) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      if (!this._provider) {\n        return transactions;\n      }\n\n      return yield this._provider.signAllTransactions(transactions);\n    });\n  }\n\n  get _provider() {\n    var _a;\n\n    if ((_a = window === null || window === void 0 ? void 0 : window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet) {\n      return window.solana;\n    }\n\n    return undefined;\n  }\n\n  get publicKey() {\n    return this._publicKey || types_1.DEFAULT_PUBLIC_KEY;\n  }\n\n  signTransaction(transaction) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      if (!this._provider) {\n        return transaction;\n      }\n\n      return this._provider.signTransaction(transaction);\n    });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit(\"disconnect\");\n    }\n  }\n\n}\n\nexports.MathWalletAdapter = MathWalletAdapter;","map":{"version":3,"sources":["../../../src/adapters/math/index.tsx"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAIA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,iBAAb,SAAuC,eAAA,CAAA,OAAvC,CAAmD;AAIjD,EAAA,WAAA,GAAA;AACE;;AA0CF,SAAA,OAAA,GAAU,MAA0B,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAClC,UAAI,KAAK,UAAT,EAAqB;AACnB;AACD;;AAED,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,QAAA,MAAM,CAAC,IAAP,CAAY,yBAAZ,EAAuC,QAAvC,EAAiD,qBAAjD;AACA,cAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACD;;AAED,WAAK,UAAL,GAAkB,IAAlB;AACA,YAAM,KAAK,SAAL,CACH,UADG,GAEH,IAFG,CAEG,OAAD,IAAY;AAChB,aAAK,UAAL,GAAkB,IAAI,SAAA,CAAA,SAAJ,CAAc,OAAd,CAAlB;AACA,aAAK,UAAL,GAAkB,IAAlB;AACA,aAAK,IAAL,CAAU,SAAV,EAAqB,KAAK,UAA1B;AACD,OANG,EAOH,KAPG,CAOG,MAAK;AACV,aAAK,UAAL;AACD,OATG,EAUH,OAVG,CAUK,MAAK;AACZ,aAAK,UAAL,GAAkB,KAAlB;AACD,OAZG,CAAN;AAaD,KAxBmC,CAApC;;AAzCE,SAAK,UAAL,GAAkB,KAAlB;AACA,SAAK,UAAL,GAAkB,KAAlB;AACD;;AAEY,MAAT,SAAS,GAAA;AACX,WAAO,KAAK,UAAZ;AACD;;AAEc,MAAX,WAAW,GAAA;AACb,WAAO,KAAP;AACD;;AAEY,EAAA,mBAAmB,CAC9B,YAD8B,EACH;;AAE3B,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,eAAO,YAAP;AACD;;AAED,aAAO,MAAM,KAAK,SAAL,CAAe,mBAAf,CAAmC,YAAnC,CAAb;AACD,K;AAAA;;AAEoB,MAAT,SAAS,GAAA;;;AACnB,QAAI,CAAA,EAAA,GAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,MAAR,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,KAAA,CAAd,GAAc,EAAA,CAAE,YAApB,EAAkC;AAChC,aAAO,MAAM,CAAC,MAAd;AACD;;AACD,WAAO,SAAP;AACD;;AAEY,MAAT,SAAS,GAAA;AACX,WAAO,KAAK,UAAL,IAAmB,OAAA,CAAA,kBAA1B;AACD;;AAEK,EAAA,eAAe,CAAC,WAAD,EAAyB;;AAC5C,UAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,eAAO,WAAP;AACD;;AAED,aAAO,KAAK,SAAL,CAAe,eAAf,CAA+B,WAA/B,CAAP;AACD,K;AAAA;;AA4BD,EAAA,UAAU,GAAA;AACR,QAAI,KAAK,UAAT,EAAqB;AACnB,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,UAAL,GAAkB,KAAlB;AACA,WAAK,IAAL,CAAU,YAAV;AACD;AACF;;AA/EgD;;AAAnD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MathWalletAdapter = void 0;\nconst tslib_1 = require(\"tslib\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst eventemitter3_1 = (0, tslib_1.__importDefault)(require(\"eventemitter3\"));\nconst types_1 = require(\"../types\");\nclass MathWalletAdapter extends eventemitter3_1.default {\n    constructor() {\n        super();\n        this.connect = () => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (this._onProcess) {\n                return;\n            }\n            if (!this._provider) {\n                window.open(\"https://mathwallet.org/\", \"_blank\", \"noopener noreferrer\");\n                throw new Error(\"Math Wallet not installed\");\n            }\n            this._onProcess = true;\n            yield this._provider\n                .getAccount()\n                .then((account) => {\n                this._publicKey = new web3_js_1.PublicKey(account);\n                this._connected = true;\n                this.emit(\"connect\", this._publicKey);\n            })\n                .catch(() => {\n                this.disconnect();\n            })\n                .finally(() => {\n                this._onProcess = false;\n            });\n        });\n        this._onProcess = false;\n        this._connected = false;\n    }\n    get connected() {\n        return this._connected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    signAllTransactions(transactions) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider) {\n                return transactions;\n            }\n            return yield this._provider.signAllTransactions(transactions);\n        });\n    }\n    get _provider() {\n        var _a;\n        if ((_a = window === null || window === void 0 ? void 0 : window.solana) === null || _a === void 0 ? void 0 : _a.isMathWallet) {\n            return window.solana;\n        }\n        return undefined;\n    }\n    get publicKey() {\n        return this._publicKey || types_1.DEFAULT_PUBLIC_KEY;\n    }\n    signTransaction(transaction) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (!this._provider) {\n                return transaction;\n            }\n            return this._provider.signTransaction(transaction);\n        });\n    }\n    disconnect() {\n        if (this._publicKey) {\n            this._publicKey = undefined;\n            this._connected = false;\n            this.emit(\"disconnect\");\n        }\n    }\n}\nexports.MathWalletAdapter = MathWalletAdapter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}