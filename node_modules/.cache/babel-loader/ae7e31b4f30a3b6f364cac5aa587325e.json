{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolana = exports.SolanaProvider = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\n\nconst unstated_next_1 = require(\"unstated-next\");\n\nconst error_1 = require(\"./error\");\n\nconst useConnectionInternal_1 = require(\"./utils/useConnectionInternal\");\n\nconst useProviderInternal_1 = require(\"./utils/useProviderInternal\");\n\nconst useWalletInternal_1 = require(\"./utils/useWalletInternal\");\n\nconst defaultOnConnect = (wallet, provider) => {\n  alert(`Connected to ${provider.name} wallet: ${wallet.publicKey.toString()}`);\n};\n\nconst defaultOnDisconnect = (_wallet, provider) => {\n  alert(`Disconnected from ${provider.name} wallet`);\n};\n\nconst defaultOnError = err => {\n  if (err.level === error_1.ErrorLevel.WARN) {\n    console.warn(err);\n  } else {\n    console.error(err);\n  }\n};\n/**\n * Provides Solana.\n * @returns\n */\n\n\nconst useSolanaInternal = (_a = {}) => {\n  var {\n    onConnect = defaultOnConnect,\n    onDisconnect = defaultOnDisconnect,\n    onError = defaultOnError\n  } = _a,\n      connectionArgs = (0, tslib_1.__rest)(_a, [\"onConnect\", \"onDisconnect\", \"onError\"]);\n  const connectionCtx = (0, useConnectionInternal_1.useConnectionInternal)(connectionArgs);\n  const {\n    network,\n    endpoint\n  } = connectionCtx;\n  const walletCtx = (0, useWalletInternal_1.useWalletInternal)({\n    onConnect,\n    onDisconnect,\n    network,\n    endpoint,\n    onError\n  });\n  const providerCtx = (0, useProviderInternal_1.useProviderInternal)({\n    connection: connectionCtx.connection,\n    wallet: walletCtx.wallet\n  });\n  return Object.assign(Object.assign(Object.assign({}, walletCtx), connectionCtx), providerCtx);\n};\n\nconst Solana = (0, unstated_next_1.createContainer)(useSolanaInternal);\n/**\n * Provides a Solana SDK.\n *\n * Note: ensure that `onConnect` and `onDisconnect` are wrapped in useCallback or are\n * statically defined, otherwise the wallet will keep re-rendering.\n * @returns\n */\n\nconst SolanaProvider = _a => {\n  var {\n    children\n  } = _a,\n      args = (0, tslib_1.__rest)(_a, [\"children\"]);\n  return react_1.default.createElement(Solana.Provider, {\n    initialState: args\n  }, children);\n};\n\nexports.SolanaProvider = SolanaProvider;\n/**\n * Fetches the loaded Solana SDK.\n */\n\nexports.useSolana = Solana.useContainer;","map":{"version":3,"sources":["../src/context.tsx"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,OAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAIA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAKA,MAAA,uBAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAEA,MAAA,qBAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAEA,MAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAgBA,MAAM,gBAAgB,GAAG,CACvB,MADuB,EAEvB,QAFuB,KAGrB;AACF,EAAA,KAAK,CAAC,gBAAgB,QAAQ,CAAC,IAAI,YAAY,MAAM,CAAC,SAAP,CAAiB,QAAjB,EAA2B,EAArE,CAAL;AACD,CALD;;AAOA,MAAM,mBAAmB,GAAG,CAC1B,OAD0B,EAE1B,QAF0B,KAGxB;AACF,EAAA,KAAK,CAAC,qBAAqB,QAAQ,CAAC,IAAI,SAAnC,CAAL;AACD,CALD;;AAOA,MAAM,cAAc,GAAI,GAAD,IAAwB;AAC7C,MAAI,GAAG,CAAC,KAAJ,KAAc,OAAA,CAAA,UAAA,CAAW,IAA7B,EAAmC;AACjC,IAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACD,GAFD,MAEO;AACL,IAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD;AACF,CAND;AAQA;;;AAGG;;;AACH,MAAM,iBAAiB,GAAG,CAAC,EAAA,GAKR,EALO,KAKU;MALT;AACzB,IAAA,SAAS,GAAG,gBADa;AAEzB,IAAA,YAAY,GAAG,mBAFU;AAGzB,IAAA,OAAO,GAAG;AAHe,MAGD,E;MACrB,cAAc,GAAA,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,EAAA,EAJQ,CAAA,WAAA,EAAA,cAAA,EAAA,SAAA,CAIR,C;AAEjB,QAAM,aAAa,GAAG,CAAA,GAAA,uBAAA,CAAA,qBAAA,EAAsB,cAAtB,CAAtB;AACA,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAwB,aAA9B;AACA,QAAM,SAAS,GAAG,CAAA,GAAA,mBAAA,CAAA,iBAAA,EAAkB;AAClC,IAAA,SADkC;AAElC,IAAA,YAFkC;AAGlC,IAAA,OAHkC;AAIlC,IAAA,QAJkC;AAKlC,IAAA;AALkC,GAAlB,CAAlB;AAOA,QAAM,WAAW,GAAG,CAAA,GAAA,qBAAA,CAAA,mBAAA,EAAoB;AACtC,IAAA,UAAU,EAAE,aAAa,CAAC,UADY;AAEtC,IAAA,MAAM,EAAE,SAAS,CAAC;AAFoB,GAApB,CAApB;AAKA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,SADL,CAAA,EAEK,aAFL,CAAA,EAGK,WAHL,CAAA;AAKD,CAzBD;;AA2BA,MAAM,MAAM,GAAG,CAAA,GAAA,eAAA,CAAA,eAAA,EAAgB,iBAAhB,CAAf;AAIA;;;;;;AAMG;;AACI,MAAM,cAAc,GAA6B,EAAD,IAGnC;MAHoC;AACtD,IAAA;AADsD,MAC9C,E;MACL,IAAI,GAAA,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,EAAA,EAF+C,CAAA,UAAA,CAE/C,C;AACY,SACnB,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAM,CAAC,QAAR,EAAgB;AAAC,IAAA,YAAY,EAAE;AAAf,GAAhB,EAAsC,QAAtC,CADmB;AAEpB,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;AAOb;;AAEG;;AACU,OAAA,CAAA,SAAA,GAAY,MAAM,CAAC,YAAnB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolana = exports.SolanaProvider = void 0;\nconst tslib_1 = require(\"tslib\");\nconst react_1 = (0, tslib_1.__importDefault)(require(\"react\"));\nconst unstated_next_1 = require(\"unstated-next\");\nconst error_1 = require(\"./error\");\nconst useConnectionInternal_1 = require(\"./utils/useConnectionInternal\");\nconst useProviderInternal_1 = require(\"./utils/useProviderInternal\");\nconst useWalletInternal_1 = require(\"./utils/useWalletInternal\");\nconst defaultOnConnect = (wallet, provider) => {\n    alert(`Connected to ${provider.name} wallet: ${wallet.publicKey.toString()}`);\n};\nconst defaultOnDisconnect = (_wallet, provider) => {\n    alert(`Disconnected from ${provider.name} wallet`);\n};\nconst defaultOnError = (err) => {\n    if (err.level === error_1.ErrorLevel.WARN) {\n        console.warn(err);\n    }\n    else {\n        console.error(err);\n    }\n};\n/**\n * Provides Solana.\n * @returns\n */\nconst useSolanaInternal = (_a = {}) => {\n    var { onConnect = defaultOnConnect, onDisconnect = defaultOnDisconnect, onError = defaultOnError } = _a, connectionArgs = (0, tslib_1.__rest)(_a, [\"onConnect\", \"onDisconnect\", \"onError\"]);\n    const connectionCtx = (0, useConnectionInternal_1.useConnectionInternal)(connectionArgs);\n    const { network, endpoint } = connectionCtx;\n    const walletCtx = (0, useWalletInternal_1.useWalletInternal)({\n        onConnect,\n        onDisconnect,\n        network,\n        endpoint,\n        onError,\n    });\n    const providerCtx = (0, useProviderInternal_1.useProviderInternal)({\n        connection: connectionCtx.connection,\n        wallet: walletCtx.wallet,\n    });\n    return Object.assign(Object.assign(Object.assign({}, walletCtx), connectionCtx), providerCtx);\n};\nconst Solana = (0, unstated_next_1.createContainer)(useSolanaInternal);\n/**\n * Provides a Solana SDK.\n *\n * Note: ensure that `onConnect` and `onDisconnect` are wrapped in useCallback or are\n * statically defined, otherwise the wallet will keep re-rendering.\n * @returns\n */\nconst SolanaProvider = (_a) => {\n    var { children } = _a, args = (0, tslib_1.__rest)(_a, [\"children\"]);\n    return (react_1.default.createElement(Solana.Provider, { initialState: args }, children));\n};\nexports.SolanaProvider = SolanaProvider;\n/**\n * Fetches the loaded Solana SDK.\n */\nexports.useSolana = Solana.useContainer;\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}