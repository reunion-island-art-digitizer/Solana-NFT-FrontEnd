{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getATAAddresses = exports.getATAAddress = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Gets an associated token account address.\n */\n\n\nvar getATAAddress = function getATAAddress(_ref) {\n  var mint = _ref.mint,\n      owner = _ref.owner;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var _yield$web3_js_1$Publ, _yield$web3_js_1$Publ2, address;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n\n          case 2:\n            _yield$web3_js_1$Publ = _context.sent;\n            _yield$web3_js_1$Publ2 = _slicedToArray(_yield$web3_js_1$Publ, 1);\n            address = _yield$web3_js_1$Publ2[0];\n            return _context.abrupt(\"return\", address);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.getATAAddress = getATAAddress;\n/**\n * Gets multiple associated token account addresses.\n */\n\nvar getATAAddresses = function getATAAddresses(_ref2) {\n  var mints = _ref2.mints,\n      owner = _ref2.owner;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var result, deduped;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Promise.all(Object.entries(mints).map(function (args) {\n              return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                var _args2, name, mint, result;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _args2 = _slicedToArray(args, 2), name = _args2[0], mint = _args2[1];\n                        _context2.next = 3;\n                        return (0, exports.getATAAddress)({\n                          mint: mint,\n                          owner: owner\n                        });\n\n                      case 3:\n                        result = _context2.sent;\n                        return _context2.abrupt(\"return\", {\n                          address: result,\n                          name: name,\n                          mint: mint\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n            }));\n\n          case 2:\n            result = _context3.sent;\n            deduped = result.reduce(function (acc, _ref3) {\n              var address = _ref3.address,\n                  name = _ref3.name,\n                  mint = _ref3.mint;\n              return {\n                accounts: Object.assign(Object.assign({}, acc.accounts), _defineProperty({}, name, {\n                  address: address,\n                  mint: mint\n                }))\n              };\n            }, {\n              accounts: {}\n            });\n            return _context3.abrupt(\"return\", {\n              accounts: deduped.accounts\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nexports.getATAAddresses = getATAAddresses;","map":{"version":3,"sources":["../src/ata.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAIA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;AAEG;;;AACI,IAAM,aAAa,GAAG,SAAhB,aAAgB;AAAA,MAC3B,IAD2B,QAC3B,IAD2B;AAAA,MAE3B,KAF2B,QAE3B,KAF2B;AAAA,SAMJ,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,mBAAM,SAAA,CAAA,SAAA,CAAU,kBAAV,CACtB,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,WAAA,CAAA,gBAAA,CAAiB,QAAjB,EAAnB,EAAgD,IAAI,CAAC,QAAL,EAAhD,CADsB,EAEtB,WAAA,CAAA,2BAFsB,CAAN;;AADK;AAAA;AAAA;AAChB,YAAA,OADgB;AAAA,6CAKhB,OALgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EANI;AAAA,CAAtB;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAqBb;;AAEG;;AACI,IAAM,eAAe,GAAG,SAAlB,eAAkB;AAAA,MAC7B,KAD6B,SAC7B,KAD6B;AAAA,MAE7B,KAF6B,SAE7B,KAF6B;AAAA,SAa1B,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACY,mBAAM,OAAO,CAAC,GAAR,CACnB,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,GAAtB,CACE,UACE,IADF;AAAA,qBAMK,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gDACkB,IADlB,MACI,IADJ,cACU,IADV;AAAA;AAEY,+BAAM,CAAA,GAAA,OAAA,CAAA,aAAA,EAAc;AACjC,0BAAA,IAAI,EAAJ,IADiC;AAEjC,0BAAA,KAAK,EAAE;AAF0B,yBAAd,CAAN;;AAFZ;AAEG,wBAAA,MAFH;AAAA,0DAMI;AACL,0BAAA,OAAO,EAAE,MADJ;AAEL,0BAAA,IAAI,EAAJ,IAFK;AAGL,0BAAA,IAAI,EAAJ;AAHK,yBANJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAA,EANL;AAAA,aADF,CADmB,CAAN;;AADZ;AACG,YAAA,MADH;AAuBG,YAAA,OAvBH,GAuBa,MAAM,CAAC,MAAP,CACd,UAAC,GAAD,SAAiC;AAAA,kBAAzB,OAAyB,SAAzB,OAAyB;AAAA,kBAAhB,IAAgB,SAAhB,IAAgB;AAAA,kBAAV,IAAU,SAAV,IAAU;AAC/B,qBAAO;AACL,gBAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,GAAG,CAAC,QADD,CAAA,sBAEL,IAFK,EAEE;AAAE,kBAAA,OAAO,EAAP,OAAF;AAAW,kBAAA,IAAI,EAAJ;AAAX,iBAFF;AADH,eAAP;AAMD,aARa,EASd;AAAE,cAAA,QAAQ,EAAE;AAAZ,aATc,CAvBb;AAAA,8CAoCI;AACL,cAAA,QAAQ,EAAE,OAAO,CAAC;AADb,aApCJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAb0B;AAAA,CAAxB;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getATAAddresses = exports.getATAAddress = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Gets an associated token account address.\n */\nconst getATAAddress = ({ mint, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n    return address;\n});\nexports.getATAAddress = getATAAddress;\n/**\n * Gets multiple associated token account addresses.\n */\nconst getATAAddresses = ({ mints, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const result = yield Promise.all(Object.entries(mints).map((args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n        const [name, mint] = args;\n        const result = yield (0, exports.getATAAddress)({\n            mint,\n            owner: owner,\n        });\n        return {\n            address: result,\n            name,\n            mint,\n        };\n    })));\n    const deduped = result.reduce((acc, { address, name, mint }) => {\n        return {\n            accounts: Object.assign(Object.assign({}, acc.accounts), { [name]: { address, mint } }),\n        };\n    }, { accounts: {} });\n    return {\n        accounts: deduped.accounts,\n    };\n});\nexports.getATAAddresses = getATAAddresses;\n//# sourceMappingURL=ata.js.map"]},"metadata":{},"sourceType":"script"}