{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getATAAddresses = exports.getATAAddress = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Gets an associated token account address.\n */\n\n\nconst getATAAddress = ({\n  mint,\n  owner\n}) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n  return address;\n});\n\nexports.getATAAddress = getATAAddress;\n/**\n * Gets multiple associated token account addresses.\n */\n\nconst getATAAddresses = ({\n  mints,\n  owner\n}) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  const result = yield Promise.all(Object.entries(mints).map(args => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const [name, mint] = args;\n    const result = yield (0, exports.getATAAddress)({\n      mint,\n      owner: owner\n    });\n    return {\n      address: result,\n      name,\n      mint\n    };\n  })));\n  const deduped = result.reduce((acc, {\n    address,\n    name,\n    mint\n  }) => {\n    return {\n      accounts: Object.assign(Object.assign({}, acc.accounts), {\n        [name]: {\n          address,\n          mint\n        }\n      })\n    };\n  }, {\n    accounts: {}\n  });\n  return {\n    accounts: deduped.accounts\n  };\n});\n\nexports.getATAAddresses = getATAAddresses;","map":{"version":3,"sources":["../src/ata.ts"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAIA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;AAEA;;AAEG;;;AACI,MAAM,aAAa,GAAG,CAAO;AAClC,EAAA,IADkC;AAElC,EAAA;AAFkC,CAAP,KAMJ,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACvB,QAAM,CAAC,OAAD,IAAY,MAAM,SAAA,CAAA,SAAA,CAAU,kBAAV,CACtB,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,WAAA,CAAA,gBAAA,CAAiB,QAAjB,EAAnB,EAAgD,IAAI,CAAC,QAAL,EAAhD,CADsB,EAEtB,WAAA,CAAA,2BAFsB,CAAxB;AAIA,SAAO,OAAP;AACD,CANwB,CANlB;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb;AAqBb;;AAEG;;AACI,MAAM,eAAe,GAAG,CAAyB;AACtD,EAAA,KADsD;AAEtD,EAAA;AAFsD,CAAzB,KAa1B,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACH,QAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAR,CACnB,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,GAAtB,CAEI,IADF,IAMK,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACH,UAAM,CAAC,IAAD,EAAO,IAAP,IAAe,IAArB;AACA,UAAM,MAAM,GAAG,MAAM,CAAA,GAAA,OAAA,CAAA,aAAA,EAAc;AACjC,MAAA,IADiC;AAEjC,MAAA,KAAK,EAAE;AAF0B,KAAd,CAArB;AAIA,WAAO;AACL,MAAA,OAAO,EAAE,MADJ;AAEL,MAAA,IAFK;AAGL,MAAA;AAHK,KAAP;AAKD,GAXI,CAPP,CADmB,CAArB;AAsBA,QAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CACd,CAAC,GAAD,EAAM;AAAE,IAAA,OAAF;AAAW,IAAA,IAAX;AAAiB,IAAA;AAAjB,GAAN,KAAiC;AAC/B,WAAO;AACL,MAAA,QAAQ,EAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,GAAG,CAAC,QADD,CAAA,EACS;AACf,SAAC,IAAD,GAAQ;AAAE,UAAA,OAAF;AAAW,UAAA;AAAX;AADO,OADT;AADH,KAAP;AAMD,GARa,EASd;AAAE,IAAA,QAAQ,EAAE;AAAZ,GATc,CAAhB;AAaA,SAAO;AACL,IAAA,QAAQ,EAAE,OAAO,CAAC;AADb,GAAP;AAGD,CAvCI,CAbE;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getATAAddresses = exports.getATAAddress = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Gets an associated token account address.\n */\nconst getATAAddress = ({ mint, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const [address] = yield web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), spl_token_1.TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID);\n    return address;\n});\nexports.getATAAddress = getATAAddress;\n/**\n * Gets multiple associated token account addresses.\n */\nconst getATAAddresses = ({ mints, owner, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const result = yield Promise.all(Object.entries(mints).map((args) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n        const [name, mint] = args;\n        const result = yield (0, exports.getATAAddress)({\n            mint,\n            owner: owner,\n        });\n        return {\n            address: result,\n            name,\n            mint,\n        };\n    })));\n    const deduped = result.reduce((acc, { address, name, mint }) => {\n        return {\n            accounts: Object.assign(Object.assign({}, acc.accounts), { [name]: { address, mint } }),\n        };\n    }, { accounts: {} });\n    return {\n        accounts: deduped.accounts,\n    };\n});\nexports.getATAAddresses = getATAAddresses;\n//# sourceMappingURL=ata.js.map"]},"metadata":{},"sourceType":"script"}