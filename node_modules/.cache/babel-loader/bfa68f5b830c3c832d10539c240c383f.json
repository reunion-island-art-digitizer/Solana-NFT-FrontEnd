{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SOL = exports.chainIdToNetwork = exports.networkToChainId = exports.CHAIN_ID_TO_NETWORK = exports.NETWORK_TO_CHAIN_ID = exports.ChainId = exports.makeTokenForAllNetworks = exports.tokensEqual = exports.Token = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Token information.\n */\n\n\nvar Token = /*#__PURE__*/function () {\n  function Token(info) {\n    _classCallCheck(this, Token);\n\n    var _a;\n\n    this.info = info;\n    this.mintAccount = new web3_js_1.PublicKey(info.address);\n    this.network = (_a = (0, exports.chainIdToNetwork)(info.chainId)) !== null && _a !== void 0 ? _a : \"localnet\";\n  }\n\n  _createClass(Token, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.info.chainId;\n    }\n  }, {\n    key: \"decimals\",\n    get: function get() {\n      return this.info.decimals;\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.info.name;\n    }\n  }, {\n    key: \"symbol\",\n    get: function get() {\n      return this.info.symbol;\n    }\n  }, {\n    key: \"address\",\n    get: function get() {\n      return this.mintAccount.toString();\n    }\n  }, {\n    key: \"icon\",\n    get: function get() {\n      return this.info.logoURI;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return (0, exports.tokensEqual)(this, other);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Token[mint=\".concat(this.mintAccount.toString(), \", decimals=\").concat(this.decimals, \", network=\").concat(this.network, \"]\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.info;\n    }\n  }]);\n\n  return Token;\n}();\n\nexports.Token = Token;\n/**\n * Loads a token from a Mint.\n * @param mint\n * @param opts\n * @returns\n */\n\nToken.fromMint = function (mint, decimals) {\n  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a, _b, _c;\n\n  return new Token(Object.assign(Object.assign({}, opts), {\n    // required\n    address: mint.toString(),\n    decimals: decimals,\n    // optional\n    name: (_a = opts.name) !== null && _a !== void 0 ? _a : \"Token \".concat(mint.toString().slice(0, 4)),\n    symbol: (_b = opts.symbol) !== null && _b !== void 0 ? _b : \"TOK\",\n    chainId: (_c = opts.chainId) !== null && _c !== void 0 ? _c : ChainId.Localnet\n  }));\n};\n\nvar tokensEqual = function tokensEqual(a, b) {\n  return a !== undefined && b !== undefined && a.mintAccount.equals(b.mintAccount) && a.network === b.network;\n};\n\nexports.tokensEqual = tokensEqual;\nvar sol = {\n  address: spl_token_1.NATIVE_MINT.toString(),\n  name: \"Solana\",\n  symbol: \"SOL\",\n  decimals: 9,\n  logoURI: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png\"\n};\n/**\n * Creates a Token for all networks.\n */\n\nvar makeTokenForAllNetworks = function makeTokenForAllNetworks(token) {\n  return {\n    \"mainnet-beta\": new Token(Object.assign(Object.assign({}, token), {\n      chainId: ChainId.MainnetBeta\n    })),\n    devnet: new Token(Object.assign(Object.assign({}, token), {\n      chainId: ChainId.Devnet\n    })),\n    testnet: new Token(Object.assign(Object.assign({}, token), {\n      chainId: ChainId.Testnet\n    })),\n    localnet: new Token(Object.assign(Object.assign({}, token), {\n      chainId: ChainId.Localnet\n    }))\n  };\n};\n\nexports.makeTokenForAllNetworks = makeTokenForAllNetworks; // comes from @solana/spl-token-registry, except we've added localnet\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MainnetBeta\"] = 101] = \"MainnetBeta\";\n  ChainId[ChainId[\"Testnet\"] = 102] = \"Testnet\";\n  ChainId[ChainId[\"Devnet\"] = 103] = \"Devnet\";\n  ChainId[ChainId[\"Localnet\"] = 104] = \"Localnet\";\n})(ChainId = exports.ChainId || (exports.ChainId = {}));\n\nexports.NETWORK_TO_CHAIN_ID = {\n  \"mainnet-beta\": ChainId.MainnetBeta,\n  devnet: ChainId.Devnet,\n  testnet: ChainId.Testnet,\n  localnet: 104\n};\nexports.CHAIN_ID_TO_NETWORK = Object.entries(exports.NETWORK_TO_CHAIN_ID).reduce(function (acc, _ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      network = _ref2[0],\n      env = _ref2[1];\n\n  return Object.assign(Object.assign({}, acc), _defineProperty({}, env, network));\n}, {});\n/**\n * Gets the chain id associated with a network.\n * @param network\n * @returns\n */\n\nvar networkToChainId = function networkToChainId(network) {\n  return exports.NETWORK_TO_CHAIN_ID[network];\n};\n\nexports.networkToChainId = networkToChainId;\n/**\n * Gets the Network associated with a chain id.\n * @param network\n * @returns\n */\n\nvar chainIdToNetwork = function chainIdToNetwork(env) {\n  return exports.CHAIN_ID_TO_NETWORK[env];\n};\n\nexports.chainIdToNetwork = chainIdToNetwork;\n/**\n * Solana native token.\n */\n\nexports.SOL = (0, exports.makeTokenForAllNetworks)(sol);","map":{"version":3,"sources":["../src/token.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SOL = exports.chainIdToNetwork = exports.networkToChainId = exports.CHAIN_ID_TO_NETWORK = exports.NETWORK_TO_CHAIN_ID = exports.ChainId = exports.makeTokenForAllNetworks = exports.tokensEqual = exports.Token = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\n/**\n * Token information.\n */\nclass Token {\n    constructor(info) {\n        var _a;\n        this.info = info;\n        this.mintAccount = new web3_js_1.PublicKey(info.address);\n        this.network = (_a = (0, exports.chainIdToNetwork)(info.chainId)) !== null && _a !== void 0 ? _a : \"localnet\";\n    }\n    get chainId() {\n        return this.info.chainId;\n    }\n    get decimals() {\n        return this.info.decimals;\n    }\n    get name() {\n        return this.info.name;\n    }\n    get symbol() {\n        return this.info.symbol;\n    }\n    get address() {\n        return this.mintAccount.toString();\n    }\n    get icon() {\n        return this.info.logoURI;\n    }\n    equals(other) {\n        return (0, exports.tokensEqual)(this, other);\n    }\n    toString() {\n        return `Token[mint=${this.mintAccount.toString()}, decimals=${this.decimals}, network=${this.network}]`;\n    }\n    toJSON() {\n        return this.info;\n    }\n}\nexports.Token = Token;\n/**\n * Loads a token from a Mint.\n * @param mint\n * @param opts\n * @returns\n */\nToken.fromMint = (mint, decimals, opts = {}) => {\n    var _a, _b, _c;\n    return new Token(Object.assign(Object.assign({}, opts), { \n        // required\n        address: mint.toString(), decimals, \n        // optional\n        name: (_a = opts.name) !== null && _a !== void 0 ? _a : `Token ${mint.toString().slice(0, 4)}`, symbol: (_b = opts.symbol) !== null && _b !== void 0 ? _b : \"TOK\", chainId: (_c = opts.chainId) !== null && _c !== void 0 ? _c : ChainId.Localnet }));\n};\nconst tokensEqual = (a, b) => a !== undefined &&\n    b !== undefined &&\n    a.mintAccount.equals(b.mintAccount) &&\n    a.network === b.network;\nexports.tokensEqual = tokensEqual;\nconst sol = {\n    address: spl_token_1.NATIVE_MINT.toString(),\n    name: \"Solana\",\n    symbol: \"SOL\",\n    decimals: 9,\n    logoURI: \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png\",\n};\n/**\n * Creates a Token for all networks.\n */\nconst makeTokenForAllNetworks = (token) => ({\n    \"mainnet-beta\": new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.MainnetBeta })),\n    devnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Devnet })),\n    testnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Testnet })),\n    localnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Localnet })),\n});\nexports.makeTokenForAllNetworks = makeTokenForAllNetworks;\n// comes from @solana/spl-token-registry, except we've added localnet\nvar ChainId;\n(function (ChainId) {\n    ChainId[ChainId[\"MainnetBeta\"] = 101] = \"MainnetBeta\";\n    ChainId[ChainId[\"Testnet\"] = 102] = \"Testnet\";\n    ChainId[ChainId[\"Devnet\"] = 103] = \"Devnet\";\n    ChainId[ChainId[\"Localnet\"] = 104] = \"Localnet\";\n})(ChainId = exports.ChainId || (exports.ChainId = {}));\nexports.NETWORK_TO_CHAIN_ID = {\n    \"mainnet-beta\": ChainId.MainnetBeta,\n    devnet: ChainId.Devnet,\n    testnet: ChainId.Testnet,\n    localnet: 104,\n};\nexports.CHAIN_ID_TO_NETWORK = Object.entries(exports.NETWORK_TO_CHAIN_ID).reduce((acc, [network, env]) => (Object.assign(Object.assign({}, acc), { [env]: network })), {});\n/**\n * Gets the chain id associated with a network.\n * @param network\n * @returns\n */\nconst networkToChainId = (network) => exports.NETWORK_TO_CHAIN_ID[network];\nexports.networkToChainId = networkToChainId;\n/**\n * Gets the Network associated with a chain id.\n * @param network\n * @returns\n */\nconst chainIdToNetwork = (env) => exports.CHAIN_ID_TO_NETWORK[env];\nexports.chainIdToNetwork = chainIdToNetwork;\n/**\n * Solana native token.\n */\nexports.SOL = (0, exports.makeTokenForAllNetworks)(sol);\n//# sourceMappingURL=token.js.map"]},"metadata":{},"sourceType":"script"}