{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicKey = exports.signBytes = exports.signTransaction = exports.getSolanaDerivationPath = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\n/*\n * Helper for chunked send of large payloads\n */\n\nfunction ledgerSend(transport, instruction, p1, payload) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    let p2 = 0;\n    let payloadOffset = 0;\n\n    if (payload.length > MAX_PAYLOAD) {\n      while (payload.length - payloadOffset > MAX_PAYLOAD) {\n        const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n        payloadOffset += MAX_PAYLOAD;\n        const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, chunk);\n\n        if (reply.length !== 2) {\n          throw new Error(\"Received unexpected reply payload\");\n        }\n\n        p2 |= P2_EXTEND;\n      }\n    }\n\n    const chunk = payload.slice(payloadOffset);\n    const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n    return reply.slice(0, reply.length - 2);\n  });\n}\n\nconst BIP32_HARDENED_BIT = 1 << 31 >>> 0;\n\nfunction harden(n = 0) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nfunction getSolanaDerivationPath(account, change) {\n  let length;\n\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  const derivationPath = Buffer.alloc(1 + length * 4); // eslint-disable-next-line\n\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      // eslint-disable-next-line unused-imports/no-unused-vars,@typescript-eslint/no-unused-vars\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\n\nexports.getSolanaDerivationPath = getSolanaDerivationPath;\n\nfunction signTransaction(transport, transaction, derivationPath = getSolanaDerivationPath()) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const messageBytes = transaction.serializeMessage();\n    return signBytes(transport, messageBytes, derivationPath);\n  });\n}\n\nexports.signTransaction = signTransaction;\n\nfunction signBytes(transport, bytes, derivationPath = getSolanaDerivationPath()) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const numPaths = Buffer.alloc(1);\n    numPaths.writeUInt8(1, 0);\n    const payload = Buffer.concat([numPaths, derivationPath, bytes]); // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n    // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n\n    return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n  });\n}\n\nexports.signBytes = signBytes;\n\nfunction getPublicKey(transport, derivationPath = getSolanaDerivationPath()) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const publicKeyBytes = yield ledgerSend(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n    return new web3_js_1.PublicKey(publicKeyBytes);\n  });\n}\n\nexports.getPublicKey = getPublicKey;","map":{"version":3,"sources":["../../../src/adapters/ledger/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPublicKey = exports.signBytes = exports.signTransaction = exports.getSolanaDerivationPath = void 0;\nconst tslib_1 = require(\"tslib\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\n/*\n * Helper for chunked send of large payloads\n */\nfunction ledgerSend(transport, instruction, p1, payload) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        let p2 = 0;\n        let payloadOffset = 0;\n        if (payload.length > MAX_PAYLOAD) {\n            while (payload.length - payloadOffset > MAX_PAYLOAD) {\n                const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n                payloadOffset += MAX_PAYLOAD;\n                const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, chunk);\n                if (reply.length !== 2) {\n                    throw new Error(\"Received unexpected reply payload\");\n                }\n                p2 |= P2_EXTEND;\n            }\n        }\n        const chunk = payload.slice(payloadOffset);\n        const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n        return reply.slice(0, reply.length - 2);\n    });\n}\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n = 0) {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nfunction getSolanaDerivationPath(account, change) {\n    let length;\n    if (account !== undefined) {\n        if (change !== undefined) {\n            length = 4;\n        }\n        else {\n            length = 3;\n        }\n    }\n    else {\n        length = 2;\n    }\n    const derivationPath = Buffer.alloc(1 + length * 4);\n    // eslint-disable-next-line\n    var offset = 0;\n    offset = derivationPath.writeUInt8(length, offset);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n    if (length > 2) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (length === 4) {\n            // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n            // eslint-disable-next-line unused-imports/no-unused-vars,@typescript-eslint/no-unused-vars\n            offset = derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n    return derivationPath;\n}\nexports.getSolanaDerivationPath = getSolanaDerivationPath;\nfunction signTransaction(transport, transaction, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const messageBytes = transaction.serializeMessage();\n        return signBytes(transport, messageBytes, derivationPath);\n    });\n}\nexports.signTransaction = signTransaction;\nfunction signBytes(transport, bytes, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const numPaths = Buffer.alloc(1);\n        numPaths.writeUInt8(1, 0);\n        const payload = Buffer.concat([numPaths, derivationPath, bytes]);\n        // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n        // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n        return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n    });\n}\nexports.signBytes = signBytes;\nfunction getPublicKey(transport, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const publicKeyBytes = yield ledgerSend(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n        return new web3_js_1.PublicKey(publicKeyBytes);\n    });\n}\nexports.getPublicKey = getPublicKey;\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"script"}