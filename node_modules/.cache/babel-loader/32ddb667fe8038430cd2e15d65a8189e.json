{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignerWallet = void 0;\n\nvar provider_1 = require(\"./provider\");\n/**\n * Wallet based on a Signer.\n */\n\n\nvar SignerWallet = /*#__PURE__*/function () {\n  function SignerWallet(signer) {\n    _classCallCheck(this, SignerWallet);\n\n    this.signer = signer;\n  }\n\n  _createClass(SignerWallet, [{\n    key: \"publicKey\",\n    get: function get() {\n      return this.signer.publicKey;\n    }\n  }, {\n    key: \"signAllTransactions\",\n    value: function signAllTransactions(transactions) {\n      var _this = this;\n\n      return Promise.resolve(transactions.map(function (tx) {\n        tx.partialSign(_this.signer);\n        return tx;\n      }));\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      transaction.partialSign(this.signer);\n      return Promise.resolve(transaction);\n    }\n    /**\n     * Creates a Provider from this Wallet by adding a Connection.\n     * @param connection\n     * @returns\n     */\n\n  }, {\n    key: \"createProvider\",\n    value: function createProvider(connection, sendConnection, opts) {\n      return provider_1.SolanaProvider.load({\n        connection: connection,\n        sendConnection: sendConnection,\n        wallet: this,\n        opts: opts\n      });\n    }\n  }]);\n\n  return SignerWallet;\n}();\n\nexports.SignerWallet = SignerWallet;","map":{"version":3,"sources":["../src/wallet.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;IACU,Y;AACX,wBAA4B,MAA5B,EAA0C;AAAA;;AAAd,SAAA,MAAA,GAAA,MAAA;AAAkB;;;;SAE9C,eAAa;AACX,aAAO,KAAK,MAAL,CAAY,SAAnB;AACD;;;WAED,6BAAoB,YAApB,EAA+C;AAAA;;AAC7C,aAAO,OAAO,CAAC,OAAR,CACL,YAAY,CAAC,GAAb,CAAiB,UAAC,EAAD,EAAO;AACtB,QAAA,EAAE,CAAC,WAAH,CAAe,KAAI,CAAC,MAApB;AACA,eAAO,EAAP;AACD,OAHD,CADK,CAAP;AAMD;;;WAED,yBAAgB,WAAhB,EAAwC;AACtC,MAAA,WAAW,CAAC,WAAZ,CAAwB,KAAK,MAA7B;AACA,aAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD;AAED;;;;AAIG;;;;WACH,wBACE,UADF,EAEE,cAFF,EAGE,IAHF,EAGuB;AAErB,aAAO,UAAA,CAAA,cAAA,CAAe,IAAf,CAAoB;AACzB,QAAA,UAAU,EAAV,UADyB;AAEzB,QAAA,cAAc,EAAd,cAFyB;AAGzB,QAAA,MAAM,EAAE,IAHiB;AAIzB,QAAA,IAAI,EAAJ;AAJyB,OAApB,CAAP;AAMD;;;;;;AArCH,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignerWallet = void 0;\nconst provider_1 = require(\"./provider\");\n/**\n * Wallet based on a Signer.\n */\nclass SignerWallet {\n    constructor(signer) {\n        this.signer = signer;\n    }\n    get publicKey() {\n        return this.signer.publicKey;\n    }\n    signAllTransactions(transactions) {\n        return Promise.resolve(transactions.map((tx) => {\n            tx.partialSign(this.signer);\n            return tx;\n        }));\n    }\n    signTransaction(transaction) {\n        transaction.partialSign(this.signer);\n        return Promise.resolve(transaction);\n    }\n    /**\n     * Creates a Provider from this Wallet by adding a Connection.\n     * @param connection\n     * @returns\n     */\n    createProvider(connection, sendConnection, opts) {\n        return provider_1.SolanaProvider.load({\n            connection,\n            sendConnection,\n            wallet: this,\n            opts,\n        });\n    }\n}\nexports.SignerWallet = SignerWallet;\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"script"}