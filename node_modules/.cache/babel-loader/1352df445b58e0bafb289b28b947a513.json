{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransactionWithCommitment = void 0;\n\nvar tslib_1 = require(\"tslib\");\n/**\n * Copy of Connection.simulateTransaction that takes a commitment parameter.\n */\n\n\nfunction simulateTransactionWithCommitment(connection, transaction) {\n  var commitment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"recent\";\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var connectionInner, transactionTyped, signData, wireTransaction, encodedTransaction, config, res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connectionInner = connection;\n            transactionTyped = transaction;\n            _context.next = 4;\n            return connectionInner._recentBlockhash(connectionInner._disableBlockhashCaching);\n\n          case 4:\n            transaction.recentBlockhash = _context.sent;\n            signData = transaction.serializeMessage();\n            wireTransaction = transactionTyped._serialize(signData);\n            encodedTransaction = wireTransaction.toString(\"base64\");\n            config = {\n              encoding: \"base64\",\n              commitment: commitment\n            };\n            _context.next = 11;\n            return connectionInner._rpcRequest(\"simulateTransaction\", [encodedTransaction, config]);\n\n          case 11:\n            res = _context.sent;\n\n            if (!res.error) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n\n          case 14:\n            return _context.abrupt(\"return\", res.result);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.simulateTransactionWithCommitment = simulateTransactionWithCommitment;","map":{"version":3,"sources":["../../src/utils/simulateTransaction.ts"],"names":[],"mappings":";;;;;;;;;;AAQA;;AAEG;;;AACH,SAAsB,iCAAtB,CACE,UADF,EAEE,WAFF,EAGmC;AAAA,MAAjC,UAAiC,uEAAR,QAAQ;;;;;;;AAE3B,YAAA,e,GAAkB,U;AAiBlB,YAAA,gB,GAAmB,W;;AAIK,mBAAM,eAAe,CAAC,gBAAhB,CAClC,eAAe,CAAC,wBADkB,CAAN;;;AAA9B,YAAA,WAAW,CAAC,e;AAIN,YAAA,Q,GAAW,WAAW,CAAC,gBAAZ,E;AAEX,YAAA,e,GAAkB,gBAAgB,CAAC,UAAjB,CAA4B,QAA5B,C;AAClB,YAAA,kB,GAAqB,eAAe,CAAC,QAAhB,CAAyB,QAAzB,C;AACrB,YAAA,M,GAAS;AAAE,cAAA,QAAQ,EAAE,QAAZ;AAAsB,cAAA,UAAU,EAAV;AAAtB,a;;AAEH,mBAAM,eAAe,CAAC,WAAhB,CAA4B,qBAA5B,EAAmD,CACnE,kBADmE,EAEnE,MAFmE,CAAnD,CAAN;;;AAAN,YAAA,G;;iBAIF,GAAG,CAAC,K;;;;;kBACA,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,C;;;6CAED,GAAG,CAAC,M;;;;;;;;;AACZ;;AA5CD,OAAA,CAAA,iCAAA,GAAA,iCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simulateTransactionWithCommitment = void 0;\nconst tslib_1 = require(\"tslib\");\n/**\n * Copy of Connection.simulateTransaction that takes a commitment parameter.\n */\nfunction simulateTransactionWithCommitment(connection, transaction, commitment = \"recent\") {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const connectionInner = connection;\n        const transactionTyped = transaction;\n        transaction.recentBlockhash = yield connectionInner._recentBlockhash(connectionInner._disableBlockhashCaching);\n        const signData = transaction.serializeMessage();\n        const wireTransaction = transactionTyped._serialize(signData);\n        const encodedTransaction = wireTransaction.toString(\"base64\");\n        const config = { encoding: \"base64\", commitment };\n        const res = yield connectionInner._rpcRequest(\"simulateTransaction\", [\n            encodedTransaction,\n            config,\n        ]);\n        if (res.error) {\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n        }\n        return res.result;\n    });\n}\nexports.simulateTransactionWithCommitment = simulateTransactionWithCommitment;\n//# sourceMappingURL=simulateTransaction.js.map"]},"metadata":{},"sourceType":"script"}