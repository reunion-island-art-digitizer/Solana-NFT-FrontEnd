{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Percent = void 0;\n\nvar jsbi_1 = __importDefault(require(\"jsbi\"));\n\nvar fraction_1 = require(\"./fraction\");\n\nvar ONE_HUNDRED = new fraction_1.Fraction(jsbi_1.default.BigInt(100));\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nvar Percent = /*#__PURE__*/function (_fraction_1$Fraction) {\n  _inherits(Percent, _fraction_1$Fraction);\n\n  var _super = _createSuper(Percent);\n\n  function Percent() {\n    var _this;\n\n    _classCallCheck(this, Percent);\n\n    _this = _super.apply(this, arguments);\n    /**\n     * This boolean prevents a fraction from being interpreted as a Percent\n     */\n\n    _this.isPercent = true;\n    return _this;\n  }\n  /**\n   * Parses a {@link Percent} from a float.\n   * @param number Number to parse. (100% is 1.00)\n   * @param decimals Number of decimals of precision. (default 10)\n   * @returns Percent\n   */\n\n\n  _createClass(Percent, [{\n    key: \"add\",\n    value: function add(other) {\n      return toPercent(_get(_getPrototypeOf(Percent.prototype), \"add\", this).call(this, other));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return toPercent(_get(_getPrototypeOf(Percent.prototype), \"subtract\", this).call(this, other));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(other) {\n      return toPercent(_get(_getPrototypeOf(Percent.prototype), \"multiply\", this).call(this, other));\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(other) {\n      return toPercent(_get(_getPrototypeOf(Percent.prototype), \"divide\", this).call(this, other));\n    }\n  }, {\n    key: \"toSignificant\",\n    value: function toSignificant() {\n      var significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n      var format = arguments.length > 1 ? arguments[1] : undefined;\n      var rounding = arguments.length > 2 ? arguments[2] : undefined;\n      return _get(_getPrototypeOf(Percent.prototype), \"multiply\", this).call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed() {\n      var decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n      var format = arguments.length > 1 ? arguments[1] : undefined;\n      var rounding = arguments.length > 2 ? arguments[2] : undefined;\n      return _get(_getPrototypeOf(Percent.prototype), \"multiply\", this).call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n    }\n    /**\n     * Returns true if the other object is a {@link Percent}.\n     *\n     * @param other\n     * @returns\n     */\n\n  }], [{\n    key: \"fromNumber\",\n    value: function fromNumber(number) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var frac = fraction_1.Fraction.fromNumber(number, decimals);\n      return new Percent(frac.numerator, frac.denominator);\n    }\n    /**\n     * Parses a {@link Percent} from a given number of bps.\n     * @returns Percent\n     */\n\n  }, {\n    key: \"fromBPS\",\n    value: function fromBPS(bps) {\n      return new Percent(bps, 10000);\n    }\n  }, {\n    key: \"isPercent\",\n    value: function isPercent(other) {\n      var _a;\n\n      return fraction_1.Fraction.isFraction(other) && ((_a = other) === null || _a === void 0 ? void 0 : _a.isPercent) === true;\n    }\n  }]);\n\n  return Percent;\n}(fraction_1.Fraction);\n\nexports.Percent = Percent;\nPercent.ZERO = new Percent(0);\n/**\n * 1%\n */\n\nPercent.ONE = new Percent(1, 100);\n/**\n * 100% (1/1)\n */\n\nPercent.ONE_HUNDRED = new Percent(1);","map":{"version":3,"sources":["../src/percent.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAGA,IAAM,WAAW,GAAG,IAAI,UAAA,CAAA,QAAJ,CAAa,MAAA,CAAA,OAAA,CAAK,MAAL,CAAY,GAAZ,CAAb,CAApB;AAEA;;;AAGG;;AACH,SAAS,SAAT,CAAmB,QAAnB,EAAqC;AACnC,SAAO,IAAI,OAAJ,CAAY,QAAQ,CAAC,SAArB,EAAgC,QAAQ,CAAC,WAAzC,CAAP;AACD;;IAEY,O;;;;;AAAb,qBAAA;AAAA;;AAAA;;;AACE;;AAEG;;AACa,UAAA,SAAA,GAAkB,IAAlB;AAJlB;AAmFC;AAjEC;;;;;AAKG;;;;;WAca,aAAI,KAAJ,EAA+B;AAC7C,aAAO,SAAS,kEAAW,KAAX,EAAhB;AACD;;;WAEe,kBAAS,KAAT,EAAoC;AAClD,aAAO,SAAS,uEAAgB,KAAhB,EAAhB;AACD;;;WAEe,kBAAS,KAAT,EAAoC;AAClD,aAAO,SAAS,uEAAgB,KAAhB,EAAhB;AACD;;;WAEe,gBAAO,KAAP,EAAkC;AAChD,aAAO,SAAS,qEAAc,KAAd,EAAhB;AACD;;;WAEe,yBAGK;AAAA,UAFnB,iBAEmB,uEAFC,CAED;AAAA,UADnB,MACmB;AAAA,UAAnB,QAAmB;AAEnB,aAAO,sEACK,WADL,EAEJ,aAFI,CAEU,iBAFV,EAE6B,MAF7B,EAEqC,QAFrC,CAAP;AAGD;;;WAEe,mBAGK;AAAA,UAFnB,aAEmB,uEAFH,CAEG;AAAA,UADnB,MACmB;AAAA,UAAnB,QAAmB;AAEnB,aAAO,sEAAe,WAAf,EAA4B,OAA5B,CAAoC,aAApC,EAAmD,MAAnD,EAA2D,QAA3D,CAAP;AACD;AAED;;;;;AAKG;;;;WApDI,oBAA2B,MAA3B,EAAwD;AAAA,UAAb,QAAa,uEAAF,EAAE;AAC7D,UAAM,IAAI,GAAG,UAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,MAApB,EAA4B,QAA5B,CAAb;AACA,aAAO,IAAI,OAAJ,CAAY,IAAI,CAAC,SAAjB,EAA4B,IAAI,CAAC,WAAjC,CAAP;AACD;AAED;;;AAGG;;;;WACI,iBAAe,GAAf,EAA6B;AAClC,aAAO,IAAI,OAAJ,CAAY,GAAZ,EAAiB,KAAjB,CAAP;AACD;;;WA0CM,mBAAiB,KAAjB,EAA+B;;;AACpC,aACE,UAAA,CAAA,QAAA,CAAS,UAAT,CAAoB,KAApB,KACA,CAAA,CAAA,EAAA,GAAC,KAAD,MAA6C,IAA7C,IAA6C,EAAA,KAAA,KAAA,CAA7C,GAA6C,KAAA,CAA7C,GAA6C,EAAA,CAAE,SAA/C,MAA6D,IAF/D;AAID;;;;EAlF0B,UAAA,CAAA,Q;;AAA7B,OAAA,CAAA,OAAA,GAAA,OAAA;AAMkC,OAAA,CAAA,IAAA,GAAgB,IAAI,OAAJ,CAAY,CAAZ,CAAhB;AAEhC;;AAEG;;AAC6B,OAAA,CAAA,GAAA,GAAe,IAAI,OAAJ,CAAY,CAAZ,EAAe,GAAf,CAAf;AAEhC;;AAEG;;AACoB,OAAA,CAAA,WAAA,GAAuB,IAAI,OAAJ,CAAY,CAAZ,CAAvB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Percent = void 0;\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst fraction_1 = require(\"./fraction\");\nconst ONE_HUNDRED = new fraction_1.Fraction(jsbi_1.default.BigInt(100));\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction) {\n    return new Percent(fraction.numerator, fraction.denominator);\n}\nclass Percent extends fraction_1.Fraction {\n    constructor() {\n        super(...arguments);\n        /**\n         * This boolean prevents a fraction from being interpreted as a Percent\n         */\n        this.isPercent = true;\n    }\n    /**\n     * Parses a {@link Percent} from a float.\n     * @param number Number to parse. (100% is 1.00)\n     * @param decimals Number of decimals of precision. (default 10)\n     * @returns Percent\n     */\n    static fromNumber(number, decimals = 10) {\n        const frac = fraction_1.Fraction.fromNumber(number, decimals);\n        return new Percent(frac.numerator, frac.denominator);\n    }\n    /**\n     * Parses a {@link Percent} from a given number of bps.\n     * @returns Percent\n     */\n    static fromBPS(bps) {\n        return new Percent(bps, 10000);\n    }\n    add(other) {\n        return toPercent(super.add(other));\n    }\n    subtract(other) {\n        return toPercent(super.subtract(other));\n    }\n    multiply(other) {\n        return toPercent(super.multiply(other));\n    }\n    divide(other) {\n        return toPercent(super.divide(other));\n    }\n    toSignificant(significantDigits = 5, format, rounding) {\n        return super\n            .multiply(ONE_HUNDRED)\n            .toSignificant(significantDigits, format, rounding);\n    }\n    toFixed(decimalPlaces = 2, format, rounding) {\n        return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n    }\n    /**\n     * Returns true if the other object is a {@link Percent}.\n     *\n     * @param other\n     * @returns\n     */\n    static isPercent(other) {\n        var _a;\n        return (fraction_1.Fraction.isFraction(other) &&\n            ((_a = other) === null || _a === void 0 ? void 0 : _a.isPercent) === true);\n    }\n}\nexports.Percent = Percent;\nPercent.ZERO = new Percent(0);\n/**\n * 1%\n */\nPercent.ONE = new Percent(1, 100);\n/**\n * 100% (1/1)\n */\nPercent.ONE_HUNDRED = new Percent(1);\n//# sourceMappingURL=percent.js.map"]},"metadata":{},"sourceType":"script"}