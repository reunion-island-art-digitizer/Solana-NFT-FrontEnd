{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransactionWithCommitment = void 0;\n\nconst tslib_1 = require(\"tslib\");\n/**\n * Copy of Connection.simulateTransaction that takes a commitment parameter.\n */\n\n\nfunction simulateTransactionWithCommitment(connection, transaction, commitment = \"recent\") {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const connectionInner = connection;\n    const transactionTyped = transaction;\n    transaction.recentBlockhash = yield connectionInner._recentBlockhash(connectionInner._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n\n    const wireTransaction = transactionTyped._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString(\"base64\");\n    const config = {\n      encoding: \"base64\",\n      commitment\n    };\n    const res = yield connectionInner._rpcRequest(\"simulateTransaction\", [encodedTransaction, config]);\n\n    if (res.error) {\n      throw new Error(\"failed to simulate transaction: \" + res.error.message);\n    }\n\n    return res.result;\n  });\n}\n\nexports.simulateTransactionWithCommitment = simulateTransactionWithCommitment;","map":{"version":3,"sources":["../../src/utils/simulateTransaction.ts"],"names":[],"mappings":";;;;;;;;AAQA;;AAEG;;;AACH,SAAsB,iCAAtB,CACE,UADF,EAEE,WAFF,EAGE,UAAA,GAAyB,QAH3B,EAGmC;;AAEjC,UAAM,eAAe,GAAG,UAAxB;AAiBA,UAAM,gBAAgB,GAAG,WAAzB;AAIA,IAAA,WAAW,CAAC,eAAZ,GAA8B,MAAM,eAAe,CAAC,gBAAhB,CAClC,eAAe,CAAC,wBADkB,CAApC;AAIA,UAAM,QAAQ,GAAG,WAAW,CAAC,gBAAZ,EAAjB;;AAEA,UAAM,eAAe,GAAG,gBAAgB,CAAC,UAAjB,CAA4B,QAA5B,CAAxB;;AACA,UAAM,kBAAkB,GAAG,eAAe,CAAC,QAAhB,CAAyB,QAAzB,CAA3B;AACA,UAAM,MAAM,GAAG;AAAE,MAAA,QAAQ,EAAE,QAAZ;AAAsB,MAAA;AAAtB,KAAf;AAEA,UAAM,GAAG,GAAG,MAAM,eAAe,CAAC,WAAhB,CAA4B,qBAA5B,EAAmD,CACnE,kBADmE,EAEnE,MAFmE,CAAnD,CAAlB;;AAIA,QAAI,GAAG,CAAC,KAAR,EAAe;AACb,YAAM,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,CAAN;AACD;;AACD,WAAO,GAAG,CAAC,MAAX;AACD,G;AAAA;;AA5CD,OAAA,CAAA,iCAAA,GAAA,iCAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simulateTransactionWithCommitment = void 0;\nconst tslib_1 = require(\"tslib\");\n/**\n * Copy of Connection.simulateTransaction that takes a commitment parameter.\n */\nfunction simulateTransactionWithCommitment(connection, transaction, commitment = \"recent\") {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const connectionInner = connection;\n        const transactionTyped = transaction;\n        transaction.recentBlockhash = yield connectionInner._recentBlockhash(connectionInner._disableBlockhashCaching);\n        const signData = transaction.serializeMessage();\n        const wireTransaction = transactionTyped._serialize(signData);\n        const encodedTransaction = wireTransaction.toString(\"base64\");\n        const config = { encoding: \"base64\", commitment };\n        const res = yield connectionInner._rpcRequest(\"simulateTransaction\", [\n            encodedTransaction,\n            config,\n        ]);\n        if (res.error) {\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n        }\n        return res.result;\n    });\n}\nexports.simulateTransactionWithCommitment = simulateTransactionWithCommitment;\n//# sourceMappingURL=simulateTransaction.js.map"]},"metadata":{},"sourceType":"script"}