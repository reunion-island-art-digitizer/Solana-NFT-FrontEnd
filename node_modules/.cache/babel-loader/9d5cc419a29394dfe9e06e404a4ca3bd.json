{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useConnectionInternal = void 0;\n\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst react_1 = require(\"react\");\n\nconst useLocalStorageState_1 = require(\"./useLocalStorageState\");\n\nconst makeNetworkConfigMap = partial => Object.entries(solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP).reduce((acc, [k, v]) => Object.assign(Object.assign({}, acc), {\n  [k]: Object.assign(Object.assign({}, v), partial[k])\n}), solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP);\n/**\n * Handles the connection to the Solana nodes.\n * @returns\n */\n\n\nconst useConnectionInternal = ({\n  // default to mainnet-beta\n  defaultNetwork = \"mainnet-beta\",\n  networkConfigs = solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP,\n  commitment = \"recent\"\n}) => {\n  const [network, setNetwork] = (0, useLocalStorageState_1.useLocalStorageState)(\"use-solana/network\", defaultNetwork);\n  const configMap = makeNetworkConfigMap(networkConfigs);\n  const config = configMap[network];\n  const {\n    endpoint,\n    endpointWs\n  } = config;\n  const connection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {\n    commitment,\n    wsEndpoint: endpointWs\n  }), [commitment, endpoint, endpointWs]);\n  const sendConnection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {\n    commitment,\n    wsEndpoint: endpointWs\n  }), [commitment, endpoint, endpointWs]);\n  return {\n    connection,\n    sendConnection,\n    network,\n    setNetwork,\n    endpoint\n  };\n};\n\nexports.useConnectionInternal = useConnectionInternal;","map":{"version":3,"sources":["../../src/utils/useConnectionInternal.ts"],"names":[],"mappings":";;;;;;;AAKA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAcA,MAAM,oBAAoB,GACxB,OAD2B,IAG3B,MAAM,CAAC,OAAP,CAAe,gBAAA,CAAA,0BAAf,EAA2C,MAA3C,CACE,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,CAAJ,CAAN,KAAiB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACZ,GADY,CAAA,EACT;AACN,GAAC,CAAD,GAAc,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACT,CADS,CAAA,EAET,OAAO,CAAC,CAAD,CAFE;AADR,CADS,CADnB,EAQE,gBAAA,CAAA,0BARF,CAHF;AAoBA;;;AAGG;;;AACI,MAAM,qBAAqB,GAAG,CAAC;AACpC;AACA,EAAA,cAAc,GAAG,cAFmB;AAGpC,EAAA,cAAc,GAAG,gBAAA,CAAA,0BAHmB;AAIpC,EAAA,UAAU,GAAG;AAJuB,CAAD,KAKG;AACtC,QAAM,CAAC,OAAD,EAAU,UAAV,IAAwB,CAAA,GAAA,sBAAA,CAAA,oBAAA,EAC5B,oBAD4B,EAE5B,cAF4B,CAA9B;AAIA,QAAM,SAAS,GAAG,oBAAoB,CAAC,cAAD,CAAtC;AACA,QAAM,MAAM,GAAG,SAAS,CAAC,OAAD,CAAxB;AACA,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA;AAAZ,MAA2B,MAAjC;AAEA,QAAM,UAAU,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EACjB,MACE,IAAI,SAAA,CAAA,UAAJ,CAAe,QAAf,EAAyB;AACvB,IAAA,UADuB;AAEvB,IAAA,UAAU,EAAE;AAFW,GAAzB,CAFe,EAMjB,CAAC,UAAD,EAAa,QAAb,EAAuB,UAAvB,CANiB,CAAnB;AAQA,QAAM,cAAc,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EACrB,MACE,IAAI,SAAA,CAAA,UAAJ,CAAe,QAAf,EAAyB;AACvB,IAAA,UADuB;AAEvB,IAAA,UAAU,EAAE;AAFW,GAAzB,CAFmB,EAMrB,CAAC,UAAD,EAAa,QAAb,EAAuB,UAAvB,CANqB,CAAvB;AASA,SAAO;AACL,IAAA,UADK;AAEL,IAAA,cAFK;AAGL,IAAA,OAHK;AAIL,IAAA,UAJK;AAKL,IAAA;AALK,GAAP;AAOD,CAtCM;;AAAM,OAAA,CAAA,qBAAA,GAAqB,qBAArB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useConnectionInternal = void 0;\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst react_1 = require(\"react\");\nconst useLocalStorageState_1 = require(\"./useLocalStorageState\");\nconst makeNetworkConfigMap = (partial) => Object.entries(solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP).reduce((acc, [k, v]) => (Object.assign(Object.assign({}, acc), { [k]: Object.assign(Object.assign({}, v), partial[k]) })), solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP);\n/**\n * Handles the connection to the Solana nodes.\n * @returns\n */\nconst useConnectionInternal = ({ \n// default to mainnet-beta\ndefaultNetwork = \"mainnet-beta\", networkConfigs = solana_contrib_1.DEFAULT_NETWORK_CONFIG_MAP, commitment = \"recent\", }) => {\n    const [network, setNetwork] = (0, useLocalStorageState_1.useLocalStorageState)(\"use-solana/network\", defaultNetwork);\n    const configMap = makeNetworkConfigMap(networkConfigs);\n    const config = configMap[network];\n    const { endpoint, endpointWs } = config;\n    const connection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {\n        commitment,\n        wsEndpoint: endpointWs,\n    }), [commitment, endpoint, endpointWs]);\n    const sendConnection = (0, react_1.useMemo)(() => new web3_js_1.Connection(endpoint, {\n        commitment,\n        wsEndpoint: endpointWs,\n    }), [commitment, endpoint, endpointWs]);\n    return {\n        connection,\n        sendConnection,\n        network,\n        setNetwork,\n        endpoint,\n    };\n};\nexports.useConnectionInternal = useConnectionInternal;\n//# sourceMappingURL=useConnectionInternal.js.map"]},"metadata":{},"sourceType":"script"}