{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenAmount = exports.validateU256 = exports.validateU64 = exports.TokenAmountUnderflow = exports.TokenAmountOverflow = void 0;\n\nconst decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\n\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\n\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\n\nconst constants_1 = require(\"./constants\");\n\nconst fraction_1 = require(\"./fraction\");\n\nconst percent_1 = require(\"./percent\");\n\nconst utils_1 = require(\"./utils\");\n\nclass TokenAmountOverflow extends RangeError {\n  constructor(type, amount) {\n    super(`Token amount overflows ${type}: ${amount.toString()}`);\n  }\n\n}\n\nexports.TokenAmountOverflow = TokenAmountOverflow;\n\nclass TokenAmountUnderflow extends RangeError {\n  constructor(amount) {\n    super(`Token amount must be greater than zero: ${amount.toString()}`);\n  }\n\n}\n\nexports.TokenAmountUnderflow = TokenAmountUnderflow;\n\nfunction validateU64(value) {\n  if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {\n    throw new TokenAmountUnderflow(value);\n  }\n\n  if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U64)) {\n    throw new TokenAmountOverflow(\"u64\", value);\n  }\n}\n\nexports.validateU64 = validateU64;\n\nfunction validateU256(value) {\n  if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {\n    throw new TokenAmountUnderflow(value);\n  }\n\n  if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U256)) {\n    throw new TokenAmountOverflow(\"u256\", value);\n  }\n}\n\nexports.validateU256 = validateU256;\n\nconst stripTrailingZeroes = num => {\n  const [head, tail, ...rest] = num.split(\".\");\n\n  if (rest.length > 0 || !head) {\n    console.warn(`Invalid number passed to stripTrailingZeroes: ${num}`);\n    return num;\n  }\n\n  if (!tail) {\n    return num;\n  }\n\n  return `${head}.${tail.replace(/\\.0+$/, \"\")}`;\n};\n\nclass TokenAmount extends fraction_1.Fraction {\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token, amount, validate) {\n    const parsedAmount = (0, utils_1.parseBigintIsh)(amount);\n    validate === null || validate === void 0 ? void 0 : validate(parsedAmount);\n    super(parsedAmount, (0, utils_1.makeDecimalMultiplier)(token.decimals));\n    this.token = token;\n  }\n  /**\n   * Parses a token amount from a decimal representation.\n   * @param token\n   * @param uiAmount\n   * @returns\n   */\n\n\n  static parseFromString(token, uiAmount) {\n    return new TokenAmount(token, jsbi_1.default.BigInt(new decimal_js_light_1.default(uiAmount).times(new decimal_js_light_1.default(10).pow(token.decimals)).toFixed(0)));\n  }\n\n  get raw() {\n    return this.numerator;\n  }\n\n  toSignificant(significantDigits = 6, format, rounding = constants_1.Rounding.ROUND_DOWN) {\n    return super.toSignificant(significantDigits, format, rounding);\n  }\n\n  toFixed(decimalPlaces = this.token.decimals, format, rounding = constants_1.Rounding.ROUND_DOWN) {\n    (0, tiny_invariant_1.default)(decimalPlaces <= this.token.decimals, \"DECIMALS\");\n    return super.toFixed(decimalPlaces, format, rounding);\n  }\n\n  toExact(format = {\n    groupSeparator: \"\"\n  }) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    fraction_1.Big.DP = this.token.decimals; // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n\n    return new fraction_1.Big(this.numerator).div(this.denominator.toString()).toFormat(format);\n  }\n\n  add(other) {\n    (0, tiny_invariant_1.default)(this.token.equals(other.token), `add token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n    return new TokenAmount(this.token, jsbi_1.default.add(this.raw, other.raw));\n  }\n\n  subtract(other) {\n    (0, tiny_invariant_1.default)(this.token.equals(other.token), `subtract token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n    return new TokenAmount(this.token, jsbi_1.default.subtract(this.raw, other.raw));\n  }\n  /**\n   * Gets this TokenAmount as a percentage of the other TokenAmount.\n   * @param other\n   * @returns\n   */\n\n\n  divideByAmount(other) {\n    (0, tiny_invariant_1.default)(this.token.equals(other.token), `divideByAmount token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n    const frac = this.divide(other);\n    return new percent_1.Percent(frac.numerator, frac.denominator);\n  }\n  /**\n   * Gets this TokenAmount as a percentage of the other TokenAmount.\n   * @param other\n   * @returns\n   */\n\n\n  divideBy(other) {\n    const frac = this.divide(other);\n    return new percent_1.Percent(frac.numerator, frac.denominator);\n  }\n  /**\n   * Multiplies this token amount by a percent.\n   * WARNING: this loses precision\n   * @param percent\n   * @returns\n   */\n\n\n  multiplyBy(percent) {\n    return new TokenAmount(this.token, percent.asFraction.multiply(this.raw).toFixed(0));\n  }\n  /**\n   * Reduces this token amount by a percent.\n   * WARNING: this loses precision\n   * @param percent\n   * @returns\n   */\n\n\n  reduceBy(percent) {\n    return this.multiplyBy(new percent_1.Percent(1, 1).subtract(percent));\n  }\n  /**\n   * Formats this number using Intl.NumberFormatOptions\n   * @param param0\n   * @returns\n   */\n\n\n  format({\n    numberFormatOptions,\n    locale\n  } = {}) {\n    const asExactString = this.toFixed(this.token.decimals);\n    const asNumber = parseFloat(asExactString);\n    return `${numberFormatOptions !== undefined ? asNumber.toLocaleString(locale, numberFormatOptions) : stripTrailingZeroes(asExactString)}`;\n  }\n  /**\n   * Returns true if the other object is a {@link TokenAmount}.\n   *\n   * @param other\n   * @returns\n   */\n\n\n  static isTokenAmount(other) {\n    var _a;\n\n    return fraction_1.Fraction.isFraction(other) && !!((_a = other) === null || _a === void 0 ? void 0 : _a.token);\n  }\n\n}\n\nexports.TokenAmount = TokenAmount;","map":{"version":3,"sources":["../src/tokenAmount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenAmount = exports.validateU256 = exports.validateU64 = exports.TokenAmountUnderflow = exports.TokenAmountOverflow = void 0;\nconst decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\nconst constants_1 = require(\"./constants\");\nconst fraction_1 = require(\"./fraction\");\nconst percent_1 = require(\"./percent\");\nconst utils_1 = require(\"./utils\");\nclass TokenAmountOverflow extends RangeError {\n    constructor(type, amount) {\n        super(`Token amount overflows ${type}: ${amount.toString()}`);\n    }\n}\nexports.TokenAmountOverflow = TokenAmountOverflow;\nclass TokenAmountUnderflow extends RangeError {\n    constructor(amount) {\n        super(`Token amount must be greater than zero: ${amount.toString()}`);\n    }\n}\nexports.TokenAmountUnderflow = TokenAmountUnderflow;\nfunction validateU64(value) {\n    if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {\n        throw new TokenAmountUnderflow(value);\n    }\n    if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U64)) {\n        throw new TokenAmountOverflow(\"u64\", value);\n    }\n}\nexports.validateU64 = validateU64;\nfunction validateU256(value) {\n    if (!jsbi_1.default.greaterThanOrEqual(value, constants_1.ZERO)) {\n        throw new TokenAmountUnderflow(value);\n    }\n    if (!jsbi_1.default.lessThanOrEqual(value, constants_1.MAX_U256)) {\n        throw new TokenAmountOverflow(\"u256\", value);\n    }\n}\nexports.validateU256 = validateU256;\nconst stripTrailingZeroes = (num) => {\n    const [head, tail, ...rest] = num.split(\".\");\n    if (rest.length > 0 || !head) {\n        console.warn(`Invalid number passed to stripTrailingZeroes: ${num}`);\n        return num;\n    }\n    if (!tail) {\n        return num;\n    }\n    return `${head}.${tail.replace(/\\.0+$/, \"\")}`;\n};\nclass TokenAmount extends fraction_1.Fraction {\n    // amount _must_ be raw, i.e. in the native representation\n    constructor(token, amount, validate) {\n        const parsedAmount = (0, utils_1.parseBigintIsh)(amount);\n        validate === null || validate === void 0 ? void 0 : validate(parsedAmount);\n        super(parsedAmount, (0, utils_1.makeDecimalMultiplier)(token.decimals));\n        this.token = token;\n    }\n    /**\n     * Parses a token amount from a decimal representation.\n     * @param token\n     * @param uiAmount\n     * @returns\n     */\n    static parseFromString(token, uiAmount) {\n        return new TokenAmount(token, jsbi_1.default.BigInt(new decimal_js_light_1.default(uiAmount)\n            .times(new decimal_js_light_1.default(10).pow(token.decimals))\n            .toFixed(0)));\n    }\n    get raw() {\n        return this.numerator;\n    }\n    toSignificant(significantDigits = 6, format, rounding = constants_1.Rounding.ROUND_DOWN) {\n        return super.toSignificant(significantDigits, format, rounding);\n    }\n    toFixed(decimalPlaces = this.token.decimals, format, rounding = constants_1.Rounding.ROUND_DOWN) {\n        (0, tiny_invariant_1.default)(decimalPlaces <= this.token.decimals, \"DECIMALS\");\n        return super.toFixed(decimalPlaces, format, rounding);\n    }\n    toExact(format = { groupSeparator: \"\" }) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        fraction_1.Big.DP = this.token.decimals;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n        return new fraction_1.Big(this.numerator).div(this.denominator.toString()).toFormat(format);\n    }\n    add(other) {\n        (0, tiny_invariant_1.default)(this.token.equals(other.token), `add token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n        return new TokenAmount(this.token, jsbi_1.default.add(this.raw, other.raw));\n    }\n    subtract(other) {\n        (0, tiny_invariant_1.default)(this.token.equals(other.token), `subtract token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n        return new TokenAmount(this.token, jsbi_1.default.subtract(this.raw, other.raw));\n    }\n    /**\n     * Gets this TokenAmount as a percentage of the other TokenAmount.\n     * @param other\n     * @returns\n     */\n    divideByAmount(other) {\n        (0, tiny_invariant_1.default)(this.token.equals(other.token), `divideByAmount token mismatch: ${this.token.toString()} !== ${other.token.toString()}`);\n        const frac = this.divide(other);\n        return new percent_1.Percent(frac.numerator, frac.denominator);\n    }\n    /**\n     * Gets this TokenAmount as a percentage of the other TokenAmount.\n     * @param other\n     * @returns\n     */\n    divideBy(other) {\n        const frac = this.divide(other);\n        return new percent_1.Percent(frac.numerator, frac.denominator);\n    }\n    /**\n     * Multiplies this token amount by a percent.\n     * WARNING: this loses precision\n     * @param percent\n     * @returns\n     */\n    multiplyBy(percent) {\n        return new TokenAmount(this.token, percent.asFraction.multiply(this.raw).toFixed(0));\n    }\n    /**\n     * Reduces this token amount by a percent.\n     * WARNING: this loses precision\n     * @param percent\n     * @returns\n     */\n    reduceBy(percent) {\n        return this.multiplyBy(new percent_1.Percent(1, 1).subtract(percent));\n    }\n    /**\n     * Formats this number using Intl.NumberFormatOptions\n     * @param param0\n     * @returns\n     */\n    format({ numberFormatOptions, locale } = {}) {\n        const asExactString = this.toFixed(this.token.decimals);\n        const asNumber = parseFloat(asExactString);\n        return `${numberFormatOptions !== undefined\n            ? asNumber.toLocaleString(locale, numberFormatOptions)\n            : stripTrailingZeroes(asExactString)}`;\n    }\n    /**\n     * Returns true if the other object is a {@link TokenAmount}.\n     *\n     * @param other\n     * @returns\n     */\n    static isTokenAmount(other) {\n        var _a;\n        return (fraction_1.Fraction.isFraction(other) &&\n            !!((_a = other) === null || _a === void 0 ? void 0 : _a.token));\n    }\n}\nexports.TokenAmount = TokenAmount;\n//# sourceMappingURL=tokenAmount.js.map"]},"metadata":{},"sourceType":"script"}