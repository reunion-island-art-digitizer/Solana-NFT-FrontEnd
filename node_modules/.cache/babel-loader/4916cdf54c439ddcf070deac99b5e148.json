{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenAmount = void 0;\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst token_math_1 = require(\"@ubeswap/token-math\");\n\nclass TokenAmount extends token_math_1.TokenAmount {\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token, amount) {\n    super(token, amount);\n    (0, token_math_1.validateU64)(this.raw);\n  }\n  /**\n   * Parses a token amount from a decimal representation.\n   * @param token\n   * @param uiAmount\n   * @returns\n   */\n\n\n  static parse(token, uiAmount) {\n    const prev = token_math_1.TokenAmount.parseFromString(token, uiAmount);\n    return new TokenAmount(token, prev.raw);\n  }\n\n  add(other) {\n    const result = super.add(other);\n    return new TokenAmount(this.token, result.raw);\n  }\n\n  subtract(other) {\n    const result = super.subtract(other);\n    return new TokenAmount(this.token, result.raw);\n  }\n\n  multiplyBy(percent) {\n    const result = super.multiplyBy(percent);\n    return new TokenAmount(this.token, result.raw);\n  }\n\n  reduceBy(percent) {\n    const result = super.reduceBy(percent);\n    return new TokenAmount(this.token, result.raw);\n  }\n  /**\n   * Formats the token amount with units and decimal adjustment, e.g. \"100.42 SOL\"\n   * @returns\n   */\n\n\n  formatUnits() {\n    return `${this.toExact()} ${this.token.symbol}`;\n  }\n\n  toString() {\n    return `TokenAmount[Token=(${this.token.toString()}), amount=${this.toExact()}`;\n  }\n  /**\n   * Converts this to the raw u64 used by the SPL library\n   * @returns\n   */\n\n\n  toU64() {\n    return new spl_token_1.u64(this.raw.toString());\n  }\n\n}\n\nexports.TokenAmount = TokenAmount;","map":{"version":3,"sources":["../src/tokenAmount.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAeA,MAAa,WAAb,SAAiC,YAAA,CAAA,WAAjC,CAAoD;AAClD;AACA,EAAA,WAAA,CAAmB,KAAnB,EAAiC,MAAjC,EAAkD;AAChD,UAAM,KAAN,EAAa,MAAb;AACA,KAAA,GAAA,YAAA,CAAA,WAAA,EAAY,KAAK,GAAjB;AACD;AAED;;;;;AAKG;;;AACgB,SAAL,KAAK,CAAC,KAAD,EAAe,QAAf,EAA+B;AAChD,UAAM,IAAI,GAAG,YAAA,CAAA,WAAA,CAAa,eAAb,CAA6B,KAA7B,EAAoC,QAApC,CAAb;AACA,WAAO,IAAI,WAAJ,CAAgB,KAAhB,EAAuB,IAAI,CAAC,GAA5B,CAAP;AACD;;AAED,EAAA,GAAG,CAAC,KAAD,EAAmB;AACpB,UAAM,MAAM,GAAG,MAAM,GAAN,CAAU,KAAV,CAAf;AACA,WAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;AACD,EAAA,QAAQ,CAAC,KAAD,EAAmB;AACzB,UAAM,MAAM,GAAG,MAAM,QAAN,CAAe,KAAf,CAAf;AACA,WAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;AACD,EAAA,UAAU,CAAC,OAAD,EAAiB;AACzB,UAAM,MAAM,GAAG,MAAM,UAAN,CAAiB,OAAjB,CAAf;AACA,WAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;AACD,EAAA,QAAQ,CAAC,OAAD,EAAiB;AACvB,UAAM,MAAM,GAAG,MAAM,QAAN,CAAe,OAAf,CAAf;AACA,WAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;AAED;;;AAGG;;;AACH,EAAA,WAAW,GAAA;AACT,WAAO,GAAG,KAAK,OAAL,EAAc,IAAI,KAAK,KAAL,CAAW,MAAM,EAA7C;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,sBAAsB,KAAK,KAAL,CAAW,QAAX,EAAqB,aAAa,KAAK,OAAL,EAAc,EAA7E;AACD;AAED;;;AAGG;;;AACH,EAAA,KAAK,GAAA;AACH,WAAO,IAAI,WAAA,CAAA,GAAJ,CAAQ,KAAK,GAAL,CAAS,QAAT,EAAR,CAAP;AACD;;AArDiD;;AAApD,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenAmount = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst token_math_1 = require(\"@ubeswap/token-math\");\nclass TokenAmount extends token_math_1.TokenAmount {\n    // amount _must_ be raw, i.e. in the native representation\n    constructor(token, amount) {\n        super(token, amount);\n        (0, token_math_1.validateU64)(this.raw);\n    }\n    /**\n     * Parses a token amount from a decimal representation.\n     * @param token\n     * @param uiAmount\n     * @returns\n     */\n    static parse(token, uiAmount) {\n        const prev = token_math_1.TokenAmount.parseFromString(token, uiAmount);\n        return new TokenAmount(token, prev.raw);\n    }\n    add(other) {\n        const result = super.add(other);\n        return new TokenAmount(this.token, result.raw);\n    }\n    subtract(other) {\n        const result = super.subtract(other);\n        return new TokenAmount(this.token, result.raw);\n    }\n    multiplyBy(percent) {\n        const result = super.multiplyBy(percent);\n        return new TokenAmount(this.token, result.raw);\n    }\n    reduceBy(percent) {\n        const result = super.reduceBy(percent);\n        return new TokenAmount(this.token, result.raw);\n    }\n    /**\n     * Formats the token amount with units and decimal adjustment, e.g. \"100.42 SOL\"\n     * @returns\n     */\n    formatUnits() {\n        return `${this.toExact()} ${this.token.symbol}`;\n    }\n    toString() {\n        return `TokenAmount[Token=(${this.token.toString()}), amount=${this.toExact()}`;\n    }\n    /**\n     * Converts this to the raw u64 used by the SPL library\n     * @returns\n     */\n    toU64() {\n        return new spl_token_1.u64(this.raw.toString());\n    }\n}\nexports.TokenAmount = TokenAmount;\n//# sourceMappingURL=tokenAmount.js.map"]},"metadata":{},"sourceType":"script"}