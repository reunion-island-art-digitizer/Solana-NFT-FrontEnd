{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Price = void 0;\n\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\n\nconst fraction_1 = require(\"./fraction\");\n\nconst tokenAmount_1 = require(\"./tokenAmount\");\n\nconst utils_1 = require(\"./utils\");\n\nclass Price extends fraction_1.Fraction {\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseCurrency, quoteCurrency, denominator, numerator) {\n    super((0, utils_1.parseBigintIsh)(numerator), (0, utils_1.parseBigintIsh)(denominator));\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new fraction_1.Fraction((0, utils_1.makeDecimalMultiplier)(baseCurrency.decimals), (0, utils_1.makeDecimalMultiplier)(quoteCurrency.decimals));\n  }\n\n  get raw() {\n    return new fraction_1.Fraction(this.numerator, this.denominator);\n  }\n\n  get adjusted() {\n    return super.multiply(this.scalar);\n  }\n\n  invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n\n  multiply(other) {\n    (0, tiny_invariant_1.default)(this.quoteCurrency.equals(other.baseCurrency), `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`);\n    const fraction = super.multiply(other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n\n\n  quote(tokenAmount) {\n    (0, tiny_invariant_1.default)(tokenAmount.token.equals(this.baseCurrency), `quote token mismatch: ${tokenAmount.token.toString()} !== ${this.baseCurrency.toString()}`);\n    return new tokenAmount_1.TokenAmount(this.quoteCurrency, super.multiply(tokenAmount.raw).quotient);\n  }\n\n  toSignificant(significantDigits = 6, format, rounding) {\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  }\n\n  toFixed(decimalPlaces = 4, format, rounding) {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  }\n\n}\n\nexports.Price = Price;","map":{"version":3,"sources":["../src/price.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,gBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AAGA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,MAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,MAAa,KAAb,SAA+C,UAAA,CAAA,QAA/C,CAAuD;AAKrD;AACA,EAAA,WAAA,CACE,YADF,EAEE,aAFF,EAGE,WAHF,EAIE,SAJF,EAIsB;AAEpB,UAAM,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,SAAf,CAAN,EAAiC,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,WAAf,CAAjC;AAEA,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,MAAL,GAAc,IAAI,UAAA,CAAA,QAAJ,CACZ,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,YAAY,CAAC,QAAnC,CADY,EAEZ,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,aAAa,CAAC,QAApC,CAFY,CAAd;AAID;;AAEa,MAAH,GAAG,GAAA;AACZ,WAAO,IAAI,UAAA,CAAA,QAAJ,CAAa,KAAK,SAAlB,EAA6B,KAAK,WAAlC,CAAP;AACD;;AAEkB,MAAR,QAAQ,GAAA;AACjB,WAAO,MAAM,QAAN,CAAe,KAAK,MAApB,CAAP;AACD;;AAEe,EAAA,MAAM,GAAA;AACpB,WAAO,IAAI,KAAJ,CACL,KAAK,aADA,EAEL,KAAK,YAFA,EAGL,KAAK,SAHA,EAIL,KAAK,WAJA,CAAP;AAMD;;AAEe,EAAA,QAAQ,CAAC,KAAD,EAAgB;AACtC,KAAA,GAAA,gBAAA,CAAA,OAAA,EACE,KAAK,aAAL,CAAmB,MAAnB,CAA0B,KAAK,CAAC,YAAhC,CADF,EAEE,4BAA4B,KAAK,aAAL,CAAmB,QAAnB,EAA6B,QAAQ,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B,EAFhG;AAIA,UAAM,QAAQ,GAAG,MAAM,QAAN,CAAe,KAAf,CAAjB;AACA,WAAO,IAAI,KAAJ,CACL,KAAK,YADA,EAEL,KAAK,CAAC,aAFD,EAGL,QAAQ,CAAC,WAHJ,EAIL,QAAQ,CAAC,SAJJ,CAAP;AAMD,GAnDoD,CAqDrD;;;AACO,EAAA,KAAK,CAAC,WAAD,EAA4B;AACtC,KAAA,GAAA,gBAAA,CAAA,OAAA,EACE,WAAW,CAAC,KAAZ,CAAkB,MAAlB,CAAyB,KAAK,YAA9B,CADF,EAEE,yBAAyB,WAAW,CAAC,KAAZ,CAAkB,QAAlB,EAA4B,QAAQ,KAAK,YAAL,CAAkB,QAAlB,EAA4B,EAF3F;AAIA,WAAO,IAAI,aAAA,CAAA,WAAJ,CACL,KAAK,aADA,EAEL,MAAM,QAAN,CAAe,WAAW,CAAC,GAA3B,EAAgC,QAF3B,CAAP;AAID;;AAEe,EAAA,aAAa,CAC3B,iBAAiB,GAAG,CADO,EAE3B,MAF2B,EAG3B,QAH2B,EAGR;AAEnB,WAAO,KAAK,QAAL,CAAc,aAAd,CAA4B,iBAA5B,EAA+C,MAA/C,EAAuD,QAAvD,CAAP;AACD;;AAEe,EAAA,OAAO,CACrB,aAAa,GAAG,CADK,EAErB,MAFqB,EAGrB,QAHqB,EAGF;AAEnB,WAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAtB,EAAqC,MAArC,EAA6C,QAA7C,CAAP;AACD;;AA/EoD;;AAAvD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Price = void 0;\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\nconst fraction_1 = require(\"./fraction\");\nconst tokenAmount_1 = require(\"./tokenAmount\");\nconst utils_1 = require(\"./utils\");\nclass Price extends fraction_1.Fraction {\n    // denominator and numerator _must_ be raw, i.e. in the native representation\n    constructor(baseCurrency, quoteCurrency, denominator, numerator) {\n        super((0, utils_1.parseBigintIsh)(numerator), (0, utils_1.parseBigintIsh)(denominator));\n        this.baseCurrency = baseCurrency;\n        this.quoteCurrency = quoteCurrency;\n        this.scalar = new fraction_1.Fraction((0, utils_1.makeDecimalMultiplier)(baseCurrency.decimals), (0, utils_1.makeDecimalMultiplier)(quoteCurrency.decimals));\n    }\n    get raw() {\n        return new fraction_1.Fraction(this.numerator, this.denominator);\n    }\n    get adjusted() {\n        return super.multiply(this.scalar);\n    }\n    invert() {\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    }\n    multiply(other) {\n        (0, tiny_invariant_1.default)(this.quoteCurrency.equals(other.baseCurrency), `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`);\n        const fraction = super.multiply(other);\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n    }\n    // performs floor division on overflow\n    quote(tokenAmount) {\n        (0, tiny_invariant_1.default)(tokenAmount.token.equals(this.baseCurrency), `quote token mismatch: ${tokenAmount.token.toString()} !== ${this.baseCurrency.toString()}`);\n        return new tokenAmount_1.TokenAmount(this.quoteCurrency, super.multiply(tokenAmount.raw).quotient);\n    }\n    toSignificant(significantDigits = 6, format, rounding) {\n        return this.adjusted.toSignificant(significantDigits, format, rounding);\n    }\n    toFixed(decimalPlaces = 4, format, rounding) {\n        return this.adjusted.toFixed(decimalPlaces, format, rounding);\n    }\n}\nexports.Price = Price;\n//# sourceMappingURL=price.js.map"]},"metadata":{},"sourceType":"script"}