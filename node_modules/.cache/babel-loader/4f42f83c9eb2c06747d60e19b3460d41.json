{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Price = void 0;\n\nvar tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\n\nvar fraction_1 = require(\"./fraction\");\n\nvar tokenAmount_1 = require(\"./tokenAmount\");\n\nvar utils_1 = require(\"./utils\");\n\nvar Price = /*#__PURE__*/function (_fraction_1$Fraction) {\n  _inherits(Price, _fraction_1$Fraction);\n\n  var _super = _createSuper(Price);\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _classCallCheck(this, Price);\n\n    _this = _super.call(this, (0, utils_1.parseBigintIsh)(numerator), (0, utils_1.parseBigintIsh)(denominator));\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new fraction_1.Fraction((0, utils_1.makeDecimalMultiplier)(baseCurrency.decimals), (0, utils_1.makeDecimalMultiplier)(quoteCurrency.decimals));\n    return _this;\n  }\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new fraction_1.Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _get(_getPrototypeOf(Price.prototype), \"multiply\", this).call(this, this.scalar);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(other) {\n      (0, tiny_invariant_1.default)(this.quoteCurrency.equals(other.baseCurrency), \"multiply token mismatch: \".concat(this.quoteCurrency.toString(), \" !== \").concat(other.baseCurrency.toString()));\n\n      var fraction = _get(_getPrototypeOf(Price.prototype), \"multiply\", this).call(this, other);\n\n      return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n    } // performs floor division on overflow\n\n  }, {\n    key: \"quote\",\n    value: function quote(tokenAmount) {\n      (0, tiny_invariant_1.default)(tokenAmount.token.equals(this.baseCurrency), \"quote token mismatch: \".concat(tokenAmount.token.toString(), \" !== \").concat(this.baseCurrency.toString()));\n      return new tokenAmount_1.TokenAmount(this.quoteCurrency, _get(_getPrototypeOf(Price.prototype), \"multiply\", this).call(this, tokenAmount.raw).quotient);\n    }\n  }, {\n    key: \"toSignificant\",\n    value: function toSignificant() {\n      var significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n      var format = arguments.length > 1 ? arguments[1] : undefined;\n      var rounding = arguments.length > 2 ? arguments[2] : undefined;\n      return this.adjusted.toSignificant(significantDigits, format, rounding);\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed() {\n      var decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n      var format = arguments.length > 1 ? arguments[1] : undefined;\n      var rounding = arguments.length > 2 ? arguments[2] : undefined;\n      return this.adjusted.toFixed(decimalPlaces, format, rounding);\n    }\n  }]);\n\n  return Price;\n}(fraction_1.Fraction);\n\nexports.Price = Price;","map":{"version":3,"sources":["../src/price.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,gBAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AAGA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAEA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;IAEa,K;;;;;AAKX;AACA,iBACE,YADF,EAEE,aAFF,EAGE,WAHF,EAIE,SAJF,EAIsB;AAAA;;AAAA;;AAEpB,8BAAM,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,SAAf,CAAN,EAAiC,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,WAAf,CAAjC;AAEA,UAAK,YAAL,GAAoB,YAApB;AACA,UAAK,aAAL,GAAqB,aAArB;AACA,UAAK,MAAL,GAAc,IAAI,UAAA,CAAA,QAAJ,CACZ,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,YAAY,CAAC,QAAnC,CADY,EAEZ,CAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,aAAa,CAAC,QAApC,CAFY,CAAd;AANoB;AAUrB;;;;SAED,eAAc;AACZ,aAAO,IAAI,UAAA,CAAA,QAAJ,CAAa,KAAK,SAAlB,EAA6B,KAAK,WAAlC,CAAP;AACD;;;SAED,eAAmB;AACjB,iFAAsB,KAAK,MAA3B;AACD;;;WAEe,kBAAM;AACpB,aAAO,IAAI,KAAJ,CACL,KAAK,aADA,EAEL,KAAK,YAFA,EAGL,KAAK,SAHA,EAIL,KAAK,WAJA,CAAP;AAMD;;;WAEe,kBAAS,KAAT,EAAwB;AACtC,OAAA,GAAA,gBAAA,CAAA,OAAA,EACE,KAAK,aAAL,CAAmB,MAAnB,CAA0B,KAAK,CAAC,YAAhC,CADF,qCAE8B,KAAK,aAAL,CAAmB,QAAnB,EAF9B,kBAEmE,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAFnE;;AAIA,UAAM,QAAQ,uEAAkB,KAAlB,CAAd;;AACA,aAAO,IAAI,KAAJ,CACL,KAAK,YADA,EAEL,KAAK,CAAC,aAFD,EAGL,QAAQ,CAAC,WAHJ,EAIL,QAAQ,CAAC,SAJJ,CAAP;AAMD,K,CAED;;;;WACO,eAAM,WAAN,EAAiC;AACtC,OAAA,GAAA,gBAAA,CAAA,OAAA,EACE,WAAW,CAAC,KAAZ,CAAkB,MAAlB,CAAyB,KAAK,YAA9B,CADF,kCAE2B,WAAW,CAAC,KAAZ,CAAkB,QAAlB,EAF3B,kBAE+D,KAAK,YAAL,CAAkB,QAAlB,EAF/D;AAIA,aAAO,IAAI,aAAA,CAAA,WAAJ,CACL,KAAK,aADA,EAEL,oEAAe,WAAW,CAAC,GAA3B,EAAgC,QAF3B,CAAP;AAID;;;WAEe,yBAGK;AAAA,UAFnB,iBAEmB,uEAFC,CAED;AAAA,UADnB,MACmB;AAAA,UAAnB,QAAmB;AAEnB,aAAO,KAAK,QAAL,CAAc,aAAd,CAA4B,iBAA5B,EAA+C,MAA/C,EAAuD,QAAvD,CAAP;AACD;;;WAEe,mBAGK;AAAA,UAFnB,aAEmB,uEAFH,CAEG;AAAA,UADnB,MACmB;AAAA,UAAnB,QAAmB;AAEnB,aAAO,KAAK,QAAL,CAAc,OAAd,CAAsB,aAAtB,EAAqC,MAArC,EAA6C,QAA7C,CAAP;AACD;;;;EA/E4C,UAAA,CAAA,Q;;AAA/C,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Price = void 0;\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\nconst fraction_1 = require(\"./fraction\");\nconst tokenAmount_1 = require(\"./tokenAmount\");\nconst utils_1 = require(\"./utils\");\nclass Price extends fraction_1.Fraction {\n    // denominator and numerator _must_ be raw, i.e. in the native representation\n    constructor(baseCurrency, quoteCurrency, denominator, numerator) {\n        super((0, utils_1.parseBigintIsh)(numerator), (0, utils_1.parseBigintIsh)(denominator));\n        this.baseCurrency = baseCurrency;\n        this.quoteCurrency = quoteCurrency;\n        this.scalar = new fraction_1.Fraction((0, utils_1.makeDecimalMultiplier)(baseCurrency.decimals), (0, utils_1.makeDecimalMultiplier)(quoteCurrency.decimals));\n    }\n    get raw() {\n        return new fraction_1.Fraction(this.numerator, this.denominator);\n    }\n    get adjusted() {\n        return super.multiply(this.scalar);\n    }\n    invert() {\n        return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n    }\n    multiply(other) {\n        (0, tiny_invariant_1.default)(this.quoteCurrency.equals(other.baseCurrency), `multiply token mismatch: ${this.quoteCurrency.toString()} !== ${other.baseCurrency.toString()}`);\n        const fraction = super.multiply(other);\n        return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n    }\n    // performs floor division on overflow\n    quote(tokenAmount) {\n        (0, tiny_invariant_1.default)(tokenAmount.token.equals(this.baseCurrency), `quote token mismatch: ${tokenAmount.token.toString()} !== ${this.baseCurrency.toString()}`);\n        return new tokenAmount_1.TokenAmount(this.quoteCurrency, super.multiply(tokenAmount.raw).quotient);\n    }\n    toSignificant(significantDigits = 6, format, rounding) {\n        return this.adjusted.toSignificant(significantDigits, format, rounding);\n    }\n    toFixed(decimalPlaces = 4, format, rounding) {\n        return this.adjusted.toFixed(decimalPlaces, format, rounding);\n    }\n}\nexports.Price = Price;\n//# sourceMappingURL=price.js.map"]},"metadata":{},"sourceType":"script"}