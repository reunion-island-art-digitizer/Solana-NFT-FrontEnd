{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMintToInstruction = exports.createInitMintInstructions = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst layout_1 = require(\"../layout\");\n/**\n * Creates instructions for initializing a mint.\n * @param param0\n * @returns\n */\n\n\nconst createInitMintInstructions = ({\n  provider,\n  mintKP,\n  decimals,\n  mintAuthority = provider.wallet.publicKey,\n  freezeAuthority = null\n}) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  const from = provider.wallet.publicKey;\n  return new solana_contrib_1.TransactionEnvelope(provider, [web3_js_1.SystemProgram.createAccount({\n    fromPubkey: from,\n    newAccountPubkey: mintKP.publicKey,\n    space: layout_1.MintLayout.span,\n    lamports: yield spl_token_1.Token.getMinBalanceRentForExemptMint(provider.connection),\n    programId: spl_token_1.TOKEN_PROGRAM_ID\n  }), spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, decimals, mintAuthority, freezeAuthority)], [mintKP]);\n});\n\nexports.createInitMintInstructions = createInitMintInstructions;\n\nconst createMintToInstruction = ({\n  provider,\n  mint,\n  mintAuthorityKP,\n  to,\n  amount\n}) => {\n  return new solana_contrib_1.TransactionEnvelope(provider, [spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, to, mintAuthorityKP.publicKey, [], amount)], [mintAuthorityKP]);\n};\n\nexports.createMintToInstruction = createMintToInstruction;","map":{"version":3,"sources":["../../src/instructions/mint.ts"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;AAIG;;;AACI,MAAM,0BAA0B,GAAG,CAAO;AAC/C,EAAA,QAD+C;AAE/C,EAAA,MAF+C;AAG/C,EAAA,QAH+C;AAI/C,EAAA,aAAa,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAJe;AAK/C,EAAA,eAAe,GAAG;AAL6B,CAAP,KAYP,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACjC,QAAM,IAAI,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAA7B;AACA,SAAO,IAAI,gBAAA,CAAA,mBAAJ,CACL,QADK,EAEL,CACE,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,IAAA,UAAU,EAAE,IADc;AAE1B,IAAA,gBAAgB,EAAE,MAAM,CAAC,SAFC;AAG1B,IAAA,KAAK,EAAE,QAAA,CAAA,UAAA,CAAW,IAHQ;AAI1B,IAAA,QAAQ,EAAE,MAAM,WAAA,CAAA,KAAA,CAAS,8BAAT,CACd,QAAQ,CAAC,UADK,CAJU;AAO1B,IAAA,SAAS,EAAE,WAAA,CAAA;AAPe,GAA5B,CADF,EAUE,WAAA,CAAA,KAAA,CAAS,yBAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,QAHF,EAIE,aAJF,EAKE,eALF,CAVF,CAFK,EAoBL,CAAC,MAAD,CApBK,CAAP;AAsBD,CAxBkC,CAZ5B;;AAAM,OAAA,CAAA,0BAAA,GAA0B,0BAA1B;;AAsCN,MAAM,uBAAuB,GAAG,CAAC;AACtC,EAAA,QADsC;AAEtC,EAAA,IAFsC;AAGtC,EAAA,eAHsC;AAItC,EAAA,EAJsC;AAKtC,EAAA;AALsC,CAAD,KAYb;AACxB,SAAO,IAAI,gBAAA,CAAA,mBAAJ,CACL,QADK,EAEL,CACE,WAAA,CAAA,KAAA,CAAS,uBAAT,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,EAHF,EAIE,eAAe,CAAC,SAJlB,EAKE,EALF,EAME,MANF,CADF,CAFK,EAYL,CAAC,eAAD,CAZK,CAAP;AAcD,CA3BM;;AAAM,OAAA,CAAA,uBAAA,GAAuB,uBAAvB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMintToInstruction = exports.createInitMintInstructions = void 0;\nconst tslib_1 = require(\"tslib\");\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst layout_1 = require(\"../layout\");\n/**\n * Creates instructions for initializing a mint.\n * @param param0\n * @returns\n */\nconst createInitMintInstructions = ({ provider, mintKP, decimals, mintAuthority = provider.wallet.publicKey, freezeAuthority = null, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const from = provider.wallet.publicKey;\n    return new solana_contrib_1.TransactionEnvelope(provider, [\n        web3_js_1.SystemProgram.createAccount({\n            fromPubkey: from,\n            newAccountPubkey: mintKP.publicKey,\n            space: layout_1.MintLayout.span,\n            lamports: yield spl_token_1.Token.getMinBalanceRentForExemptMint(provider.connection),\n            programId: spl_token_1.TOKEN_PROGRAM_ID,\n        }),\n        spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, decimals, mintAuthority, freezeAuthority),\n    ], [mintKP]);\n});\nexports.createInitMintInstructions = createInitMintInstructions;\nconst createMintToInstruction = ({ provider, mint, mintAuthorityKP, to, amount, }) => {\n    return new solana_contrib_1.TransactionEnvelope(provider, [\n        spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, to, mintAuthorityKP.publicKey, [], amount),\n    ], [mintAuthorityKP]);\n};\nexports.createMintToInstruction = createMintToInstruction;\n//# sourceMappingURL=mint.js.map"]},"metadata":{},"sourceType":"script"}