{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SingleConnectionBroadcaster = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar _1 = require(\".\");\n/**\n * Broadcasts transactions to a single connection.\n */\n\n\nvar SingleConnectionBroadcaster = /*#__PURE__*/function () {\n  function SingleConnectionBroadcaster(sendConnection) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _1.DEFAULT_PROVIDER_OPTIONS;\n\n    _classCallCheck(this, SingleConnectionBroadcaster);\n\n    this.sendConnection = sendConnection;\n    this.opts = opts;\n  }\n\n  _createClass(SingleConnectionBroadcaster, [{\n    key: \"getRecentBlockhash\",\n    value: function getRecentBlockhash() {\n      var commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"recent\";\n      return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sendConnection.getRecentBlockhash(commitment);\n\n              case 2:\n                result = _context.sent;\n                return _context.abrupt(\"return\", result.blockhash);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Broadcasts a signed transaction.\n     *\n     * @param tx\n     * @param confirm\n     * @param opts\n     * @returns\n     */\n\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(tx) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.opts;\n      return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var rawTx;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(tx.signatures.length === 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Transaction must be signed before broadcasting.\");\n\n              case 2:\n                rawTx = tx.serialize();\n                _context2.t0 = _1.PendingTransaction;\n                _context2.t1 = this.sendConnection;\n                _context2.next = 7;\n                return this.sendConnection.sendRawTransaction(rawTx, opts);\n\n              case 7:\n                _context2.t2 = _context2.sent;\n                return _context2.abrupt(\"return\", new _context2.t0(_context2.t1, _context2.t2));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"simulate\",\n    value: function simulate(tx) {\n      var commitment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"recent\";\n      return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(tx.signatures.length === 0)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Transaction must be signed before simulating.\");\n\n              case 2:\n                _context3.next = 4;\n                return (0, _1.simulateTransactionWithCommitment)(this.sendConnection, tx, commitment);\n\n              case 4:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return SingleConnectionBroadcaster;\n}();\n\nexports.SingleConnectionBroadcaster = SingleConnectionBroadcaster;","map":{"version":3,"sources":["../src/broadcaster.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAWA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;AAMA;;AAEG;;;IACU,2B;AACX,uCACkB,cADlB,EAEiE;AAAA,QAA/C,IAA+C,uEAAxB,EAAA,CAAA,wBAAwB;;AAAA;;AAD/C,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACd;;;;WAEE,8BAC6B;AAAA,UAAjC,UAAiC,uEAAR,QAAQ;;;;;;;;AAElB,uBAAM,KAAK,cAAL,CAAoB,kBAApB,CAAuC,UAAvC,CAAN;;;AAAT,gBAAA,M;iDACC,MAAM,CAAC,S;;;;;;;;;AACf;AAED;;;;;;;AAOG;;;;WACG,mBACJ,EADI,EAE4B;AAAA,UAAhC,IAAgC,uEAAT,KAAK,IAAI;;;;;;;sBAE5B,EAAE,CAAC,UAAH,CAAc,MAAd,KAAyB,C;;;;;sBACrB,IAAI,KAAJ,CAAU,iDAAV,C;;;AAEF,gBAAA,K,GAAQ,EAAE,CAAC,SAAH,E;+BACH,EAAA,CAAA,kB;+BACT,KAAK,c;;AACL,uBAAM,KAAK,cAAL,CAAoB,kBAApB,CAAuC,KAAvC,EAA8C,IAA9C,CAAN;;;;;;;;;;;;;AAEH;;;WAEK,kBACJ,EADI,EAE6B;AAAA,UAAjC,UAAiC,uEAAR,QAAQ;;;;;;sBAE7B,EAAE,CAAC,UAAH,CAAc,MAAd,KAAyB,C;;;;;sBACrB,IAAI,KAAJ,CAAU,+CAAV,C;;;;AAED,uBAAM,CAAA,GAAA,EAAA,CAAA,iCAAA,EACX,KAAK,cADM,EAEX,EAFW,EAGX,UAHW,CAAN;;;;;;;;;;;;AAKR;;;;;;AA/CH,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SingleConnectionBroadcaster = void 0;\nconst tslib_1 = require(\"tslib\");\nconst _1 = require(\".\");\n/**\n * Broadcasts transactions to a single connection.\n */\nclass SingleConnectionBroadcaster {\n    constructor(sendConnection, opts = _1.DEFAULT_PROVIDER_OPTIONS) {\n        this.sendConnection = sendConnection;\n        this.opts = opts;\n    }\n    getRecentBlockhash(commitment = \"recent\") {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const result = yield this.sendConnection.getRecentBlockhash(commitment);\n            return result.blockhash;\n        });\n    }\n    /**\n     * Broadcasts a signed transaction.\n     *\n     * @param tx\n     * @param confirm\n     * @param opts\n     * @returns\n     */\n    broadcast(tx, opts = this.opts) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (tx.signatures.length === 0) {\n                throw new Error(\"Transaction must be signed before broadcasting.\");\n            }\n            const rawTx = tx.serialize();\n            return new _1.PendingTransaction(this.sendConnection, yield this.sendConnection.sendRawTransaction(rawTx, opts));\n        });\n    }\n    simulate(tx, commitment = \"recent\") {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (tx.signatures.length === 0) {\n                throw new Error(\"Transaction must be signed before simulating.\");\n            }\n            return yield (0, _1.simulateTransactionWithCommitment)(this.sendConnection, tx, commitment);\n        });\n    }\n}\nexports.SingleConnectionBroadcaster = SingleConnectionBroadcaster;\n//# sourceMappingURL=broadcaster.js.map"]},"metadata":{},"sourceType":"script"}