{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useProviderInternal = void 0;\n\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nconst react_1 = require(\"react\");\n\nconst useProviderInternal = ({\n  connection,\n  sendConnection = connection,\n  wallet,\n  commitment = \"recent\",\n  confirmOptions = solana_contrib_1.DEFAULT_PROVIDER_OPTIONS\n}) => {\n  const provider = (0, react_1.useMemo)(() => new solana_contrib_1.SolanaReadonlyProvider(connection, {\n    commitment\n  }), [commitment, connection]);\n  const connected = wallet === null || wallet === void 0 ? void 0 : wallet.connected;\n  const publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;\n  const providerMut = (0, react_1.useMemo)(() => wallet && connected && publicKey ? solana_contrib_1.SolanaProvider.load({\n    connection,\n    sendConnection,\n    wallet: wallet,\n    opts: confirmOptions\n  }) : null, [wallet, connected, publicKey, connection, sendConnection, confirmOptions]);\n  return {\n    provider,\n    providerMut\n  };\n};\n\nexports.useProviderInternal = useProviderInternal;","map":{"version":3,"sources":["../../src/utils/useProviderInternal.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAMA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAyCO,MAAM,mBAAmB,GAAG,CAAC;AAClC,EAAA,UADkC;AAElC,EAAA,cAAc,GAAG,UAFiB;AAGlC,EAAA,MAHkC;AAIlC,EAAA,UAAU,GAAG,QAJqB;AAKlC,EAAA,cAAc,GAAG,gBAAA,CAAA;AALiB,CAAD,KAMA;AACjC,QAAM,QAAQ,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EACf,MACE,IAAI,gBAAA,CAAA,sBAAJ,CAA2B,UAA3B,EAAuC;AACrC,IAAA;AADqC,GAAvC,CAFa,EAKf,CAAC,UAAD,EAAa,UAAb,CALe,CAAjB;AAQA,QAAM,SAAS,GAAG,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,SAA1B;AACA,QAAM,SAAS,GAAG,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,SAA1B;AACA,QAAM,WAAW,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAClB,MACE,MAAM,IAAI,SAAV,IAAuB,SAAvB,GACI,gBAAA,CAAA,cAAA,CAAe,IAAf,CAAoB;AAClB,IAAA,UADkB;AAElB,IAAA,cAFkB;AAGlB,IAAA,MAAM,EAAE,MAHU;AAIlB,IAAA,IAAI,EAAE;AAJY,GAApB,CADJ,GAOI,IATY,EAUlB,CAAC,MAAD,EAAS,SAAT,EAAoB,SAApB,EAA+B,UAA/B,EAA2C,cAA3C,EAA2D,cAA3D,CAVkB,CAApB;AAaA,SAAO;AACL,IAAA,QADK;AAEL,IAAA;AAFK,GAAP;AAID,CAlCM;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useProviderInternal = void 0;\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst react_1 = require(\"react\");\nconst useProviderInternal = ({ connection, sendConnection = connection, wallet, commitment = \"recent\", confirmOptions = solana_contrib_1.DEFAULT_PROVIDER_OPTIONS, }) => {\n    const provider = (0, react_1.useMemo)(() => new solana_contrib_1.SolanaReadonlyProvider(connection, {\n        commitment,\n    }), [commitment, connection]);\n    const connected = wallet === null || wallet === void 0 ? void 0 : wallet.connected;\n    const publicKey = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey;\n    const providerMut = (0, react_1.useMemo)(() => wallet && connected && publicKey\n        ? solana_contrib_1.SolanaProvider.load({\n            connection,\n            sendConnection,\n            wallet: wallet,\n            opts: confirmOptions,\n        })\n        : null, [wallet, connected, publicKey, connection, sendConnection, confirmOptions]);\n    return {\n        provider,\n        providerMut,\n    };\n};\nexports.useProviderInternal = useProviderInternal;\n//# sourceMappingURL=useProviderInternal.js.map"]},"metadata":{},"sourceType":"script"}