{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fraction = exports.Big = exports.Decimal = void 0;\n\nvar big_js_1 = __importDefault(require(\"big.js\"));\n\nvar decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\n\nvar jsbi_1 = __importDefault(require(\"jsbi\"));\n\nvar tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\n\nvar toformat_1 = __importDefault(require(\"toformat\"));\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"./utils\"); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\nexports.Decimal = (0, toformat_1.default)(decimal_js_light_1.default); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\nexports.Big = (0, toformat_1.default)(big_js_1.default);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _defineProperty(_toSignificantRoundin, constants_1.Rounding.ROUND_DOWN, decimal_js_light_1.default.ROUND_DOWN), _defineProperty(_toSignificantRoundin, constants_1.Rounding.ROUND_HALF_UP, decimal_js_light_1.default.ROUND_HALF_UP), _defineProperty(_toSignificantRoundin, constants_1.Rounding.ROUND_UP, decimal_js_light_1.default.ROUND_UP), _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _defineProperty(_toFixedRounding, constants_1.Rounding.ROUND_DOWN, 0), _defineProperty(_toFixedRounding, constants_1.Rounding.ROUND_HALF_UP, 1), _defineProperty(_toFixedRounding, constants_1.Rounding.ROUND_UP, 3), _toFixedRounding);\n/**\n * Number with an integer numerator and denominator.\n */\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator) {\n    var denominator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jsbi_1.default.BigInt(1);\n\n    _classCallCheck(this, Fraction);\n\n    /**\n     * This boolean checks to see if this is actually a {@link Fraction}.\n     */\n    this.isFraction = true;\n    this.numerator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(numerator));\n    this.denominator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(denominator));\n  }\n  /**\n   * Returns true if the other object is a {@link Fraction}.\n   *\n   * @param other\n   * @returns\n   */\n\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: // performs floor division\n    function get() {\n      return jsbi_1.default.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(jsbi_1.default.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      return new Fraction(this.denominator, this.numerator);\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n\n      if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n        return new Fraction(jsbi_1.default.add(this.numerator, otherParsed.numerator), this.denominator);\n      }\n\n      return new Fraction(jsbi_1.default.add(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n\n      if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n        return new Fraction(jsbi_1.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n      }\n\n      return new Fraction(jsbi_1.default.subtract(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n      return jsbi_1.default.lessThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n      return jsbi_1.default.equal(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n  }, {\n    key: \"greaterThan\",\n    value: function greaterThan(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n      return jsbi_1.default.greaterThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n  }, {\n    key: \"multiply\",\n    value: function multiply(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n      return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.numerator), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n  }, {\n    key: \"divide\",\n    value: function divide(other) {\n      var otherParsed = Fraction.tryParseFraction(other);\n      return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(this.denominator, otherParsed.numerator));\n    }\n  }, {\n    key: \"toSignificant\",\n    value: function toSignificant(significantDigits) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        groupSeparator: \"\"\n      };\n      var rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.Rounding.ROUND_HALF_UP;\n      (0, tiny_invariant_1.default)(Number.isInteger(significantDigits), \"\".concat(significantDigits, \" is not an integer.\"));\n      (0, tiny_invariant_1.default)(significantDigits > 0, \"\".concat(significantDigits, \" is not positive.\"));\n      exports.Decimal.set({\n        precision: significantDigits + 1,\n        rounding: toSignificantRounding[rounding]\n      });\n      var quotient = new exports.Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n      return quotient.toFormat(quotient.decimalPlaces(), format);\n    }\n  }, {\n    key: \"toFixed\",\n    value: function toFixed(decimalPlaces) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        groupSeparator: \"\"\n      };\n      var rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.Rounding.ROUND_HALF_UP;\n      (0, tiny_invariant_1.default)(Number.isInteger(decimalPlaces), \"\".concat(decimalPlaces, \" is not an integer.\"));\n      (0, tiny_invariant_1.default)(decimalPlaces >= 0, \"\".concat(decimalPlaces, \" is negative.\"));\n      exports.Big.DP = decimalPlaces;\n      exports.Big.RM = toFixedRounding[rounding];\n      return new exports.Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n    }\n    /**\n     * Helper method for converting any super class back to a fraction\n     */\n\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }], [{\n    key: \"isFraction\",\n    value: function isFraction(other) {\n      return typeof other === \"object\" && other !== null && \"numerator\" in other && \"denominator\" in other;\n    }\n    /**\n     * Parses a {@link Fraction} from a float.\n     * @param number Number to parse.\n     * @param decimals Number of decimals of precision. (default 10)\n     * @returns Fraction\n     */\n\n  }, {\n    key: \"fromNumber\",\n    value: function fromNumber(number) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n      var multiplier = Math.pow(10, decimals);\n      return new Fraction(Math.floor(number * multiplier), multiplier);\n    }\n    /**\n     * Attempts to parse a {@link Fraction}.\n     * @param fractionish Fraction or BigintIsh.\n     * @returns\n     */\n\n  }, {\n    key: \"tryParseFraction\",\n    value: function tryParseFraction(fractionish) {\n      if (Fraction.isFraction(fractionish)) {\n        return fractionish;\n      }\n\n      try {\n        return new Fraction((0, utils_1.parseBigintIsh)(fractionish));\n      } catch (e) {\n        if (e instanceof Error) {\n          throw new Error(\"Could not parse fraction: \".concat(e.message));\n        }\n\n        throw new Error(\"Could not parse fraction\");\n      }\n    }\n  }]);\n\n  return Fraction;\n}();\n\nexports.Fraction = Fraction;\nFraction.ZERO = new Fraction(0);\nFraction.ONE = new Fraction(0);","map":{"version":3,"sources":["../src/fraction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fraction = exports.Big = exports.Decimal = void 0;\nconst big_js_1 = __importDefault(require(\"big.js\"));\nconst decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\nconst toformat_1 = __importDefault(require(\"toformat\"));\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexports.Decimal = (0, toformat_1.default)(decimal_js_light_1.default);\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexports.Big = (0, toformat_1.default)(big_js_1.default);\nconst toSignificantRounding = {\n    [constants_1.Rounding.ROUND_DOWN]: decimal_js_light_1.default.ROUND_DOWN,\n    [constants_1.Rounding.ROUND_HALF_UP]: decimal_js_light_1.default.ROUND_HALF_UP,\n    [constants_1.Rounding.ROUND_UP]: decimal_js_light_1.default.ROUND_UP,\n};\nconst toFixedRounding = {\n    [constants_1.Rounding.ROUND_DOWN]: 0 /* RoundDown */,\n    [constants_1.Rounding.ROUND_HALF_UP]: 1 /* RoundHalfUp */,\n    [constants_1.Rounding.ROUND_UP]: 3 /* RoundUp */,\n};\n/**\n * Number with an integer numerator and denominator.\n */\nclass Fraction {\n    constructor(numerator, denominator = jsbi_1.default.BigInt(1)) {\n        /**\n         * This boolean checks to see if this is actually a {@link Fraction}.\n         */\n        this.isFraction = true;\n        this.numerator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(numerator));\n        this.denominator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(denominator));\n    }\n    /**\n     * Returns true if the other object is a {@link Fraction}.\n     *\n     * @param other\n     * @returns\n     */\n    static isFraction(other) {\n        return (typeof other === \"object\" &&\n            other !== null &&\n            \"numerator\" in other &&\n            \"denominator\" in other);\n    }\n    /**\n     * Parses a {@link Fraction} from a float.\n     * @param number Number to parse.\n     * @param decimals Number of decimals of precision. (default 10)\n     * @returns Fraction\n     */\n    static fromNumber(number, decimals = 10) {\n        const multiplier = Math.pow(10, decimals);\n        return new Fraction(Math.floor(number * multiplier), multiplier);\n    }\n    /**\n     * Attempts to parse a {@link Fraction}.\n     * @param fractionish Fraction or BigintIsh.\n     * @returns\n     */\n    static tryParseFraction(fractionish) {\n        if (Fraction.isFraction(fractionish)) {\n            return fractionish;\n        }\n        try {\n            return new Fraction((0, utils_1.parseBigintIsh)(fractionish));\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                throw new Error(`Could not parse fraction: ${e.message}`);\n            }\n            throw new Error(`Could not parse fraction`);\n        }\n    }\n    // performs floor division\n    get quotient() {\n        return jsbi_1.default.divide(this.numerator, this.denominator);\n    }\n    // remainder after floor division\n    get remainder() {\n        return new Fraction(jsbi_1.default.remainder(this.numerator, this.denominator), this.denominator);\n    }\n    invert() {\n        return new Fraction(this.denominator, this.numerator);\n    }\n    add(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi_1.default.add(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi_1.default.add(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    subtract(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi_1.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi_1.default.subtract(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    lessThan(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.lessThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    equalTo(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.equal(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    greaterThan(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.greaterThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    multiply(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.numerator), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    divide(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(this.denominator, otherParsed.numerator));\n    }\n    toSignificant(significantDigits, format = { groupSeparator: \"\" }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n        (0, tiny_invariant_1.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n        (0, tiny_invariant_1.default)(significantDigits > 0, `${significantDigits} is not positive.`);\n        exports.Decimal.set({\n            precision: significantDigits + 1,\n            rounding: toSignificantRounding[rounding],\n        });\n        const quotient = new exports.Decimal(this.numerator.toString())\n            .div(this.denominator.toString())\n            .toSignificantDigits(significantDigits);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n        return quotient.toFormat(quotient.decimalPlaces(), format);\n    }\n    toFixed(decimalPlaces, format = { groupSeparator: \"\" }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n        (0, tiny_invariant_1.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n        (0, tiny_invariant_1.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n        exports.Big.DP = decimalPlaces;\n        exports.Big.RM = toFixedRounding[rounding];\n        return new exports.Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n    }\n    /**\n     * Helper method for converting any super class back to a fraction\n     */\n    get asFraction() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n}\nexports.Fraction = Fraction;\nFraction.ZERO = new Fraction(0);\nFraction.ONE = new Fraction(0);\n//# sourceMappingURL=fraction.js.map"]},"metadata":{},"sourceType":"script"}