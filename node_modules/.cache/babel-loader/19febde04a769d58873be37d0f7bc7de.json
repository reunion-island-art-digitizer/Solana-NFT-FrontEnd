{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTokenAccount = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst layout_1 = require(\"../layout\");\n\nconst createTokenAccount = ({\n  provider,\n  mint,\n  owner = provider.wallet.publicKey,\n  payer = provider.wallet.publicKey,\n  accountSigner = web3_js_1.Keypair.generate()\n}) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  // Allocate memory for the account\n  const balanceNeeded = yield spl_token_1.Token.getMinBalanceRentForExemptAccount(provider.connection);\n  const tokenAccount = accountSigner.publicKey;\n  return {\n    key: tokenAccount,\n    tx: new solana_contrib_1.TransactionEnvelope(provider, [web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: accountSigner.publicKey,\n      lamports: balanceNeeded,\n      space: layout_1.TokenAccountLayout.span,\n      programId: spl_token_1.TOKEN_PROGRAM_ID\n    }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, tokenAccount, owner)], [accountSigner])\n  };\n});\n\nexports.createTokenAccount = createTokenAccount;","map":{"version":3,"sources":["../../src/instructions/account.ts"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEO,MAAM,kBAAkB,GAAG,CAAO;AACvC,EAAA,QADuC;AAEvC,EAAA,IAFuC;AAGvC,EAAA,KAAK,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAHe;AAIvC,EAAA,KAAK,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAJe;AAKvC,EAAA,aAAa,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR;AALuB,CAAP,KAkB7B,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACH;AACA,QAAM,aAAa,GAAG,MAAM,WAAA,CAAA,KAAA,CAAS,iCAAT,CAC1B,QAAQ,CAAC,UADiB,CAA5B;AAIA,QAAM,YAAY,GAAG,aAAa,CAAC,SAAnC;AACA,SAAO;AACL,IAAA,GAAG,EAAE,YADA;AAEL,IAAA,EAAE,EAAE,IAAI,gBAAA,CAAA,mBAAJ,CACF,QADE,EAEF,CACE,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,MAAA,UAAU,EAAE,KADc;AAE1B,MAAA,gBAAgB,EAAE,aAAa,CAAC,SAFN;AAG1B,MAAA,QAAQ,EAAE,aAHgB;AAI1B,MAAA,KAAK,EAAE,QAAA,CAAA,kBAAA,CAAmB,IAJA;AAK1B,MAAA,SAAS,EAAE,WAAA,CAAA;AALe,KAA5B,CADF,EAQE,WAAA,CAAA,KAAA,CAAS,4BAAT,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,YAHF,EAIE,KAJF,CARF,CAFE,EAiBF,CAAC,aAAD,CAjBE;AAFC,GAAP;AAsBD,CA7BI,CAlBE;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTokenAccount = void 0;\nconst tslib_1 = require(\"tslib\");\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst layout_1 = require(\"../layout\");\nconst createTokenAccount = ({ provider, mint, owner = provider.wallet.publicKey, payer = provider.wallet.publicKey, accountSigner = web3_js_1.Keypair.generate(), }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    // Allocate memory for the account\n    const balanceNeeded = yield spl_token_1.Token.getMinBalanceRentForExemptAccount(provider.connection);\n    const tokenAccount = accountSigner.publicKey;\n    return {\n        key: tokenAccount,\n        tx: new solana_contrib_1.TransactionEnvelope(provider, [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: payer,\n                newAccountPubkey: accountSigner.publicKey,\n                lamports: balanceNeeded,\n                space: layout_1.TokenAccountLayout.span,\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, tokenAccount, owner),\n        ], [accountSigner]),\n    };\n});\nexports.createTokenAccount = createTokenAccount;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}