{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMintToInstruction = exports.createInitMintInstructions = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar layout_1 = require(\"../layout\");\n/**\n * Creates instructions for initializing a mint.\n * @param param0\n * @returns\n */\n\n\nvar createInitMintInstructions = function createInitMintInstructions(_ref) {\n  var provider = _ref.provider,\n      mintKP = _ref.mintKP,\n      decimals = _ref.decimals,\n      _ref$mintAuthority = _ref.mintAuthority,\n      mintAuthority = _ref$mintAuthority === void 0 ? provider.wallet.publicKey : _ref$mintAuthority,\n      _ref$freezeAuthority = _ref.freezeAuthority,\n      freezeAuthority = _ref$freezeAuthority === void 0 ? null : _ref$freezeAuthority;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var from;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            from = provider.wallet.publicKey;\n            _context.t0 = solana_contrib_1.TransactionEnvelope;\n            _context.t1 = provider;\n            _context.t2 = web3_js_1.SystemProgram;\n            _context.t3 = from;\n            _context.t4 = mintKP.publicKey;\n            _context.t5 = layout_1.MintLayout.span;\n            _context.next = 9;\n            return spl_token_1.Token.getMinBalanceRentForExemptMint(provider.connection);\n\n          case 9:\n            _context.t6 = _context.sent;\n            _context.t7 = spl_token_1.TOKEN_PROGRAM_ID;\n            _context.t8 = {\n              fromPubkey: _context.t3,\n              newAccountPubkey: _context.t4,\n              space: _context.t5,\n              lamports: _context.t6,\n              programId: _context.t7\n            };\n            _context.t9 = _context.t2.createAccount.call(_context.t2, _context.t8);\n            _context.t10 = spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, decimals, mintAuthority, freezeAuthority);\n            _context.t11 = [_context.t9, _context.t10];\n            _context.t12 = [mintKP];\n            return _context.abrupt(\"return\", new _context.t0(_context.t1, _context.t11, _context.t12));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.createInitMintInstructions = createInitMintInstructions;\n\nvar createMintToInstruction = function createMintToInstruction(_ref2) {\n  var provider = _ref2.provider,\n      mint = _ref2.mint,\n      mintAuthorityKP = _ref2.mintAuthorityKP,\n      to = _ref2.to,\n      amount = _ref2.amount;\n  return new solana_contrib_1.TransactionEnvelope(provider, [spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, to, mintAuthorityKP.publicKey, [], amount)], [mintAuthorityKP]);\n};\n\nexports.createMintToInstruction = createMintToInstruction;","map":{"version":3,"sources":["../../src/instructions/mint.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;;;AAIG;;;AACI,IAAM,0BAA0B,GAAG,SAA7B,0BAA6B;AAAA,MACxC,QADwC,QACxC,QADwC;AAAA,MAExC,MAFwC,QAExC,MAFwC;AAAA,MAGxC,QAHwC,QAGxC,QAHwC;AAAA,gCAIxC,aAJwC;AAAA,MAIxC,aAJwC,mCAIxB,QAAQ,CAAC,MAAT,CAAgB,SAJQ;AAAA,kCAKxC,eALwC;AAAA,MAKxC,eALwC,qCAKtB,IALsB;AAAA,SAYP,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B,YAAA,IAD2B,GACpB,QAAQ,CAAC,MAAT,CAAgB,SADI;AAAA,0BAEtB,gBAAA,CAAA,mBAFsB;AAAA,0BAG/B,QAH+B;AAAA,0BAK7B,SAAA,CAAA,aAL6B;AAAA,0BAMf,IANe;AAAA,0BAOT,MAAM,CAAC,SAPE;AAAA,0BAQpB,QAAA,CAAA,UAAA,CAAW,IARS;AAAA;AASjB,mBAAM,WAAA,CAAA,KAAA,CAAS,8BAAT,CACd,QAAQ,CAAC,UADK,CAAN;;AATiB;AAAA;AAAA,0BAYhB,WAAA,CAAA,gBAZgB;AAAA;AAM3B,cAAA,UAN2B;AAO3B,cAAA,gBAP2B;AAQ3B,cAAA,KAR2B;AAS3B,cAAA,QAT2B;AAY3B,cAAA,SAZ2B;AAAA;AAAA,sCAKf,aALe;AAAA,2BAc7B,WAAA,CAAA,KAAA,CAAS,yBAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,QAHF,EAIE,aAJF,EAKE,eALF,CAd6B;AAAA;AAAA,2BAsB/B,CAAC,MAAD,CAtB+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAZO;AAAA,CAAnC;;AAAM,OAAA,CAAA,0BAAA,GAA0B,0BAA1B;;AAsCN,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,QAYb;AAAA,MAXxB,QAWwB,SAXxB,QAWwB;AAAA,MAVxB,IAUwB,SAVxB,IAUwB;AAAA,MATxB,eASwB,SATxB,eASwB;AAAA,MARxB,EAQwB,SARxB,EAQwB;AAAA,MAPxB,MAOwB,SAPxB,MAOwB;AACxB,SAAO,IAAI,gBAAA,CAAA,mBAAJ,CACL,QADK,EAEL,CACE,WAAA,CAAA,KAAA,CAAS,uBAAT,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,EAHF,EAIE,eAAe,CAAC,SAJlB,EAKE,EALF,EAME,MANF,CADF,CAFK,EAYL,CAAC,eAAD,CAZK,CAAP;AAcD,CA3BM;;AAAM,OAAA,CAAA,uBAAA,GAAuB,uBAAvB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createMintToInstruction = exports.createInitMintInstructions = void 0;\nconst tslib_1 = require(\"tslib\");\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst layout_1 = require(\"../layout\");\n/**\n * Creates instructions for initializing a mint.\n * @param param0\n * @returns\n */\nconst createInitMintInstructions = ({ provider, mintKP, decimals, mintAuthority = provider.wallet.publicKey, freezeAuthority = null, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const from = provider.wallet.publicKey;\n    return new solana_contrib_1.TransactionEnvelope(provider, [\n        web3_js_1.SystemProgram.createAccount({\n            fromPubkey: from,\n            newAccountPubkey: mintKP.publicKey,\n            space: layout_1.MintLayout.span,\n            lamports: yield spl_token_1.Token.getMinBalanceRentForExemptMint(provider.connection),\n            programId: spl_token_1.TOKEN_PROGRAM_ID,\n        }),\n        spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, decimals, mintAuthority, freezeAuthority),\n    ], [mintKP]);\n});\nexports.createInitMintInstructions = createInitMintInstructions;\nconst createMintToInstruction = ({ provider, mint, mintAuthorityKP, to, amount, }) => {\n    return new solana_contrib_1.TransactionEnvelope(provider, [\n        spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, to, mintAuthorityKP.publicKey, [], amount),\n    ], [mintAuthorityKP]);\n};\nexports.createMintToInstruction = createMintToInstruction;\n//# sourceMappingURL=mint.js.map"]},"metadata":{},"sourceType":"script"}