{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenAmount = void 0;\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar token_math_1 = require(\"@ubeswap/token-math\");\n\nvar TokenAmount = /*#__PURE__*/function (_token_math_1$TokenAm) {\n  _inherits(TokenAmount, _token_math_1$TokenAm);\n\n  var _super = _createSuper(TokenAmount);\n\n  // amount _must_ be raw, i.e. in the native representation\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _classCallCheck(this, TokenAmount);\n\n    _this = _super.call(this, token, amount);\n    (0, token_math_1.validateU64)(_this.raw);\n    return _this;\n  }\n  /**\n   * Parses a token amount from a decimal representation.\n   * @param token\n   * @param uiAmount\n   * @returns\n   */\n\n\n  _createClass(TokenAmount, [{\n    key: \"add\",\n    value: function add(other) {\n      var result = _get(_getPrototypeOf(TokenAmount.prototype), \"add\", this).call(this, other);\n\n      return new TokenAmount(this.token, result.raw);\n    }\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      var result = _get(_getPrototypeOf(TokenAmount.prototype), \"subtract\", this).call(this, other);\n\n      return new TokenAmount(this.token, result.raw);\n    }\n  }, {\n    key: \"multiplyBy\",\n    value: function multiplyBy(percent) {\n      var result = _get(_getPrototypeOf(TokenAmount.prototype), \"multiplyBy\", this).call(this, percent);\n\n      return new TokenAmount(this.token, result.raw);\n    }\n  }, {\n    key: \"reduceBy\",\n    value: function reduceBy(percent) {\n      var result = _get(_getPrototypeOf(TokenAmount.prototype), \"reduceBy\", this).call(this, percent);\n\n      return new TokenAmount(this.token, result.raw);\n    }\n    /**\n     * Formats the token amount with units and decimal adjustment, e.g. \"100.42 SOL\"\n     * @returns\n     */\n\n  }, {\n    key: \"formatUnits\",\n    value: function formatUnits() {\n      return \"\".concat(this.toExact(), \" \").concat(this.token.symbol);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"TokenAmount[Token=(\".concat(this.token.toString(), \"), amount=\").concat(this.toExact());\n    }\n    /**\n     * Converts this to the raw u64 used by the SPL library\n     * @returns\n     */\n\n  }, {\n    key: \"toU64\",\n    value: function toU64() {\n      return new spl_token_1.u64(this.raw.toString());\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(token, uiAmount) {\n      var prev = token_math_1.TokenAmount.parseFromString(token, uiAmount);\n      return new TokenAmount(token, prev.raw);\n    }\n  }]);\n\n  return TokenAmount;\n}(token_math_1.TokenAmount);\n\nexports.TokenAmount = TokenAmount;","map":{"version":3,"sources":["../src/tokenAmount.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;IAea,W;;;;;AACX;AACA,uBAAmB,KAAnB,EAAiC,MAAjC,EAAkD;AAAA;;AAAA;;AAChD,8BAAM,KAAN,EAAa,MAAb;AACA,KAAA,GAAA,YAAA,CAAA,WAAA,EAAY,MAAK,GAAjB;AAFgD;AAGjD;AAED;;;;;AAKG;;;;;WAMH,aAAI,KAAJ,EAAsB;AACpB,UAAM,MAAM,wEAAa,KAAb,CAAZ;;AACA,aAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;;WACD,kBAAS,KAAT,EAA2B;AACzB,UAAM,MAAM,6EAAkB,KAAlB,CAAZ;;AACA,aAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;;WACD,oBAAW,OAAX,EAA2B;AACzB,UAAM,MAAM,+EAAoB,OAApB,CAAZ;;AACA,aAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;;;WACD,kBAAS,OAAT,EAAyB;AACvB,UAAM,MAAM,6EAAkB,OAAlB,CAAZ;;AACA,aAAO,IAAI,WAAJ,CAAgB,KAAK,KAArB,EAA4B,MAAM,CAAC,GAAnC,CAAP;AACD;AAED;;;AAGG;;;;WACH,uBAAW;AACT,uBAAU,KAAK,OAAL,EAAV,cAA4B,KAAK,KAAL,CAAW,MAAvC;AACD;;;WAED,oBAAQ;AACN,0CAA6B,KAAK,KAAL,CAAW,QAAX,EAA7B,uBAA+D,KAAK,OAAL,EAA/D;AACD;AAED;;;AAGG;;;;WACH,iBAAK;AACH,aAAO,IAAI,WAAA,CAAA,GAAJ,CAAQ,KAAK,GAAL,CAAS,QAAT,EAAR,CAAP;AACD;;;WAxCM,eAAa,KAAb,EAA2B,QAA3B,EAA2C;AAChD,UAAM,IAAI,GAAG,YAAA,CAAA,WAAA,CAAa,eAAb,CAA6B,KAA7B,EAAoC,QAApC,CAAb;AACA,aAAO,IAAI,WAAJ,CAAgB,KAAhB,EAAuB,IAAI,CAAC,GAA5B,CAAP;AACD;;;;EAhB8B,YAAA,CAAA,W;;AAAjC,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenAmount = void 0;\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst token_math_1 = require(\"@ubeswap/token-math\");\nclass TokenAmount extends token_math_1.TokenAmount {\n    // amount _must_ be raw, i.e. in the native representation\n    constructor(token, amount) {\n        super(token, amount);\n        (0, token_math_1.validateU64)(this.raw);\n    }\n    /**\n     * Parses a token amount from a decimal representation.\n     * @param token\n     * @param uiAmount\n     * @returns\n     */\n    static parse(token, uiAmount) {\n        const prev = token_math_1.TokenAmount.parseFromString(token, uiAmount);\n        return new TokenAmount(token, prev.raw);\n    }\n    add(other) {\n        const result = super.add(other);\n        return new TokenAmount(this.token, result.raw);\n    }\n    subtract(other) {\n        const result = super.subtract(other);\n        return new TokenAmount(this.token, result.raw);\n    }\n    multiplyBy(percent) {\n        const result = super.multiplyBy(percent);\n        return new TokenAmount(this.token, result.raw);\n    }\n    reduceBy(percent) {\n        const result = super.reduceBy(percent);\n        return new TokenAmount(this.token, result.raw);\n    }\n    /**\n     * Formats the token amount with units and decimal adjustment, e.g. \"100.42 SOL\"\n     * @returns\n     */\n    formatUnits() {\n        return `${this.toExact()} ${this.token.symbol}`;\n    }\n    toString() {\n        return `TokenAmount[Token=(${this.token.toString()}), amount=${this.toExact()}`;\n    }\n    /**\n     * Converts this to the raw u64 used by the SPL library\n     * @returns\n     */\n    toU64() {\n        return new spl_token_1.u64(this.raw.toString());\n    }\n}\nexports.TokenAmount = TokenAmount;\n//# sourceMappingURL=tokenAmount.js.map"]},"metadata":{},"sourceType":"script"}