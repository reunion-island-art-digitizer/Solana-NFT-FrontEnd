{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createATAInstruction = exports.getOrCreateATAs = exports.getOrCreateATA = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar ata_1 = require(\"../ata\");\n/**\n * Gets an associated token account, returning a create instruction if it doesn't exist.\n * @param param0\n * @returns\n */\n\n\nvar getOrCreateATA = function getOrCreateATA(_ref) {\n  var provider = _ref.provider,\n      mint = _ref.mint,\n      _ref$owner = _ref.owner,\n      owner = _ref$owner === void 0 ? provider.wallet.publicKey : _ref$owner,\n      _ref$payer = _ref.payer,\n      payer = _ref$payer === void 0 ? provider.wallet.publicKey : _ref$payer;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, ata_1.getATAAddress)({\n              mint: mint,\n              owner: owner\n            });\n\n          case 2:\n            address = _context.sent;\n            _context.next = 5;\n            return provider.connection.getAccountInfo(address);\n\n          case 5:\n            if (!_context.sent) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              address: address,\n              instruction: null\n            });\n\n          case 9:\n            return _context.abrupt(\"return\", {\n              address: address,\n              instruction: (0, exports.createATAInstruction)({\n                mint: mint,\n                address: address,\n                owner: owner,\n                payer: payer\n              })\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.getOrCreateATA = getOrCreateATA;\n/**\n * Gets ATAs and creates them if they don't exist.\n * @param param0\n * @returns\n */\n\nvar getOrCreateATAs = function getOrCreateATAs(_ref2) {\n  var provider = _ref2.provider,\n      mints = _ref2.mints,\n      _ref2$owner = _ref2.owner,\n      owner = _ref2$owner === void 0 ? provider.wallet.publicKey : _ref2$owner;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var result, deduped;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Promise.all(Object.entries(mints).map(function (_ref3) {\n              var _ref4 = _slicedToArray(_ref3, 2),\n                  name = _ref4[0],\n                  mint = _ref4[1];\n\n              return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                var mintKey, result;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        mintKey = new web3_js_1.PublicKey(mint);\n                        _context2.next = 3;\n                        return (0, exports.getOrCreateATA)({\n                          provider: provider,\n                          mint: mintKey,\n                          owner: owner,\n                          payer: provider.wallet.publicKey\n                        });\n\n                      case 3:\n                        result = _context2.sent;\n                        return _context2.abrupt(\"return\", {\n                          address: result.address,\n                          instruction: result.instruction,\n                          name: name,\n                          mintKey: mintKey\n                        });\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n            }));\n\n          case 2:\n            result = _context3.sent;\n            deduped = result.reduce(function (acc, _ref5) {\n              var address = _ref5.address,\n                  name = _ref5.name,\n                  instruction = _ref5.instruction;\n              return {\n                accounts: Object.assign(Object.assign({}, acc.accounts), _defineProperty({}, name, address)),\n                createAccountInstructions: Object.assign(Object.assign({}, acc.createAccountInstructions), _defineProperty({}, name, instruction)),\n                instructions: instruction ? Object.assign(Object.assign({}, acc.instructions), _defineProperty({}, address.toString(), instruction)) : acc.instructions\n              };\n            }, {\n              accounts: {},\n              instructions: {},\n              createAccountInstructions: {}\n            });\n            return _context3.abrupt(\"return\", {\n              accounts: deduped.accounts,\n              createAccountInstructions: deduped.createAccountInstructions,\n              instructions: Object.values(deduped.instructions)\n            });\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n};\n\nexports.getOrCreateATAs = getOrCreateATAs;\n/**\n * Instruction for creating an ATA.\n * @returns\n */\n\nvar createATAInstruction = function createATAInstruction(_ref6) {\n  var address = _ref6.address,\n      mint = _ref6.mint,\n      owner = _ref6.owner,\n      payer = _ref6.payer;\n  return spl_token_1.Token.createAssociatedTokenAccountInstruction(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, mint, address, owner, payer);\n};\n\nexports.createATAInstruction = createATAInstruction;","map":{"version":3,"sources":["../../src/instructions/ata.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createATAInstruction = exports.getOrCreateATAs = exports.getOrCreateATA = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst ata_1 = require(\"../ata\");\n/**\n * Gets an associated token account, returning a create instruction if it doesn't exist.\n * @param param0\n * @returns\n */\nconst getOrCreateATA = ({ provider, mint, owner = provider.wallet.publicKey, payer = provider.wallet.publicKey, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const address = yield (0, ata_1.getATAAddress)({ mint, owner });\n    if (yield provider.connection.getAccountInfo(address)) {\n        return { address, instruction: null };\n    }\n    else {\n        return {\n            address,\n            instruction: (0, exports.createATAInstruction)({\n                mint,\n                address,\n                owner,\n                payer,\n            }),\n        };\n    }\n});\nexports.getOrCreateATA = getOrCreateATA;\n/**\n * Gets ATAs and creates them if they don't exist.\n * @param param0\n * @returns\n */\nconst getOrCreateATAs = ({ provider, mints, owner = provider.wallet.publicKey, }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    const result = yield Promise.all(Object.entries(mints).map(([name, mint]) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n        const mintKey = new web3_js_1.PublicKey(mint);\n        const result = yield (0, exports.getOrCreateATA)({\n            provider,\n            mint: mintKey,\n            owner: owner,\n            payer: provider.wallet.publicKey,\n        });\n        return {\n            address: result.address,\n            instruction: result.instruction,\n            name,\n            mintKey,\n        };\n    })));\n    const deduped = result.reduce((acc, { address, name, instruction }) => {\n        return {\n            accounts: Object.assign(Object.assign({}, acc.accounts), { [name]: address }),\n            createAccountInstructions: Object.assign(Object.assign({}, acc.createAccountInstructions), { [name]: instruction }),\n            instructions: instruction\n                ? Object.assign(Object.assign({}, acc.instructions), { [address.toString()]: instruction }) : acc.instructions,\n        };\n    }, { accounts: {}, instructions: {}, createAccountInstructions: {} });\n    return {\n        accounts: deduped.accounts,\n        createAccountInstructions: deduped.createAccountInstructions,\n        instructions: Object.values(deduped.instructions),\n    };\n});\nexports.getOrCreateATAs = getOrCreateATAs;\n/**\n * Instruction for creating an ATA.\n * @returns\n */\nconst createATAInstruction = ({ address, mint, owner, payer, }) => spl_token_1.Token.createAssociatedTokenAccountInstruction(spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID, spl_token_1.TOKEN_PROGRAM_ID, mint, address, owner, payer);\nexports.createATAInstruction = createATAInstruction;\n//# sourceMappingURL=ata.js.map"]},"metadata":{},"sourceType":"script"}