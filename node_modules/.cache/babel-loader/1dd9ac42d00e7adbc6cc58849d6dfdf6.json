{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTokenAccount = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar layout_1 = require(\"../layout\");\n\nvar createTokenAccount = function createTokenAccount(_ref) {\n  var provider = _ref.provider,\n      mint = _ref.mint,\n      _ref$owner = _ref.owner,\n      owner = _ref$owner === void 0 ? provider.wallet.publicKey : _ref$owner,\n      _ref$payer = _ref.payer,\n      payer = _ref$payer === void 0 ? provider.wallet.publicKey : _ref$payer,\n      _ref$accountSigner = _ref.accountSigner,\n      accountSigner = _ref$accountSigner === void 0 ? web3_js_1.Keypair.generate() : _ref$accountSigner;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var balanceNeeded, tokenAccount;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return spl_token_1.Token.getMinBalanceRentForExemptAccount(provider.connection);\n\n          case 2:\n            balanceNeeded = _context.sent;\n            tokenAccount = accountSigner.publicKey;\n            return _context.abrupt(\"return\", {\n              key: tokenAccount,\n              tx: new solana_contrib_1.TransactionEnvelope(provider, [web3_js_1.SystemProgram.createAccount({\n                fromPubkey: payer,\n                newAccountPubkey: accountSigner.publicKey,\n                lamports: balanceNeeded,\n                space: layout_1.TokenAccountLayout.span,\n                programId: spl_token_1.TOKEN_PROGRAM_ID\n              }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, tokenAccount, owner)], [accountSigner])\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.createTokenAccount = createTokenAccount;","map":{"version":3,"sources":["../../src/instructions/account.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEO,IAAM,kBAAkB,GAAG,SAArB,kBAAqB;AAAA,MAChC,QADgC,QAChC,QADgC;AAAA,MAEhC,IAFgC,QAEhC,IAFgC;AAAA,wBAGhC,KAHgC;AAAA,MAGhC,KAHgC,2BAGxB,QAAQ,CAAC,MAAT,CAAgB,SAHQ;AAAA,wBAIhC,KAJgC;AAAA,MAIhC,KAJgC,2BAIxB,QAAQ,CAAC,MAAT,CAAgB,SAJQ;AAAA,gCAKhC,aALgC;AAAA,MAKhC,aALgC,mCAKhB,SAAA,CAAA,OAAA,CAAQ,QAAR,EALgB;AAAA,SAkB7B,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,mBAAM,WAAA,CAAA,KAAA,CAAS,iCAAT,CAC1B,QAAQ,CAAC,UADiB,CAAN;;AAFnB;AAEG,YAAA,aAFH;AAMG,YAAA,YANH,GAMkB,aAAa,CAAC,SANhC;AAAA,6CAOI;AACL,cAAA,GAAG,EAAE,YADA;AAEL,cAAA,EAAE,EAAE,IAAI,gBAAA,CAAA,mBAAJ,CACF,QADE,EAEF,CACE,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,gBAAA,UAAU,EAAE,KADc;AAE1B,gBAAA,gBAAgB,EAAE,aAAa,CAAC,SAFN;AAG1B,gBAAA,QAAQ,EAAE,aAHgB;AAI1B,gBAAA,KAAK,EAAE,QAAA,CAAA,kBAAA,CAAmB,IAJA;AAK1B,gBAAA,SAAS,EAAE,WAAA,CAAA;AALe,eAA5B,CADF,EAQE,WAAA,CAAA,KAAA,CAAS,4BAAT,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,YAHF,EAIE,KAJF,CARF,CAFE,EAiBF,CAAC,aAAD,CAjBE;AAFC,aAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAlB6B;AAAA,CAA3B;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTokenAccount = void 0;\nconst tslib_1 = require(\"tslib\");\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst layout_1 = require(\"../layout\");\nconst createTokenAccount = ({ provider, mint, owner = provider.wallet.publicKey, payer = provider.wallet.publicKey, accountSigner = web3_js_1.Keypair.generate(), }) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    // Allocate memory for the account\n    const balanceNeeded = yield spl_token_1.Token.getMinBalanceRentForExemptAccount(provider.connection);\n    const tokenAccount = accountSigner.publicKey;\n    return {\n        key: tokenAccount,\n        tx: new solana_contrib_1.TransactionEnvelope(provider, [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: payer,\n                newAccountPubkey: accountSigner.publicKey,\n                lamports: balanceNeeded,\n                space: layout_1.TokenAccountLayout.span,\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, tokenAccount, owner),\n        ], [accountSigner]),\n    };\n});\nexports.createTokenAccount = createTokenAccount;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}