{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mintNFT = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar _1 = require(\".\");\n\nvar mintNFT = function mintNFT(provider, mintKP) {\n  var owner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : provider.wallet.publicKey;\n  return (0, tslib_1.__awaiter)(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var tempMintAuthority, tx, _yield, address, instruction;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Temporary mint authority\n            tempMintAuthority = provider.wallet.publicKey; // Mint for the NFT\n\n            _context.next = 3;\n            return (0, _1.createInitMintInstructions)({\n              provider: provider,\n              mintKP: mintKP,\n              decimals: 0,\n              mintAuthority: tempMintAuthority\n            });\n\n          case 3:\n            tx = _context.sent;\n            _context.next = 6;\n            return (0, _1.getOrCreateATA)({\n              provider: provider,\n              mint: mintKP.publicKey,\n              owner: owner,\n              payer: provider.wallet.publicKey\n            });\n\n          case 6:\n            _yield = _context.sent;\n            address = _yield.address;\n            instruction = _yield.instruction;\n\n            if (instruction) {\n              tx.instructions.push(instruction);\n            } // Mint to owner's ATA\n\n\n            tx.instructions.push(spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, address, tempMintAuthority, [], new spl_token_1.u64(1))); // Set mint authority of the NFT to NULL\n\n            tx.instructions.push(spl_token_1.Token.createSetAuthorityInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, null, \"MintTokens\", tempMintAuthority, []));\n            return _context.abrupt(\"return\", tx);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nexports.mintNFT = mintNFT;","map":{"version":3,"sources":["../../src/instructions/nft.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,IAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEO,IAAM,OAAO,GAAG,SAAV,OAAU,CACrB,QADqB,EAErB,MAFqB;AAAA,MAGrB,KAHqB,uEAGF,QAAQ,CAAC,MAAT,CAAgB,SAHd;AAAA,SAIW,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChC;AACM,YAAA,iBAF0B,GAEN,QAAQ,CAAC,MAAT,CAAgB,SAFV,EAGhC;;AAHgC;AAIrB,mBAAM,CAAA,GAAA,EAAA,CAAA,0BAAA,EAA2B;AAC1C,cAAA,QAAQ,EAAR,QAD0C;AAE1C,cAAA,MAAM,EAAN,MAF0C;AAG1C,cAAA,QAAQ,EAAE,CAHgC;AAI1C,cAAA,aAAa,EAAE;AAJ2B,aAA3B,CAAN;;AAJqB;AAI1B,YAAA,EAJ0B;AAAA;AAWC,mBAAM,CAAA,GAAA,EAAA,CAAA,cAAA,EAAe;AACpD,cAAA,QAAQ,EAAR,QADoD;AAEpD,cAAA,IAAI,EAAE,MAAM,CAAC,SAFuC;AAGpD,cAAA,KAAK,EAAE,KAH6C;AAIpD,cAAA,KAAK,EAAE,QAAQ,CAAC,MAAT,CAAgB;AAJ6B,aAAf,CAAN;;AAXD;AAAA;AAWxB,YAAA,OAXwB,UAWxB,OAXwB;AAWf,YAAA,WAXe,UAWf,WAXe;;AAiBhC,gBAAI,WAAJ,EAAiB;AACf,cAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAqB,WAArB;AACD,aAnB+B,CAoBhC;;;AACA,YAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CACE,WAAA,CAAA,KAAA,CAAS,uBAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,OAHF,EAIE,iBAJF,EAKE,EALF,EAME,IAAI,WAAA,CAAA,GAAJ,CAAQ,CAAR,CANF,CADF,EArBgC,CA+BhC;;AACA,YAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CACE,WAAA,CAAA,KAAA,CAAS,6BAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,IAHF,EAIE,YAJF,EAKE,iBALF,EAME,EANF,CADF;AAhCgC,6CA2CzB,EA3CyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAJX;AAAA,CAAhB;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mintNFT = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst _1 = require(\".\");\nconst mintNFT = (provider, mintKP, owner = provider.wallet.publicKey) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    // Temporary mint authority\n    const tempMintAuthority = provider.wallet.publicKey;\n    // Mint for the NFT\n    const tx = yield (0, _1.createInitMintInstructions)({\n        provider,\n        mintKP,\n        decimals: 0,\n        mintAuthority: tempMintAuthority,\n    });\n    // Token account for the NFT\n    const { address, instruction } = yield (0, _1.getOrCreateATA)({\n        provider,\n        mint: mintKP.publicKey,\n        owner: owner,\n        payer: provider.wallet.publicKey,\n    });\n    if (instruction) {\n        tx.instructions.push(instruction);\n    }\n    // Mint to owner's ATA\n    tx.instructions.push(spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, address, tempMintAuthority, [], new spl_token_1.u64(1)));\n    // Set mint authority of the NFT to NULL\n    tx.instructions.push(spl_token_1.Token.createSetAuthorityInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, null, \"MintTokens\", tempMintAuthority, []));\n    return tx;\n});\nexports.mintNFT = mintNFT;\n//# sourceMappingURL=nft.js.map"]},"metadata":{},"sourceType":"script"}