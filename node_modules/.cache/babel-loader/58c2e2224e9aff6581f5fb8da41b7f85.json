{"ast":null,"code":"'use strict';\n\nvar errcode = require('err-code');\n\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n  return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n  var temp;\n  var operation;\n\n  if (typeof fn === 'object' && typeof options === 'function') {\n    // Swap options and fn when using alternate signature (options, fn)\n    temp = options;\n    options = fn;\n    fn = temp;\n  }\n\n  operation = retry.operation(options);\n  return new Promise(function (resolve, reject) {\n    operation.attempt(function (number) {\n      Promise.resolve().then(function () {\n        return fn(function (err) {\n          if (isRetryError(err)) {\n            err = err.retried;\n          }\n\n          throw errcode(new Error('Retrying'), 'EPROMISERETRY', {\n            retried: err\n          });\n        }, number);\n      }).then(resolve, function (err) {\n        if (isRetryError(err)) {\n          err = err.retried;\n\n          if (operation.retry(err || new Error())) {\n            return;\n          }\n        }\n\n        reject(err);\n      });\n    });\n  });\n}\n\nmodule.exports = promiseRetry;","map":{"version":3,"sources":["C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/promise-retry/index.js"],"names":["errcode","require","retry","hasOwn","Object","prototype","hasOwnProperty","isRetryError","err","code","call","promiseRetry","fn","options","temp","operation","Promise","resolve","reject","attempt","number","then","retried","Error","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIE,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAA9B;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,SAAOA,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAa,eAApB,IAAuCN,MAAM,CAACO,IAAP,CAAYF,GAAZ,EAAiB,SAAjB,CAA9C;AACH;;AAED,SAASG,YAAT,CAAsBC,EAAtB,EAA0BC,OAA1B,EAAmC;AAC/B,MAAIC,IAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAI,OAAOH,EAAP,KAAc,QAAd,IAA0B,OAAOC,OAAP,KAAmB,UAAjD,EAA6D;AACzD;AACAC,IAAAA,IAAI,GAAGD,OAAP;AACAA,IAAAA,OAAO,GAAGD,EAAV;AACAA,IAAAA,EAAE,GAAGE,IAAL;AACH;;AAEDC,EAAAA,SAAS,GAAGb,KAAK,CAACa,SAAN,CAAgBF,OAAhB,CAAZ;AAEA,SAAO,IAAIG,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1CH,IAAAA,SAAS,CAACI,OAAV,CAAkB,UAAUC,MAAV,EAAkB;AAChCJ,MAAAA,OAAO,CAACC,OAAR,GACCI,IADD,CACM,YAAY;AACd,eAAOT,EAAE,CAAC,UAAUJ,GAAV,EAAe;AACrB,cAAID,YAAY,CAACC,GAAD,CAAhB,EAAuB;AACnBA,YAAAA,GAAG,GAAGA,GAAG,CAACc,OAAV;AACH;;AAED,gBAAMtB,OAAO,CAAC,IAAIuB,KAAJ,CAAU,UAAV,CAAD,EAAwB,eAAxB,EAAyC;AAAED,YAAAA,OAAO,EAAEd;AAAX,WAAzC,CAAb;AACH,SANQ,EAMNY,MANM,CAAT;AAOH,OATD,EAUCC,IAVD,CAUMJ,OAVN,EAUe,UAAUT,GAAV,EAAe;AAC1B,YAAID,YAAY,CAACC,GAAD,CAAhB,EAAuB;AACnBA,UAAAA,GAAG,GAAGA,GAAG,CAACc,OAAV;;AAEA,cAAIP,SAAS,CAACb,KAAV,CAAgBM,GAAG,IAAI,IAAIe,KAAJ,EAAvB,CAAJ,EAAyC;AACrC;AACH;AACJ;;AAEDL,QAAAA,MAAM,CAACV,GAAD,CAAN;AACH,OApBD;AAqBH,KAtBD;AAuBH,GAxBM,CAAP;AAyBH;;AAEDgB,MAAM,CAACC,OAAP,GAAiBd,YAAjB","sourcesContent":["'use strict';\n\nvar errcode = require('err-code');\nvar retry = require('retry');\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction isRetryError(err) {\n    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');\n}\n\nfunction promiseRetry(fn, options) {\n    var temp;\n    var operation;\n\n    if (typeof fn === 'object' && typeof options === 'function') {\n        // Swap options and fn when using alternate signature (options, fn)\n        temp = options;\n        options = fn;\n        fn = temp;\n    }\n\n    operation = retry.operation(options);\n\n    return new Promise(function (resolve, reject) {\n        operation.attempt(function (number) {\n            Promise.resolve()\n            .then(function () {\n                return fn(function (err) {\n                    if (isRetryError(err)) {\n                        err = err.retried;\n                    }\n\n                    throw errcode(new Error('Retrying'), 'EPROMISERETRY', { retried: err });\n                }, number);\n            })\n            .then(resolve, function (err) {\n                if (isRetryError(err)) {\n                    err = err.retried;\n\n                    if (operation.retry(err || new Error())) {\n                        return;\n                    }\n                }\n\n                reject(err);\n            });\n        });\n    });\n}\n\nmodule.exports = promiseRetry;\n"]},"metadata":{},"sourceType":"script"}