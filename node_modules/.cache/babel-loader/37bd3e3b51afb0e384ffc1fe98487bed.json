{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicKey = exports.signBytes = exports.signTransaction = exports.getSolanaDerivationPath = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar INS_GET_PUBKEY = 0x05;\nvar INS_SIGN_MESSAGE = 0x06;\nvar P1_NON_CONFIRM = 0x00;\nvar P1_CONFIRM = 0x01;\nvar P2_EXTEND = 0x01;\nvar P2_MORE = 0x02;\nvar MAX_PAYLOAD = 255;\nvar LEDGER_CLA = 0xe0;\n/*\n * Helper for chunked send of large payloads\n */\n\nfunction ledgerSend(transport, instruction, p1, payload) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var p2, payloadOffset, _chunk, _reply, chunk, reply;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            p2 = 0;\n            payloadOffset = 0;\n\n            if (!(payload.length > MAX_PAYLOAD)) {\n              _context.next = 14;\n              break;\n            }\n\n          case 3:\n            if (!(payload.length - payloadOffset > MAX_PAYLOAD)) {\n              _context.next = 14;\n              break;\n            }\n\n            _chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n            payloadOffset += MAX_PAYLOAD;\n            _context.next = 8;\n            return transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, _chunk);\n\n          case 8:\n            _reply = _context.sent;\n\n            if (!(_reply.length !== 2)) {\n              _context.next = 11;\n              break;\n            }\n\n            throw new Error(\"Received unexpected reply payload\");\n\n          case 11:\n            p2 |= P2_EXTEND;\n            _context.next = 3;\n            break;\n\n          case 14:\n            chunk = payload.slice(payloadOffset);\n            _context.next = 17;\n            return transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n\n          case 17:\n            reply = _context.sent;\n            return _context.abrupt(\"return\", reply.slice(0, reply.length - 2));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nvar BIP32_HARDENED_BIT = 1 << 31 >>> 0;\n\nfunction harden() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nfunction getSolanaDerivationPath(account, change) {\n  var length;\n\n  if (account !== undefined) {\n    if (change !== undefined) {\n      length = 4;\n    } else {\n      length = 3;\n    }\n  } else {\n    length = 2;\n  }\n\n  var derivationPath = Buffer.alloc(1 + length * 4); // eslint-disable-next-line\n\n  var offset = 0;\n  offset = derivationPath.writeUInt8(length, offset);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (length > 2) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n\n    if (length === 4) {\n      // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n      // eslint-disable-next-line unused-imports/no-unused-vars,@typescript-eslint/no-unused-vars\n      offset = derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\n\nexports.getSolanaDerivationPath = getSolanaDerivationPath;\n\nfunction signTransaction(transport, transaction) {\n  var derivationPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSolanaDerivationPath();\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var messageBytes;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            messageBytes = transaction.serializeMessage();\n            return _context2.abrupt(\"return\", signBytes(transport, messageBytes, derivationPath));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.signTransaction = signTransaction;\n\nfunction signBytes(transport, bytes) {\n  var derivationPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSolanaDerivationPath();\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var numPaths, payload;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            numPaths = Buffer.alloc(1);\n            numPaths.writeUInt8(1, 0);\n            payload = Buffer.concat([numPaths, derivationPath, bytes]); // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n            // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n\n            return _context3.abrupt(\"return\", ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.signBytes = signBytes;\n\nfunction getPublicKey(transport) {\n  var derivationPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getSolanaDerivationPath();\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var publicKeyBytes;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return ledgerSend(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n\n          case 2:\n            publicKeyBytes = _context4.sent;\n            return _context4.abrupt(\"return\", new web3_js_1.PublicKey(publicKeyBytes));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\n\nexports.getPublicKey = getPublicKey;","map":{"version":3,"sources":["../../../src/adapters/ledger/core.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPublicKey = exports.signBytes = exports.signTransaction = exports.getSolanaDerivationPath = void 0;\nconst tslib_1 = require(\"tslib\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst INS_GET_PUBKEY = 0x05;\nconst INS_SIGN_MESSAGE = 0x06;\nconst P1_NON_CONFIRM = 0x00;\nconst P1_CONFIRM = 0x01;\nconst P2_EXTEND = 0x01;\nconst P2_MORE = 0x02;\nconst MAX_PAYLOAD = 255;\nconst LEDGER_CLA = 0xe0;\n/*\n * Helper for chunked send of large payloads\n */\nfunction ledgerSend(transport, instruction, p1, payload) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        let p2 = 0;\n        let payloadOffset = 0;\n        if (payload.length > MAX_PAYLOAD) {\n            while (payload.length - payloadOffset > MAX_PAYLOAD) {\n                const chunk = payload.slice(payloadOffset, payloadOffset + MAX_PAYLOAD);\n                payloadOffset += MAX_PAYLOAD;\n                const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, chunk);\n                if (reply.length !== 2) {\n                    throw new Error(\"Received unexpected reply payload\");\n                }\n                p2 |= P2_EXTEND;\n            }\n        }\n        const chunk = payload.slice(payloadOffset);\n        const reply = yield transport.send(LEDGER_CLA, instruction, p1, p2, chunk);\n        return reply.slice(0, reply.length - 2);\n    });\n}\nconst BIP32_HARDENED_BIT = (1 << 31) >>> 0;\nfunction harden(n = 0) {\n    return (n | BIP32_HARDENED_BIT) >>> 0;\n}\nfunction getSolanaDerivationPath(account, change) {\n    let length;\n    if (account !== undefined) {\n        if (change !== undefined) {\n            length = 4;\n        }\n        else {\n            length = 3;\n        }\n    }\n    else {\n        length = 2;\n    }\n    const derivationPath = Buffer.alloc(1 + length * 4);\n    // eslint-disable-next-line\n    var offset = 0;\n    offset = derivationPath.writeUInt8(length, offset);\n    offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n    offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n    if (length > 2) {\n        offset = derivationPath.writeUInt32BE(harden(account), offset);\n        if (length === 4) {\n            // @FIXME: https://github.com/project-serum/spl-token-wallet/issues/59\n            // eslint-disable-next-line unused-imports/no-unused-vars,@typescript-eslint/no-unused-vars\n            offset = derivationPath.writeUInt32BE(harden(change), offset);\n        }\n    }\n    return derivationPath;\n}\nexports.getSolanaDerivationPath = getSolanaDerivationPath;\nfunction signTransaction(transport, transaction, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const messageBytes = transaction.serializeMessage();\n        return signBytes(transport, messageBytes, derivationPath);\n    });\n}\nexports.signTransaction = signTransaction;\nfunction signBytes(transport, bytes, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const numPaths = Buffer.alloc(1);\n        numPaths.writeUInt8(1, 0);\n        const payload = Buffer.concat([numPaths, derivationPath, bytes]);\n        // @FIXME: must enable blind signing in Solana Ledger App per https://github.com/project-serum/spl-token-wallet/issues/71\n        // See also https://github.com/project-serum/spl-token-wallet/pull/23#issuecomment-712317053\n        return ledgerSend(transport, INS_SIGN_MESSAGE, P1_CONFIRM, payload);\n    });\n}\nexports.signBytes = signBytes;\nfunction getPublicKey(transport, derivationPath = getSolanaDerivationPath()) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const publicKeyBytes = yield ledgerSend(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n        return new web3_js_1.PublicKey(publicKeyBytes);\n    });\n}\nexports.getPublicKey = getPublicKey;\n//# sourceMappingURL=core.js.map"]},"metadata":{},"sourceType":"script"}