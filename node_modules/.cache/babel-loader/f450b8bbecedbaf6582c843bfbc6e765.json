{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionReceipt = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar tiny_invariant_1 = (0, tslib_1.__importDefault)(require(\"tiny-invariant\"));\n/**\n * A transaction that has been processed by the cluster.\n */\n\nvar TransactionReceipt = /*#__PURE__*/function () {\n  function TransactionReceipt(\n  /**\n   * Signature (id) of the transaction.\n   */\n  signature,\n  /**\n   * Raw response from web3.js\n   */\n  response) {\n    _classCallCheck(this, TransactionReceipt);\n\n    this.signature = signature;\n    this.response = response;\n  }\n  /**\n   * Gets the events associated with this transaction.\n   */\n\n\n  _createClass(TransactionReceipt, [{\n    key: \"getEvents\",\n    value: function getEvents(eventParser) {\n      var _a;\n\n      var logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n\n      if (logs && logs.length > 0) {\n        return eventParser(logs);\n      }\n\n      return [];\n    }\n    /**\n     * Prints the logs associated with this transaction.\n     */\n\n  }, {\n    key: \"printLogs\",\n    value: function printLogs() {\n      var _a, _b;\n\n      console.log((_b = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages) === null || _b === void 0 ? void 0 : _b.join(\"\\n\"));\n    }\n    /**\n     * Gets the compute units used by the transaction.\n     * @returns\n     */\n\n  }, {\n    key: \"computeUnits\",\n    get: function get() {\n      var _a;\n\n      var logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n      (0, tiny_invariant_1.default)(logs, \"no logs\");\n      var consumeLog = logs[logs.length - 2];\n      (0, tiny_invariant_1.default)(consumeLog, \"no consume log\");\n      var amtStr = consumeLog.split(\" \")[3];\n      (0, tiny_invariant_1.default)(amtStr, \"no amount\");\n      return parseInt(amtStr);\n    }\n  }]);\n\n  return TransactionReceipt;\n}();\n\nexports.TransactionReceipt = TransactionReceipt;","map":{"version":3,"sources":["../../src/transaction/TransactionReceipt.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAIA,IAAA,gBAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;AAIA;;AAEG;;IACU,kB;AACX;AACE;;AAEG;AACa,EAAA,SAJlB;AAKE;;AAEG;AACa,EAAA,QARlB,EAQ+C;AAAA;;AAJ7B,SAAA,SAAA,GAAA,SAAA;AAIA,SAAA,QAAA,GAAA,QAAA;AACd;AAEJ;;AAEG;;;;;WACI,mBAA2B,WAA3B,EAAsD;;;AAC3D,UAAM,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAAjC;;AACA,UAAI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,eAAO,WAAW,CAAC,IAAD,CAAlB;AACD;;AACD,aAAO,EAAP;AACD;AAED;;AAEG;;;;WACI,qBAAS;;;AACd,MAAA,OAAO,CAAC,GAAR,CAAY,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAApB,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAE,IAAF,CAAO,IAAP,CAA3C;AACD;AAED;;;AAGG;;;;SACH,eAAuB;;;AACrB,UAAM,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAAjC;AACA,OAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,IAAV,EAAgB,SAAhB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAvB;AACA,OAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,UAAV,EAAsB,gBAAtB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAf;AACA,OAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,MAAV,EAAkB,WAAlB;AACA,aAAO,QAAQ,CAAC,MAAD,CAAf;AACD;;;;;;AA1CH,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionReceipt = void 0;\nconst tslib_1 = require(\"tslib\");\nconst tiny_invariant_1 = (0, tslib_1.__importDefault)(require(\"tiny-invariant\"));\n/**\n * A transaction that has been processed by the cluster.\n */\nclass TransactionReceipt {\n    constructor(\n    /**\n     * Signature (id) of the transaction.\n     */\n    signature, \n    /**\n     * Raw response from web3.js\n     */\n    response) {\n        this.signature = signature;\n        this.response = response;\n    }\n    /**\n     * Gets the events associated with this transaction.\n     */\n    getEvents(eventParser) {\n        var _a;\n        const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n        if (logs && logs.length > 0) {\n            return eventParser(logs);\n        }\n        return [];\n    }\n    /**\n     * Prints the logs associated with this transaction.\n     */\n    printLogs() {\n        var _a, _b;\n        console.log((_b = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages) === null || _b === void 0 ? void 0 : _b.join(\"\\n\"));\n    }\n    /**\n     * Gets the compute units used by the transaction.\n     * @returns\n     */\n    get computeUnits() {\n        var _a;\n        const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n        (0, tiny_invariant_1.default)(logs, \"no logs\");\n        const consumeLog = logs[logs.length - 2];\n        (0, tiny_invariant_1.default)(consumeLog, \"no consume log\");\n        const amtStr = consumeLog.split(\" \")[3];\n        (0, tiny_invariant_1.default)(amtStr, \"no amount\");\n        return parseInt(amtStr);\n    }\n}\nexports.TransactionReceipt = TransactionReceipt;\n//# sourceMappingURL=TransactionReceipt.js.map"]},"metadata":{},"sourceType":"script"}