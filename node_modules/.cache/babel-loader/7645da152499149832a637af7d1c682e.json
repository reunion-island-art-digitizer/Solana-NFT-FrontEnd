{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/piroi16/Documents/GitHub/Solana-NFT-FrontEnd/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PendingTransaction = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar promise_retry_1 = (0, tslib_1.__importDefault)(require(\"promise-retry\"));\n\nvar transaction_1 = require(\"../transaction\");\n/**\n * Transaction which may or may not be confirmed.\n */\n\n\nvar PendingTransaction = /*#__PURE__*/function () {\n  function PendingTransaction(connection, signature) {\n    _classCallCheck(this, PendingTransaction);\n\n    this.connection = connection;\n    this.signature = signature;\n    this._receipt = null;\n  }\n  /**\n   * Gets the transaction receipt, if it has already been fetched.\n   *\n   * You probably want the async version of this function, `wait`.\n   */\n\n\n  _createClass(PendingTransaction, [{\n    key: \"receipt\",\n    get: function get() {\n      return this._receipt;\n    }\n    /**\n     * Waits for the confirmation of the transaction, via polling.\n     * @returns\n     */\n\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        commitment: \"confirmed\"\n      };\n\n      var _a$commitment = _a.commitment,\n          commitment = _a$commitment === void 0 ? \"confirmed\" : _a$commitment,\n          retryOpts = (0, tslib_1.__rest)(_a, [\"commitment\"]);\n      return (0, tslib_1.__awaiter)(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var receipt;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this._receipt) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this._receipt);\n\n              case 2:\n                _context2.next = 4;\n                return (0, promise_retry_1.default)(function (retry) {\n                  return (0, tslib_1.__awaiter)(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var result;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return this.connection.getTransaction(this.signature, {\n                              commitment: commitment\n                            });\n\n                          case 2:\n                            result = _context.sent;\n\n                            if (result) {\n                              _context.next = 6;\n                              break;\n                            }\n\n                            retry(new Error(\"Error fetching transaction\"));\n                            return _context.abrupt(\"return\");\n\n                          case 6:\n                            return _context.abrupt(\"return\", new transaction_1.TransactionReceipt(this.signature, result));\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n                }, Object.assign({\n                  retries: 5,\n                  minTimeout: 500\n                }, retryOpts));\n\n              case 4:\n                receipt = _context2.sent;\n\n                if (receipt) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(\"transaction could not be confirmed\");\n\n              case 7:\n                this._receipt = receipt;\n                return _context2.abrupt(\"return\", receipt);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }]);\n\n  return PendingTransaction;\n}();\n\nexports.PendingTransaction = PendingTransaction;","map":{"version":3,"sources":["../../src/transaction/PendingTransaction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAKA,IAAA,eAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAGA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAEA;;AAEG;;;IACU,kB;AAGX,8BACkB,UADlB,EAEkB,SAFlB,EAEiD;AAAA;;AAD/B,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,SAAA,GAAA,SAAA;AAJV,SAAA,QAAA,GAAsC,IAAtC;AAKJ;AAEJ;;;;AAIG;;;;;SACH,eAAW;AACT,aAAO,KAAK,QAAZ;AACD;AAED;;;AAGG;;;;WACU,gBAQV;AAAA,UAPD,EAOC,uEAFG;AACF,QAAA,UAAU,EAAE;AADV,OAEH;;AAPD,0BAC0B,EAD1B,CACE,UADF;AAAA,UACE,UADF,8BACe,WADf;AAAA,UAEK,SAFL,GAEc,CAAA,GAAA,OAAA,CAAA,MAAA,EAAA,EAAA,EAFd,CAAA,YAAA,CAEc,CAFd;;;;;;;;;qBASI,KAAK,Q;;;;;kDACA,KAAK,Q;;;;AAEE,uBAAM,CAAA,GAAA,eAAA,CAAA,OAAA,EACpB,UAAO,KAAP;AAAA,yBAAgB,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,mCAAM,KAAK,UAAL,CAAgB,cAAhB,CAA+B,KAAK,SAApC,EAA+C;AAClE,8BAAA,UAAU,EAAV;AADkE,6BAA/C,CAAN;;AADD;AACR,4BAAA,MADQ;;AAAA,gCAIT,MAJS;AAAA;AAAA;AAAA;;AAKZ,4BAAA,KAAK,CAAC,IAAI,KAAJ,CAAU,4BAAV,CAAD,CAAL;AALY;;AAAA;AAAA,6DAQP,IAAI,aAAA,CAAA,kBAAJ,CAAuB,KAAK,SAA5B,EAAuC,MAAvC,CARO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAA,EAAhB;AAAA,iBADoB,EAUnB,MAAA,CAAA,MAAA,CAAA;AAEC,kBAAA,OAAO,EAAE,CAFV;AAGC,kBAAA,UAAU,EAAE;AAHb,iBAAA,EAII,SAJJ,CAVmB,CAAN;;;AAAV,gBAAA,O;;oBAiBD,O;;;;;sBACG,IAAI,KAAJ,CAAU,oCAAV,C;;;AAER,qBAAK,QAAL,GAAgB,OAAhB;kDACO,O;;;;;;;;;AACR;;;;;;AAxDH,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PendingTransaction = void 0;\nconst tslib_1 = require(\"tslib\");\nconst promise_retry_1 = (0, tslib_1.__importDefault)(require(\"promise-retry\"));\nconst transaction_1 = require(\"../transaction\");\n/**\n * Transaction which may or may not be confirmed.\n */\nclass PendingTransaction {\n    constructor(connection, signature) {\n        this.connection = connection;\n        this.signature = signature;\n        this._receipt = null;\n    }\n    /**\n     * Gets the transaction receipt, if it has already been fetched.\n     *\n     * You probably want the async version of this function, `wait`.\n     */\n    get receipt() {\n        return this._receipt;\n    }\n    /**\n     * Waits for the confirmation of the transaction, via polling.\n     * @returns\n     */\n    wait(_a = {\n        commitment: \"confirmed\",\n    }) {\n        var { commitment = \"confirmed\" } = _a, retryOpts = (0, tslib_1.__rest)(_a, [\"commitment\"]);\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            if (this._receipt) {\n                return this._receipt;\n            }\n            const receipt = yield (0, promise_retry_1.default)((retry) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n                const result = yield this.connection.getTransaction(this.signature, {\n                    commitment,\n                });\n                if (!result) {\n                    retry(new Error(\"Error fetching transaction\"));\n                    return;\n                }\n                return new transaction_1.TransactionReceipt(this.signature, result);\n            }), Object.assign({ retries: 5, minTimeout: 500 }, retryOpts));\n            if (!receipt) {\n                throw new Error(\"transaction could not be confirmed\");\n            }\n            this._receipt = receipt;\n            return receipt;\n        });\n    }\n}\nexports.PendingTransaction = PendingTransaction;\n//# sourceMappingURL=PendingTransaction.js.map"]},"metadata":{},"sourceType":"script"}