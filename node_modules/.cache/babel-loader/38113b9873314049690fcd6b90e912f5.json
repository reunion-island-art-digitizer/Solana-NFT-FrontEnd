{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mintNFT = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst _1 = require(\".\");\n\nconst mintNFT = (provider, mintKP, owner = provider.wallet.publicKey) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n  // Temporary mint authority\n  const tempMintAuthority = provider.wallet.publicKey; // Mint for the NFT\n\n  const tx = yield (0, _1.createInitMintInstructions)({\n    provider,\n    mintKP,\n    decimals: 0,\n    mintAuthority: tempMintAuthority\n  }); // Token account for the NFT\n\n  const {\n    address,\n    instruction\n  } = yield (0, _1.getOrCreateATA)({\n    provider,\n    mint: mintKP.publicKey,\n    owner: owner,\n    payer: provider.wallet.publicKey\n  });\n\n  if (instruction) {\n    tx.instructions.push(instruction);\n  } // Mint to owner's ATA\n\n\n  tx.instructions.push(spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, address, tempMintAuthority, [], new spl_token_1.u64(1))); // Set mint authority of the NFT to NULL\n\n  tx.instructions.push(spl_token_1.Token.createSetAuthorityInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, null, \"MintTokens\", tempMintAuthority, []));\n  return tx;\n});\n\nexports.mintNFT = mintNFT;","map":{"version":3,"sources":["../../src/instructions/nft.ts"],"names":[],"mappings":";;;;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAGA,MAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEO,MAAM,OAAO,GAAG,CACrB,QADqB,EAErB,MAFqB,EAGrB,KAAA,GAAmB,QAAQ,CAAC,MAAT,CAAgB,SAHd,KAIW,CAAA,GAAA,OAAA,CAAA,SAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChC;AACA,QAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAA1C,CAFgC,CAGhC;;AACA,QAAM,EAAE,GAAG,MAAM,CAAA,GAAA,EAAA,CAAA,0BAAA,EAA2B;AAC1C,IAAA,QAD0C;AAE1C,IAAA,MAF0C;AAG1C,IAAA,QAAQ,EAAE,CAHgC;AAI1C,IAAA,aAAa,EAAE;AAJ2B,GAA3B,CAAjB,CAJgC,CAUhC;;AACA,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAA2B,MAAM,CAAA,GAAA,EAAA,CAAA,cAAA,EAAe;AACpD,IAAA,QADoD;AAEpD,IAAA,IAAI,EAAE,MAAM,CAAC,SAFuC;AAGpD,IAAA,KAAK,EAAE,KAH6C;AAIpD,IAAA,KAAK,EAAE,QAAQ,CAAC,MAAT,CAAgB;AAJ6B,GAAf,CAAvC;;AAMA,MAAI,WAAJ,EAAiB;AACf,IAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CAAqB,WAArB;AACD,GAnB+B,CAoBhC;;;AACA,EAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CACE,WAAA,CAAA,KAAA,CAAS,uBAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,OAHF,EAIE,iBAJF,EAKE,EALF,EAME,IAAI,WAAA,CAAA,GAAJ,CAAQ,CAAR,CANF,CADF,EArBgC,CA+BhC;;AACA,EAAA,EAAE,CAAC,YAAH,CAAgB,IAAhB,CACE,WAAA,CAAA,KAAA,CAAS,6BAAT,CACE,WAAA,CAAA,gBADF,EAEE,MAAM,CAAC,SAFT,EAGE,IAHF,EAIE,YAJF,EAKE,iBALF,EAME,EANF,CADF;AAWA,SAAO,EAAP;AACD,CA5CiC,CAJ3B;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mintNFT = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst _1 = require(\".\");\nconst mintNFT = (provider, mintKP, owner = provider.wallet.publicKey) => (0, tslib_1.__awaiter)(void 0, void 0, void 0, function* () {\n    // Temporary mint authority\n    const tempMintAuthority = provider.wallet.publicKey;\n    // Mint for the NFT\n    const tx = yield (0, _1.createInitMintInstructions)({\n        provider,\n        mintKP,\n        decimals: 0,\n        mintAuthority: tempMintAuthority,\n    });\n    // Token account for the NFT\n    const { address, instruction } = yield (0, _1.getOrCreateATA)({\n        provider,\n        mint: mintKP.publicKey,\n        owner: owner,\n        payer: provider.wallet.publicKey,\n    });\n    if (instruction) {\n        tx.instructions.push(instruction);\n    }\n    // Mint to owner's ATA\n    tx.instructions.push(spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, address, tempMintAuthority, [], new spl_token_1.u64(1)));\n    // Set mint authority of the NFT to NULL\n    tx.instructions.push(spl_token_1.Token.createSetAuthorityInstruction(spl_token_1.TOKEN_PROGRAM_ID, mintKP.publicKey, null, \"MintTokens\", tempMintAuthority, []));\n    return tx;\n});\nexports.mintNFT = mintNFT;\n//# sourceMappingURL=nft.js.map"]},"metadata":{},"sourceType":"script"}