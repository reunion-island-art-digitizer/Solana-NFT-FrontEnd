{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecretKeyAdapter = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst eventemitter3_1 = (0, tslib_1.__importDefault)(require(\"eventemitter3\"));\n\nconst types_1 = require(\"../types\");\n\nclass SecretKeyAdapter extends eventemitter3_1.default {\n  constructor() {\n    super();\n\n    this.connect = args => {\n      const argsTyped = args;\n      const secretKey = argsTyped === null || argsTyped === void 0 ? void 0 : argsTyped.secretKey;\n\n      if (!secretKey || !Array.isArray(secretKey)) {\n        throw new Error(\"Secret key missing.\");\n      }\n\n      this._wallet = new solana_contrib_1.SignerWallet(web3_js_1.Keypair.fromSecretKey(Uint8Array.from(secretKey)));\n      this._publicKey = this._wallet.publicKey;\n      this._connected = true;\n      this.emit(\"connect\", this.publicKey);\n      return Promise.resolve();\n    };\n\n    this._connected = false;\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  signAllTransactions(transactions) {\n    const wallet = this._wallet;\n\n    if (!wallet) {\n      return Promise.resolve(transactions);\n    }\n\n    return wallet.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    var _a;\n\n    return (_a = this._publicKey) !== null && _a !== void 0 ? _a : types_1.DEFAULT_PUBLIC_KEY;\n  }\n\n  signTransaction(transaction) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (!wallet) {\n        return Promise.resolve(transaction);\n      }\n\n      return wallet.signTransaction(transaction);\n    });\n  }\n\n  disconnect() {\n    if (this._wallet) {\n      this._wallet = undefined;\n      this._publicKey = undefined;\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit(\"disconnect\");\n    }\n  }\n\n}\n\nexports.SecretKeyAdapter = SecretKeyAdapter;","map":{"version":3,"sources":["../../../src/adapters/secret-key/index.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,MAAA,gBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,eAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AAGA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAa,gBAAb,SAAsC,eAAA,CAAA,OAAtC,CAAkD;AAMhD,EAAA,WAAA,GAAA;AACE;;AAkCF,SAAA,OAAA,GAAW,IAAD,IAAkC;AAC1C,YAAM,SAAS,GAAG,IAAlB;AAKA,YAAM,SAAS,GAAG,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,SAA7B;;AACA,UAAI,CAAC,SAAD,IAAc,CAAC,KAAK,CAAC,OAAN,CAAc,SAAd,CAAnB,EAA6C;AAC3C,cAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACD;;AACD,WAAK,OAAL,GAAe,IAAI,gBAAA,CAAA,YAAJ,CACb,SAAA,CAAA,OAAA,CAAQ,aAAR,CAAsB,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAAtB,CADa,CAAf;AAGA,WAAK,UAAL,GAAkB,KAAK,OAAL,CAAa,SAA/B;AACA,WAAK,UAAL,GAAkB,IAAlB;AACA,WAAK,IAAL,CAAU,SAAV,EAAqB,KAAK,SAA1B;AACA,aAAO,OAAO,CAAC,OAAR,EAAP;AACD,KAjBD;;AAjCE,SAAK,UAAL,GAAkB,KAAlB;AACD;;AAEY,MAAT,SAAS,GAAA;AACX,WAAO,KAAK,UAAZ;AACD;;AAEc,MAAX,WAAW,GAAA;AACb,WAAO,KAAP;AACD;;AAEM,EAAA,mBAAmB,CACxB,YADwB,EACG;AAE3B,UAAM,MAAM,GAAG,KAAK,OAApB;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,OAAO,CAAC,OAAR,CAAgB,YAAhB,CAAP;AACD;;AACD,WAAO,MAAM,CAAC,mBAAP,CAA2B,YAA3B,CAAP;AACD;;AAEY,MAAT,SAAS,GAAA;;;AACX,WAAO,CAAA,EAAA,GAAA,KAAK,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,OAAA,CAAA,kBAA1B;AACD;;AAEK,EAAA,eAAe,CAAC,WAAD,EAAyB;;AAC5C,YAAM,MAAM,GAAG,KAAK,OAApB;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,eAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD;;AACD,aAAO,MAAM,CAAC,eAAP,CAAuB,WAAvB,CAAP;AACD,K;AAAA;;AAqBD,EAAA,UAAU,GAAA;AACR,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,OAAL,GAAe,SAAf;AACA,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,UAAL,GAAkB,SAAlB;AACA,WAAK,UAAL,GAAkB,KAAlB;AACA,WAAK,IAAL,CAAU,YAAV;AACD;AACF;;AApE+C;;AAAlD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecretKeyAdapter = void 0;\nconst tslib_1 = require(\"tslib\");\nconst solana_contrib_1 = require(\"@saberhq/solana-contrib\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst eventemitter3_1 = (0, tslib_1.__importDefault)(require(\"eventemitter3\"));\nconst types_1 = require(\"../types\");\nclass SecretKeyAdapter extends eventemitter3_1.default {\n    constructor() {\n        super();\n        this.connect = (args) => {\n            const argsTyped = args;\n            const secretKey = argsTyped === null || argsTyped === void 0 ? void 0 : argsTyped.secretKey;\n            if (!secretKey || !Array.isArray(secretKey)) {\n                throw new Error(\"Secret key missing.\");\n            }\n            this._wallet = new solana_contrib_1.SignerWallet(web3_js_1.Keypair.fromSecretKey(Uint8Array.from(secretKey)));\n            this._publicKey = this._wallet.publicKey;\n            this._connected = true;\n            this.emit(\"connect\", this.publicKey);\n            return Promise.resolve();\n        };\n        this._connected = false;\n    }\n    get connected() {\n        return this._connected;\n    }\n    get autoApprove() {\n        return false;\n    }\n    signAllTransactions(transactions) {\n        const wallet = this._wallet;\n        if (!wallet) {\n            return Promise.resolve(transactions);\n        }\n        return wallet.signAllTransactions(transactions);\n    }\n    get publicKey() {\n        var _a;\n        return (_a = this._publicKey) !== null && _a !== void 0 ? _a : types_1.DEFAULT_PUBLIC_KEY;\n    }\n    signTransaction(transaction) {\n        return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n            const wallet = this._wallet;\n            if (!wallet) {\n                return Promise.resolve(transaction);\n            }\n            return wallet.signTransaction(transaction);\n        });\n    }\n    disconnect() {\n        if (this._wallet) {\n            this._wallet = undefined;\n            this._publicKey = undefined;\n            this._publicKey = undefined;\n            this._connected = false;\n            this.emit(\"disconnect\");\n        }\n    }\n}\nexports.SecretKeyAdapter = SecretKeyAdapter;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}