{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fraction = exports.Big = exports.Decimal = void 0;\n\nconst big_js_1 = __importDefault(require(\"big.js\"));\n\nconst decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\n\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\n\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\n\nconst toformat_1 = __importDefault(require(\"toformat\"));\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\"); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\n\nexports.Decimal = (0, toformat_1.default)(decimal_js_light_1.default); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\nexports.Big = (0, toformat_1.default)(big_js_1.default);\nconst toSignificantRounding = {\n  [constants_1.Rounding.ROUND_DOWN]: decimal_js_light_1.default.ROUND_DOWN,\n  [constants_1.Rounding.ROUND_HALF_UP]: decimal_js_light_1.default.ROUND_HALF_UP,\n  [constants_1.Rounding.ROUND_UP]: decimal_js_light_1.default.ROUND_UP\n};\nconst toFixedRounding = {\n  [constants_1.Rounding.ROUND_DOWN]: 0\n  /* RoundDown */\n  ,\n  [constants_1.Rounding.ROUND_HALF_UP]: 1\n  /* RoundHalfUp */\n  ,\n  [constants_1.Rounding.ROUND_UP]: 3\n  /* RoundUp */\n\n};\n/**\n * Number with an integer numerator and denominator.\n */\n\nclass Fraction {\n  constructor(numerator, denominator = jsbi_1.default.BigInt(1)) {\n    /**\n     * This boolean checks to see if this is actually a {@link Fraction}.\n     */\n    this.isFraction = true;\n    this.numerator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(numerator));\n    this.denominator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(denominator));\n  }\n  /**\n   * Returns true if the other object is a {@link Fraction}.\n   *\n   * @param other\n   * @returns\n   */\n\n\n  static isFraction(other) {\n    return typeof other === \"object\" && other !== null && \"numerator\" in other && \"denominator\" in other;\n  }\n  /**\n   * Parses a {@link Fraction} from a float.\n   * @param number Number to parse.\n   * @param decimals Number of decimals of precision. (default 10)\n   * @returns Fraction\n   */\n\n\n  static fromNumber(number, decimals = 10) {\n    const multiplier = Math.pow(10, decimals);\n    return new Fraction(Math.floor(number * multiplier), multiplier);\n  }\n  /**\n   * Attempts to parse a {@link Fraction}.\n   * @param fractionish Fraction or BigintIsh.\n   * @returns\n   */\n\n\n  static tryParseFraction(fractionish) {\n    if (Fraction.isFraction(fractionish)) {\n      return fractionish;\n    }\n\n    try {\n      return new Fraction((0, utils_1.parseBigintIsh)(fractionish));\n    } catch (e) {\n      if (e instanceof Error) {\n        throw new Error(`Could not parse fraction: ${e.message}`);\n      }\n\n      throw new Error(`Could not parse fraction`);\n    }\n  } // performs floor division\n\n\n  get quotient() {\n    return jsbi_1.default.divide(this.numerator, this.denominator);\n  } // remainder after floor division\n\n\n  get remainder() {\n    return new Fraction(jsbi_1.default.remainder(this.numerator, this.denominator), this.denominator);\n  }\n\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n\n  add(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n\n    if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(jsbi_1.default.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(jsbi_1.default.add(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  subtract(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n\n    if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(jsbi_1.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(jsbi_1.default.subtract(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  lessThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return jsbi_1.default.lessThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  equalTo(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return jsbi_1.default.equal(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  greaterThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return jsbi_1.default.greaterThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n  }\n\n  multiply(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.numerator), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n  }\n\n  divide(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(this.denominator, otherParsed.numerator));\n  }\n\n  toSignificant(significantDigits, format = {\n    groupSeparator: \"\"\n  }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n    (0, tiny_invariant_1.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    (0, tiny_invariant_1.default)(significantDigits > 0, `${significantDigits} is not positive.`);\n    exports.Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    const quotient = new exports.Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n\n  toFixed(decimalPlaces, format = {\n    groupSeparator: \"\"\n  }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n    (0, tiny_invariant_1.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    (0, tiny_invariant_1.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n    exports.Big.DP = decimalPlaces;\n    exports.Big.RM = toFixedRounding[rounding];\n    return new exports.Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n\n\n  get asFraction() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n\n}\n\nexports.Fraction = Fraction;\nFraction.ZERO = new Fraction(0);\nFraction.ONE = new Fraction(0);","map":{"version":3,"sources":["../src/fraction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fraction = exports.Big = exports.Decimal = void 0;\nconst big_js_1 = __importDefault(require(\"big.js\"));\nconst decimal_js_light_1 = __importDefault(require(\"decimal.js-light\"));\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst tiny_invariant_1 = __importDefault(require(\"tiny-invariant\"));\nconst toformat_1 = __importDefault(require(\"toformat\"));\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexports.Decimal = (0, toformat_1.default)(decimal_js_light_1.default);\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nexports.Big = (0, toformat_1.default)(big_js_1.default);\nconst toSignificantRounding = {\n    [constants_1.Rounding.ROUND_DOWN]: decimal_js_light_1.default.ROUND_DOWN,\n    [constants_1.Rounding.ROUND_HALF_UP]: decimal_js_light_1.default.ROUND_HALF_UP,\n    [constants_1.Rounding.ROUND_UP]: decimal_js_light_1.default.ROUND_UP,\n};\nconst toFixedRounding = {\n    [constants_1.Rounding.ROUND_DOWN]: 0 /* RoundDown */,\n    [constants_1.Rounding.ROUND_HALF_UP]: 1 /* RoundHalfUp */,\n    [constants_1.Rounding.ROUND_UP]: 3 /* RoundUp */,\n};\n/**\n * Number with an integer numerator and denominator.\n */\nclass Fraction {\n    constructor(numerator, denominator = jsbi_1.default.BigInt(1)) {\n        /**\n         * This boolean checks to see if this is actually a {@link Fraction}.\n         */\n        this.isFraction = true;\n        this.numerator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(numerator));\n        this.denominator = jsbi_1.default.BigInt((0, utils_1.parseBigintIsh)(denominator));\n    }\n    /**\n     * Returns true if the other object is a {@link Fraction}.\n     *\n     * @param other\n     * @returns\n     */\n    static isFraction(other) {\n        return (typeof other === \"object\" &&\n            other !== null &&\n            \"numerator\" in other &&\n            \"denominator\" in other);\n    }\n    /**\n     * Parses a {@link Fraction} from a float.\n     * @param number Number to parse.\n     * @param decimals Number of decimals of precision. (default 10)\n     * @returns Fraction\n     */\n    static fromNumber(number, decimals = 10) {\n        const multiplier = Math.pow(10, decimals);\n        return new Fraction(Math.floor(number * multiplier), multiplier);\n    }\n    /**\n     * Attempts to parse a {@link Fraction}.\n     * @param fractionish Fraction or BigintIsh.\n     * @returns\n     */\n    static tryParseFraction(fractionish) {\n        if (Fraction.isFraction(fractionish)) {\n            return fractionish;\n        }\n        try {\n            return new Fraction((0, utils_1.parseBigintIsh)(fractionish));\n        }\n        catch (e) {\n            if (e instanceof Error) {\n                throw new Error(`Could not parse fraction: ${e.message}`);\n            }\n            throw new Error(`Could not parse fraction`);\n        }\n    }\n    // performs floor division\n    get quotient() {\n        return jsbi_1.default.divide(this.numerator, this.denominator);\n    }\n    // remainder after floor division\n    get remainder() {\n        return new Fraction(jsbi_1.default.remainder(this.numerator, this.denominator), this.denominator);\n    }\n    invert() {\n        return new Fraction(this.denominator, this.numerator);\n    }\n    add(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi_1.default.add(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi_1.default.add(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    subtract(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        if (jsbi_1.default.equal(this.denominator, otherParsed.denominator)) {\n            return new Fraction(jsbi_1.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n        }\n        return new Fraction(jsbi_1.default.subtract(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator)), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    lessThan(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.lessThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    equalTo(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.equal(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    greaterThan(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return jsbi_1.default.greaterThan(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(otherParsed.numerator, this.denominator));\n    }\n    multiply(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.numerator), jsbi_1.default.multiply(this.denominator, otherParsed.denominator));\n    }\n    divide(other) {\n        const otherParsed = Fraction.tryParseFraction(other);\n        return new Fraction(jsbi_1.default.multiply(this.numerator, otherParsed.denominator), jsbi_1.default.multiply(this.denominator, otherParsed.numerator));\n    }\n    toSignificant(significantDigits, format = { groupSeparator: \"\" }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n        (0, tiny_invariant_1.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n        (0, tiny_invariant_1.default)(significantDigits > 0, `${significantDigits} is not positive.`);\n        exports.Decimal.set({\n            precision: significantDigits + 1,\n            rounding: toSignificantRounding[rounding],\n        });\n        const quotient = new exports.Decimal(this.numerator.toString())\n            .div(this.denominator.toString())\n            .toSignificantDigits(significantDigits);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n        return quotient.toFormat(quotient.decimalPlaces(), format);\n    }\n    toFixed(decimalPlaces, format = { groupSeparator: \"\" }, rounding = constants_1.Rounding.ROUND_HALF_UP) {\n        (0, tiny_invariant_1.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n        (0, tiny_invariant_1.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n        exports.Big.DP = decimalPlaces;\n        exports.Big.RM = toFixedRounding[rounding];\n        return new exports.Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n    }\n    /**\n     * Helper method for converting any super class back to a fraction\n     */\n    get asFraction() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n}\nexports.Fraction = Fraction;\nFraction.ZERO = new Fraction(0);\nFraction.ONE = new Fraction(0);\n//# sourceMappingURL=fraction.js.map"]},"metadata":{},"sourceType":"script"}