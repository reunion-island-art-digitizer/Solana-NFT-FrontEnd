{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionReceipt = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst tiny_invariant_1 = (0, tslib_1.__importDefault)(require(\"tiny-invariant\"));\n/**\n * A transaction that has been processed by the cluster.\n */\n\nclass TransactionReceipt {\n  constructor(\n  /**\n   * Signature (id) of the transaction.\n   */\n  signature,\n  /**\n   * Raw response from web3.js\n   */\n  response) {\n    this.signature = signature;\n    this.response = response;\n  }\n  /**\n   * Gets the events associated with this transaction.\n   */\n\n\n  getEvents(eventParser) {\n    var _a;\n\n    const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n\n    if (logs && logs.length > 0) {\n      return eventParser(logs);\n    }\n\n    return [];\n  }\n  /**\n   * Prints the logs associated with this transaction.\n   */\n\n\n  printLogs() {\n    var _a, _b;\n\n    console.log((_b = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages) === null || _b === void 0 ? void 0 : _b.join(\"\\n\"));\n  }\n  /**\n   * Gets the compute units used by the transaction.\n   * @returns\n   */\n\n\n  get computeUnits() {\n    var _a;\n\n    const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n    (0, tiny_invariant_1.default)(logs, \"no logs\");\n    const consumeLog = logs[logs.length - 2];\n    (0, tiny_invariant_1.default)(consumeLog, \"no consume log\");\n    const amtStr = consumeLog.split(\" \")[3];\n    (0, tiny_invariant_1.default)(amtStr, \"no amount\");\n    return parseInt(amtStr);\n  }\n\n}\n\nexports.TransactionReceipt = TransactionReceipt;","map":{"version":3,"sources":["../../src/transaction/TransactionReceipt.ts"],"names":[],"mappings":";;;;;;;;;AAIA,MAAA,gBAAA,GAAA,CAAA,GAAA,OAAA,CAAA,eAAA,EAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;AAIA;;AAEG;;AACH,MAAa,kBAAb,CAA+B;AAC7B,EAAA,WAAA;AACE;;AAEG;AACa,EAAA,SAJlB;AAKE;;AAEG;AACa,EAAA,QARlB,EAQ+C;AAJ7B,SAAA,SAAA,GAAA,SAAA;AAIA,SAAA,QAAA,GAAA,QAAA;AACd;AAEJ;;AAEG;;;AACI,EAAA,SAAS,CAAkB,WAAlB,EAA6C;;;AAC3D,UAAM,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAAjC;;AACA,QAAI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAA1B,EAA6B;AAC3B,aAAO,WAAW,CAAC,IAAD,CAAlB;AACD;;AACD,WAAO,EAAP;AACD;AAED;;AAEG;;;AACI,EAAA,SAAS,GAAA;;;AACd,IAAA,OAAO,CAAC,GAAR,CAAY,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAApB,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,KAAA,CAA/B,GAA+B,EAAA,CAAE,IAAF,CAAO,IAAP,CAA3C;AACD;AAED;;;AAGG;;;AACoB,MAAZ,YAAY,GAAA;;;AACrB,UAAM,IAAI,GAAG,CAAA,EAAA,GAAA,KAAK,QAAL,CAAc,IAAd,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,WAAjC;AACA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,IAAV,EAAgB,SAAhB;AACA,UAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAvB;AACA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,UAAV,EAAsB,gBAAtB;AACA,UAAM,MAAM,GAAG,UAAU,CAAC,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAf;AACA,KAAA,GAAA,gBAAA,CAAA,OAAA,EAAU,MAAV,EAAkB,WAAlB;AACA,WAAO,QAAQ,CAAC,MAAD,CAAf;AACD;;AA1C4B;;AAA/B,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionReceipt = void 0;\nconst tslib_1 = require(\"tslib\");\nconst tiny_invariant_1 = (0, tslib_1.__importDefault)(require(\"tiny-invariant\"));\n/**\n * A transaction that has been processed by the cluster.\n */\nclass TransactionReceipt {\n    constructor(\n    /**\n     * Signature (id) of the transaction.\n     */\n    signature, \n    /**\n     * Raw response from web3.js\n     */\n    response) {\n        this.signature = signature;\n        this.response = response;\n    }\n    /**\n     * Gets the events associated with this transaction.\n     */\n    getEvents(eventParser) {\n        var _a;\n        const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n        if (logs && logs.length > 0) {\n            return eventParser(logs);\n        }\n        return [];\n    }\n    /**\n     * Prints the logs associated with this transaction.\n     */\n    printLogs() {\n        var _a, _b;\n        console.log((_b = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages) === null || _b === void 0 ? void 0 : _b.join(\"\\n\"));\n    }\n    /**\n     * Gets the compute units used by the transaction.\n     * @returns\n     */\n    get computeUnits() {\n        var _a;\n        const logs = (_a = this.response.meta) === null || _a === void 0 ? void 0 : _a.logMessages;\n        (0, tiny_invariant_1.default)(logs, \"no logs\");\n        const consumeLog = logs[logs.length - 2];\n        (0, tiny_invariant_1.default)(consumeLog, \"no consume log\");\n        const amtStr = consumeLog.split(\" \")[3];\n        (0, tiny_invariant_1.default)(amtStr, \"no amount\");\n        return parseInt(amtStr);\n    }\n}\nexports.TransactionReceipt = TransactionReceipt;\n//# sourceMappingURL=TransactionReceipt.js.map"]},"metadata":{},"sourceType":"script"}