{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignerWallet = void 0;\n\nconst provider_1 = require(\"./provider\");\n/**\n * Wallet based on a Signer.\n */\n\n\nclass SignerWallet {\n  constructor(signer) {\n    this.signer = signer;\n  }\n\n  get publicKey() {\n    return this.signer.publicKey;\n  }\n\n  signAllTransactions(transactions) {\n    return Promise.resolve(transactions.map(tx => {\n      tx.partialSign(this.signer);\n      return tx;\n    }));\n  }\n\n  signTransaction(transaction) {\n    transaction.partialSign(this.signer);\n    return Promise.resolve(transaction);\n  }\n  /**\n   * Creates a Provider from this Wallet by adding a Connection.\n   * @param connection\n   * @returns\n   */\n\n\n  createProvider(connection, sendConnection, opts) {\n    return provider_1.SolanaProvider.load({\n      connection,\n      sendConnection,\n      wallet: this,\n      opts\n    });\n  }\n\n}\n\nexports.SignerWallet = SignerWallet;","map":{"version":3,"sources":["../src/wallet.ts"],"names":[],"mappings":";;;;;;;AASA,MAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,YAAb,CAAyB;AACvB,EAAA,WAAA,CAA4B,MAA5B,EAA0C;AAAd,SAAA,MAAA,GAAA,MAAA;AAAkB;;AAEjC,MAAT,SAAS,GAAA;AACX,WAAO,KAAK,MAAL,CAAY,SAAnB;AACD;;AAED,EAAA,mBAAmB,CAAC,YAAD,EAA4B;AAC7C,WAAO,OAAO,CAAC,OAAR,CACL,YAAY,CAAC,GAAb,CAAkB,EAAD,IAAO;AACtB,MAAA,EAAE,CAAC,WAAH,CAAe,KAAK,MAApB;AACA,aAAO,EAAP;AACD,KAHD,CADK,CAAP;AAMD;;AAED,EAAA,eAAe,CAAC,WAAD,EAAyB;AACtC,IAAA,WAAW,CAAC,WAAZ,CAAwB,KAAK,MAA7B;AACA,WAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACD;AAED;;;;AAIG;;;AACH,EAAA,cAAc,CACZ,UADY,EAEZ,cAFY,EAGZ,IAHY,EAGS;AAErB,WAAO,UAAA,CAAA,cAAA,CAAe,IAAf,CAAoB;AACzB,MAAA,UADyB;AAEzB,MAAA,cAFyB;AAGzB,MAAA,MAAM,EAAE,IAHiB;AAIzB,MAAA;AAJyB,KAApB,CAAP;AAMD;;AArCsB;;AAAzB,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SignerWallet = void 0;\nconst provider_1 = require(\"./provider\");\n/**\n * Wallet based on a Signer.\n */\nclass SignerWallet {\n    constructor(signer) {\n        this.signer = signer;\n    }\n    get publicKey() {\n        return this.signer.publicKey;\n    }\n    signAllTransactions(transactions) {\n        return Promise.resolve(transactions.map((tx) => {\n            tx.partialSign(this.signer);\n            return tx;\n        }));\n    }\n    signTransaction(transaction) {\n        transaction.partialSign(this.signer);\n        return Promise.resolve(transaction);\n    }\n    /**\n     * Creates a Provider from this Wallet by adding a Connection.\n     * @param connection\n     * @returns\n     */\n    createProvider(connection, sendConnection, opts) {\n        return provider_1.SolanaProvider.load({\n            connection,\n            sendConnection,\n            wallet: this,\n            opts,\n        });\n    }\n}\nexports.SignerWallet = SignerWallet;\n//# sourceMappingURL=wallet.js.map"]},"metadata":{},"sourceType":"script"}