{"ast":null,"code":"\"use strict\";\n/**\n * This file is a port of serum-common, which was built for web3.js 0.x.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sleep = exports.getTokenAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.token = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst spl_token_1 = require(\"@solana/spl-token\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst _1 = require(\".\");\n\nexports.token = (0, tslib_1.__importStar)(require(\"./token\"));\nexports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey(\"shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL\");\n\nfunction createMint(provider, authority, decimals) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    if (authority === undefined) {\n      authority = provider.wallet.publicKey;\n    }\n\n    const mint = web3_js_1.Keypair.generate();\n    const instructions = yield createMintInstructions(provider, authority, mint.publicKey, decimals);\n    const tx = new web3_js_1.Transaction();\n    tx.add(...instructions);\n    yield provider.send(tx, [mint]);\n    return mint.publicKey;\n  });\n}\n\nexports.createMint = createMint;\n\nfunction createMintInstructions(provider, authority, mint, decimals = 6) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const instructions = [web3_js_1.SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: mint,\n      space: 82,\n      lamports: yield provider.connection.getMinimumBalanceForRentExemption(82),\n      programId: spl_token_1.TOKEN_PROGRAM_ID\n    }), spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, decimals, authority, null)];\n    return instructions;\n  });\n}\n\nexports.createMintInstructions = createMintInstructions;\n\nfunction createMintAndVault(provider, amount, owner, decimals) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    if (owner === undefined) {\n      owner = provider.wallet.publicKey;\n    }\n\n    const mint = web3_js_1.Keypair.generate();\n    const vault = web3_js_1.Keypair.generate();\n    const tx = new web3_js_1.Transaction();\n    tx.add(...(yield createMintInstructions(provider, provider.wallet.publicKey, mint.publicKey, decimals)), web3_js_1.SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: vault.publicKey,\n      space: 165,\n      lamports: yield provider.connection.getMinimumBalanceForRentExemption(165),\n      programId: spl_token_1.TOKEN_PROGRAM_ID\n    }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, owner), spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, provider.wallet.publicKey, [], amount));\n    yield provider.send(tx, [mint, vault]);\n    return [mint.publicKey, vault.publicKey];\n  });\n}\n\nexports.createMintAndVault = createMintAndVault;\n\nfunction createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    if (lamports === undefined) {\n      lamports = yield provider.connection.getMinimumBalanceForRentExemption(165);\n    }\n\n    return [web3_js_1.SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey,\n      space: 165,\n      lamports,\n      programId: spl_token_1.TOKEN_PROGRAM_ID\n    }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, newAccountPubkey, owner)];\n  });\n}\n\nexports.createTokenAccountInstrs = createTokenAccountInstrs;\n\nfunction createAccountRentExempt(provider, programId, size) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const acc = web3_js_1.Keypair.generate();\n    const tx = new web3_js_1.Transaction();\n    tx.add(web3_js_1.SystemProgram.createAccount({\n      fromPubkey: provider.wallet.publicKey,\n      newAccountPubkey: acc.publicKey,\n      space: size,\n      lamports: yield provider.connection.getMinimumBalanceForRentExemption(size),\n      programId\n    }));\n    yield provider.send(tx, [acc]);\n    return acc;\n  });\n}\n\nexports.createAccountRentExempt = createAccountRentExempt;\n\nfunction getMintInfo(provider, addr) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n\n    if (depositorAccInfo === null) {\n      throw new Error(\"Failed to find token account\");\n    }\n\n    return (0, _1.deserializeMint)(depositorAccInfo.data);\n  });\n}\n\nexports.getMintInfo = getMintInfo;\n\nfunction getTokenAccount(provider, addr) {\n  return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n    const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n\n    if (depositorAccInfo === null) {\n      throw new Error(\"Failed to find token account\");\n    }\n\n    return (0, _1.deserializeAccount)(depositorAccInfo.data);\n  });\n}\n\nexports.getTokenAccount = getTokenAccount;\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexports.sleep = sleep;","map":{"version":3,"sources":["../src/common.ts"],"names":[],"mappings":";AAAA;;AAEG;;;;;;;;;AAIH,MAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAQA,MAAA,EAAA,GAAA,OAAA,CAAA,GAAA,CAAA;;AAEA,OAAA,CAAA,KAAA,GAAA,CAAA,GAAA,OAAA,CAAA,YAAA,EAAA,OAAA,CAAA,SAAA,CAAA,CAAA;AAEa,OAAA,CAAA,oBAAA,GAAuB,IAAI,SAAA,CAAA,SAAJ,CAClC,6CADkC,CAAvB;;AAIb,SAAsB,UAAtB,CACE,QADF,EAEE,SAFF,EAGE,QAHF,EAGmB;;AAEjB,QAAI,SAAS,KAAK,SAAlB,EAA6B;AAC3B,MAAA,SAAS,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAA5B;AACD;;AACD,UAAM,IAAI,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR,EAAb;AACA,UAAM,YAAY,GAAG,MAAM,sBAAsB,CAC/C,QAD+C,EAE/C,SAF+C,EAG/C,IAAI,CAAC,SAH0C,EAI/C,QAJ+C,CAAjD;AAOA,UAAM,EAAE,GAAG,IAAI,SAAA,CAAA,WAAJ,EAAX;AACA,IAAA,EAAE,CAAC,GAAH,CAAO,GAAG,YAAV;AAEA,UAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,CAAC,IAAD,CAAlB,CAAN;AAEA,WAAO,IAAI,CAAC,SAAZ;AACD,G;AAAA;;AAtBD,OAAA,CAAA,UAAA,GAAA,UAAA;;AAwBA,SAAsB,sBAAtB,CACE,QADF,EAEE,SAFF,EAGE,IAHF,EAIE,QAAQ,GAAG,CAJb,EAIc;;AAEZ,UAAM,YAAY,GAAG,CACnB,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,MAAA,UAAU,EAAE,QAAQ,CAAC,MAAT,CAAgB,SADF;AAE1B,MAAA,gBAAgB,EAAE,IAFQ;AAG1B,MAAA,KAAK,EAAE,EAHmB;AAI1B,MAAA,QAAQ,EAAE,MAAM,QAAQ,CAAC,UAAT,CAAoB,iCAApB,CAAsD,EAAtD,CAJU;AAK1B,MAAA,SAAS,EAAE,WAAA,CAAA;AALe,KAA5B,CADmB,EAQnB,WAAA,CAAA,KAAA,CAAM,yBAAN,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,QAHF,EAIE,SAJF,EAKE,IALF,CARmB,CAArB;AAgBA,WAAO,YAAP;AACD,G;AAAA;;AAvBD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAyBA,SAAsB,kBAAtB,CACE,QADF,EAEE,MAFF,EAGE,KAHF,EAIE,QAJF,EAImB;;AAEjB,QAAI,KAAK,KAAK,SAAd,EAAyB;AACvB,MAAA,KAAK,GAAG,QAAQ,CAAC,MAAT,CAAgB,SAAxB;AACD;;AACD,UAAM,IAAI,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR,EAAb;AACA,UAAM,KAAK,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR,EAAd;AACA,UAAM,EAAE,GAAG,IAAI,SAAA,CAAA,WAAJ,EAAX;AACA,IAAA,EAAE,CAAC,GAAH,CACE,IAAI,MAAM,sBAAsB,CAC9B,QAD8B,EAE9B,QAAQ,CAAC,MAAT,CAAgB,SAFc,EAG9B,IAAI,CAAC,SAHyB,EAI9B,QAJ8B,CAAhC,CADF,EAOE,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,MAAA,UAAU,EAAE,QAAQ,CAAC,MAAT,CAAgB,SADF;AAE1B,MAAA,gBAAgB,EAAE,KAAK,CAAC,SAFE;AAG1B,MAAA,KAAK,EAAE,GAHmB;AAI1B,MAAA,QAAQ,EAAE,MAAM,QAAQ,CAAC,UAAT,CAAoB,iCAApB,CACd,GADc,CAJU;AAO1B,MAAA,SAAS,EAAE,WAAA,CAAA;AAPe,KAA5B,CAPF,EAgBE,WAAA,CAAA,KAAA,CAAM,4BAAN,CACE,WAAA,CAAA,gBADF,EAEE,IAAI,CAAC,SAFP,EAGE,KAAK,CAAC,SAHR,EAIE,KAJF,CAhBF,EAsBE,WAAA,CAAA,KAAA,CAAM,uBAAN,CACE,WAAA,CAAA,gBADF,EAEE,IAAI,CAAC,SAFP,EAGE,KAAK,CAAC,SAHR,EAIE,QAAQ,CAAC,MAAT,CAAgB,SAJlB,EAKE,EALF,EAME,MANF,CAtBF;AA+BA,UAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,CAAC,IAAD,EAAO,KAAP,CAAlB,CAAN;AACA,WAAO,CAAC,IAAI,CAAC,SAAN,EAAiB,KAAK,CAAC,SAAvB,CAAP;AACD,G;AAAA;;AA7CD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AA+CA,SAAsB,wBAAtB,CACE,QADF,EAEE,gBAFF,EAGE,IAHF,EAIE,KAJF,EAKE,QALF,EAKmB;;AAEjB,QAAI,QAAQ,KAAK,SAAjB,EAA4B;AAC1B,MAAA,QAAQ,GAAG,MAAM,QAAQ,CAAC,UAAT,CAAoB,iCAApB,CAAsD,GAAtD,CAAjB;AACD;;AACD,WAAO,CACL,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,MAAA,UAAU,EAAE,QAAQ,CAAC,MAAT,CAAgB,SADF;AAE1B,MAAA,gBAF0B;AAG1B,MAAA,KAAK,EAAE,GAHmB;AAI1B,MAAA,QAJ0B;AAK1B,MAAA,SAAS,EAAE,WAAA,CAAA;AALe,KAA5B,CADK,EAQL,WAAA,CAAA,KAAA,CAAM,4BAAN,CACE,WAAA,CAAA,gBADF,EAEE,IAFF,EAGE,gBAHF,EAIE,KAJF,CARK,CAAP;AAeD,G;AAAA;;AAzBD,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AA2BA,SAAsB,uBAAtB,CACE,QADF,EAEE,SAFF,EAGE,IAHF,EAGc;;AAEZ,UAAM,GAAG,GAAG,SAAA,CAAA,OAAA,CAAQ,QAAR,EAAZ;AACA,UAAM,EAAE,GAAG,IAAI,SAAA,CAAA,WAAJ,EAAX;AACA,IAAA,EAAE,CAAC,GAAH,CACE,SAAA,CAAA,aAAA,CAAc,aAAd,CAA4B;AAC1B,MAAA,UAAU,EAAE,QAAQ,CAAC,MAAT,CAAgB,SADF;AAE1B,MAAA,gBAAgB,EAAE,GAAG,CAAC,SAFI;AAG1B,MAAA,KAAK,EAAE,IAHmB;AAI1B,MAAA,QAAQ,EAAE,MAAM,QAAQ,CAAC,UAAT,CAAoB,iCAApB,CACd,IADc,CAJU;AAO1B,MAAA;AAP0B,KAA5B,CADF;AAWA,UAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,CAAC,GAAD,CAAlB,CAAN;AACA,WAAO,GAAP;AACD,G;AAAA;;AApBD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAsBA,SAAsB,WAAtB,CACE,QADF,EAEE,IAFF,EAEiB;;AAEf,UAAM,gBAAgB,GAAG,MAAM,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAmC,IAAnC,CAA/B;;AACA,QAAI,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO,CAAA,GAAA,EAAA,CAAA,eAAA,EAAgB,gBAAgB,CAAC,IAAjC,CAAP;AACD,G;AAAA;;AATD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAWA,SAAsB,eAAtB,CACE,QADF,EAEE,IAFF,EAEiB;;AAEf,UAAM,gBAAgB,GAAG,MAAM,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAmC,IAAnC,CAA/B;;AACA,QAAI,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,8BAAV,CAAN;AACD;;AACD,WAAO,CAAA,GAAA,EAAA,CAAA,kBAAA,EAAmB,gBAAgB,CAAC,IAApC,CAAP;AACD,G;AAAA;;AATD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAWA,SAAgB,KAAhB,CAAsB,EAAtB,EAAgC;AAC9B,SAAO,IAAI,OAAJ,CAAa,OAAD,IAAa,UAAU,CAAC,OAAD,EAAU,EAAV,CAAnC,CAAP;AACD;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * This file is a port of serum-common, which was built for web3.js 0.x.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sleep = exports.getTokenAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.token = void 0;\nconst tslib_1 = require(\"tslib\");\nconst spl_token_1 = require(\"@solana/spl-token\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst _1 = require(\".\");\nexports.token = (0, tslib_1.__importStar)(require(\"./token\"));\nexports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey(\"shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL\");\nfunction createMint(provider, authority, decimals) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (authority === undefined) {\n            authority = provider.wallet.publicKey;\n        }\n        const mint = web3_js_1.Keypair.generate();\n        const instructions = yield createMintInstructions(provider, authority, mint.publicKey, decimals);\n        const tx = new web3_js_1.Transaction();\n        tx.add(...instructions);\n        yield provider.send(tx, [mint]);\n        return mint.publicKey;\n    });\n}\nexports.createMint = createMint;\nfunction createMintInstructions(provider, authority, mint, decimals = 6) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const instructions = [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: provider.wallet.publicKey,\n                newAccountPubkey: mint,\n                space: 82,\n                lamports: yield provider.connection.getMinimumBalanceForRentExemption(82),\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, decimals, authority, null),\n        ];\n        return instructions;\n    });\n}\nexports.createMintInstructions = createMintInstructions;\nfunction createMintAndVault(provider, amount, owner, decimals) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (owner === undefined) {\n            owner = provider.wallet.publicKey;\n        }\n        const mint = web3_js_1.Keypair.generate();\n        const vault = web3_js_1.Keypair.generate();\n        const tx = new web3_js_1.Transaction();\n        tx.add(...(yield createMintInstructions(provider, provider.wallet.publicKey, mint.publicKey, decimals)), web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey: vault.publicKey,\n            space: 165,\n            lamports: yield provider.connection.getMinimumBalanceForRentExemption(165),\n            programId: spl_token_1.TOKEN_PROGRAM_ID,\n        }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, owner), spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, provider.wallet.publicKey, [], amount));\n        yield provider.send(tx, [mint, vault]);\n        return [mint.publicKey, vault.publicKey];\n    });\n}\nexports.createMintAndVault = createMintAndVault;\nfunction createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        if (lamports === undefined) {\n            lamports = yield provider.connection.getMinimumBalanceForRentExemption(165);\n        }\n        return [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: provider.wallet.publicKey,\n                newAccountPubkey,\n                space: 165,\n                lamports,\n                programId: spl_token_1.TOKEN_PROGRAM_ID,\n            }),\n            spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, newAccountPubkey, owner),\n        ];\n    });\n}\nexports.createTokenAccountInstrs = createTokenAccountInstrs;\nfunction createAccountRentExempt(provider, programId, size) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const acc = web3_js_1.Keypair.generate();\n        const tx = new web3_js_1.Transaction();\n        tx.add(web3_js_1.SystemProgram.createAccount({\n            fromPubkey: provider.wallet.publicKey,\n            newAccountPubkey: acc.publicKey,\n            space: size,\n            lamports: yield provider.connection.getMinimumBalanceForRentExemption(size),\n            programId,\n        }));\n        yield provider.send(tx, [acc]);\n        return acc;\n    });\n}\nexports.createAccountRentExempt = createAccountRentExempt;\nfunction getMintInfo(provider, addr) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n        if (depositorAccInfo === null) {\n            throw new Error(\"Failed to find token account\");\n        }\n        return (0, _1.deserializeMint)(depositorAccInfo.data);\n    });\n}\nexports.getMintInfo = getMintInfo;\nfunction getTokenAccount(provider, addr) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {\n        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);\n        if (depositorAccInfo === null) {\n            throw new Error(\"Failed to find token account\");\n        }\n        return (0, _1.deserializeAccount)(depositorAccInfo.data);\n    });\n}\nexports.getTokenAccount = getTokenAccount;\nfunction sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\nexports.sleep = sleep;\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"script"}