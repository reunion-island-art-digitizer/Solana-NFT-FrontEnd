import type { Network } from "@saberhq/solana-contrib";
import type { PublicKey } from "@solana/web3.js";
import type { WalletAdapter } from "../adapters/types";
import type { UseSolanaError } from "../error";
import type { WalletProviderInfo, WalletType } from "../providers";
/**
 * Wallet-related information.
 */
export interface UseWallet<T extends boolean = boolean> {
    /**
     * Wallet.
     */
    wallet?: WalletAdapter<T>;
    /**
     * Wallet public key.
     */
    publicKey: T extends true ? PublicKey : undefined;
    /**
     * Information about the wallet used.
     */
    walletProviderInfo?: WalletProviderInfo;
    /**
     * Whether or not the wallet is connected.
     */
    connected: T;
    /**
     * Activates a new wallet.
     */
    activate: (walletType: WalletType, walletArgs?: Record<string, unknown>) => Promise<void>;
    /**
     * Disconnects the wallet and prevents auto-reconnect.
     */
    disconnect: () => void;
}
export interface UseWalletArgs {
    onConnect: (wallet: WalletAdapter<true>, provider: WalletProviderInfo) => void;
    onDisconnect: (wallet: WalletAdapter<false>, provider: WalletProviderInfo) => void;
    onError: (err: UseSolanaError) => void;
    network: Network;
    endpoint: string;
}
export declare const useWalletInternal: ({ onConnect, onDisconnect, network, endpoint, onError, }: UseWalletArgs) => UseWallet<boolean>;
//# sourceMappingURL=useWalletInternal.d.ts.map