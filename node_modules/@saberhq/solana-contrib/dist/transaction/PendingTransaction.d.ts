import type { Connection, Finality, TransactionSignature } from "@solana/web3.js";
import type { OperationOptions } from "retry";
import { TransactionReceipt } from "../transaction";
/**
 * Transaction which may or may not be confirmed.
 */
export declare class PendingTransaction {
    readonly connection: Connection;
    readonly signature: TransactionSignature;
    private _receipt;
    constructor(connection: Connection, signature: TransactionSignature);
    /**
     * Gets the transaction receipt, if it has already been fetched.
     *
     * You probably want the async version of this function, `wait`.
     */
    get receipt(): TransactionReceipt | null;
    /**
     * Waits for the confirmation of the transaction, via polling.
     * @returns
     */
    wait({ commitment, ...retryOpts }?: OperationOptions & {
        commitment: Finality;
    }): Promise<TransactionReceipt>;
}
//# sourceMappingURL=PendingTransaction.d.ts.map