import type { Blockhash, Commitment, ConfirmOptions, Connection, RpcResponseAndContext, SimulatedTransactionResponse, Transaction } from "@solana/web3.js";
import type { Broadcaster } from ".";
import { PendingTransaction } from ".";
/**
 * Broadcasts transactions to a single connection.
 */
export declare class SingleConnectionBroadcaster implements Broadcaster {
    readonly sendConnection: Connection;
    readonly opts: ConfirmOptions;
    constructor(sendConnection: Connection, opts?: ConfirmOptions);
    getRecentBlockhash(commitment?: Commitment): Promise<Blockhash>;
    /**
     * Broadcasts a signed transaction.
     *
     * @param tx
     * @param confirm
     * @param opts
     * @returns
     */
    broadcast(tx: Transaction, opts?: ConfirmOptions): Promise<PendingTransaction>;
    simulate(tx: Transaction, commitment?: Commitment): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;
}
//# sourceMappingURL=broadcaster.d.ts.map