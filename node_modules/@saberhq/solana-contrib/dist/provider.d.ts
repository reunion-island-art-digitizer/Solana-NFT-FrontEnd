import type { Commitment, ConfirmOptions, Connection, KeyedAccountInfo, PublicKey, RpcResponseAndContext, Signer, SimulatedTransactionResponse, Transaction } from "@solana/web3.js";
import type { Broadcaster, PendingTransaction, ReadonlyProvider } from ".";
import type { Provider, SendTxRequest, TransactionSigner, Wallet } from "./interfaces";
export declare const DEFAULT_PROVIDER_OPTIONS: ConfirmOptions;
/**
 * Provider that can only read.
 */
export declare class SolanaReadonlyProvider implements ReadonlyProvider {
    readonly connection: Connection;
    readonly opts: ConfirmOptions;
    /**
     * @param connection The cluster connection where the program is deployed.
     * @param sendConnection The connection where transactions are sent to.
     * @param wallet     The wallet used to pay for and sign all transactions.
     * @param opts       Transaction confirmation options to use by default.
     */
    constructor(connection: Connection, opts?: ConfirmOptions);
    /**
     * Gets
     * @param accountId
     * @returns
     */
    getAccountInfo(accountId: PublicKey): Promise<KeyedAccountInfo | null>;
}
/**
 * Signs Solana transactions.
 */
export declare class SolanaTransactionSigner implements TransactionSigner {
    readonly wallet: Wallet;
    readonly broadcaster: Broadcaster;
    readonly preflightCommitment: Commitment;
    constructor(wallet: Wallet, broadcaster: Broadcaster, preflightCommitment?: Commitment);
    get publicKey(): PublicKey;
    /**
     * Sends the given transaction, paid for and signed by the provider's wallet.
     *
     * @param tx      The transaction to send.
     * @param signers The set of signers in addition to the provdier wallet that
     *                will sign the transaction.
     * @param opts    Transaction confirmation options.
     */
    sign(tx: Transaction, signers?: readonly (Signer | undefined)[], opts?: ConfirmOptions): Promise<Transaction>;
    /**
     * Similar to `send`, but for an array of transactions and signers.
     */
    signAll(reqs: readonly SendTxRequest[], opts?: ConfirmOptions): Promise<Transaction[]>;
}
/**
 * The network and wallet context used to send transactions paid for and signed
 * by the provider.
 *
 * This implementation was taken from Anchor.
 */
export declare class SolanaProvider extends SolanaReadonlyProvider implements Provider {
    readonly connection: Connection;
    readonly broadcaster: Broadcaster;
    readonly wallet: Wallet;
    readonly opts: ConfirmOptions;
    readonly signer: TransactionSigner;
    /**
     * @param connection The cluster connection where the program is deployed.
     * @param sendConnection The connection where transactions are sent to.
     * @param wallet     The wallet used to pay for and sign all transactions.
     * @param opts       Transaction confirmation options to use by default.
     */
    constructor(connection: Connection, broadcaster: Broadcaster, wallet: Wallet, opts?: ConfirmOptions);
    /**
     * Creates a new SolanaProvider.
     */
    static load({ connection, sendConnection, wallet, opts, }: {
        /**
         * Connection used for general reads
         */
        connection: Connection;
        /**
         * Connection used for sending transactions
         */
        sendConnection?: Connection;
        /**
         * Wallet used for signing transactions
         */
        wallet: Wallet;
        /**
         * Confirmation options
         */
        opts?: ConfirmOptions;
    }): SolanaProvider;
    /**
     * Sends the given transaction, paid for and signed by the provider's wallet.
     *
     * @param tx      The transaction to send.
     * @param signers The set of signers in addition to the provdier wallet that
     *                will sign the transaction.
     * @param opts    Transaction confirmation options.
     */
    send(tx: Transaction, signers?: (Signer | undefined)[], opts?: ConfirmOptions): Promise<PendingTransaction>;
    /**
     * Similar to `send`, but for an array of transactions and signers.
     */
    sendAll(reqs: readonly SendTxRequest[], opts?: ConfirmOptions): Promise<PendingTransaction[]>;
    /**
     * Simulates the given transaction, returning emitted logs from execution.
     *
     * @param tx      The transaction to send.
     * @param signers The set of signers in addition to the provdier wallet that
     *                will sign the transaction.
     * @param opts    Transaction confirmation options.
     */
    simulate(tx: Transaction, signers?: (Signer | undefined)[], opts?: ConfirmOptions): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;
}
//# sourceMappingURL=provider.d.ts.map