"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SOL = exports.chainIdToNetwork = exports.networkToChainId = exports.CHAIN_ID_TO_NETWORK = exports.NETWORK_TO_CHAIN_ID = exports.ChainId = exports.makeTokenForAllNetworks = exports.tokensEqual = exports.Token = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
/**
 * Token information.
 */
class Token {
    constructor(info) {
        var _a;
        this.info = info;
        this.mintAccount = new web3_js_1.PublicKey(info.address);
        this.network = (_a = (0, exports.chainIdToNetwork)(info.chainId)) !== null && _a !== void 0 ? _a : "localnet";
    }
    get chainId() {
        return this.info.chainId;
    }
    get decimals() {
        return this.info.decimals;
    }
    get name() {
        return this.info.name;
    }
    get symbol() {
        return this.info.symbol;
    }
    get address() {
        return this.mintAccount.toString();
    }
    get icon() {
        return this.info.logoURI;
    }
    equals(other) {
        return (0, exports.tokensEqual)(this, other);
    }
    toString() {
        return `Token[mint=${this.mintAccount.toString()}, decimals=${this.decimals}, network=${this.network}]`;
    }
    toJSON() {
        return this.info;
    }
}
exports.Token = Token;
/**
 * Loads a token from a Mint.
 * @param mint
 * @param opts
 * @returns
 */
Token.fromMint = (mint, decimals, opts = {}) => {
    var _a, _b, _c;
    return new Token(Object.assign(Object.assign({}, opts), { 
        // required
        address: mint.toString(), decimals, 
        // optional
        name: (_a = opts.name) !== null && _a !== void 0 ? _a : `Token ${mint.toString().slice(0, 4)}`, symbol: (_b = opts.symbol) !== null && _b !== void 0 ? _b : "TOK", chainId: (_c = opts.chainId) !== null && _c !== void 0 ? _c : ChainId.Localnet }));
};
const tokensEqual = (a, b) => a !== undefined &&
    b !== undefined &&
    a.mintAccount.equals(b.mintAccount) &&
    a.network === b.network;
exports.tokensEqual = tokensEqual;
const sol = {
    address: spl_token_1.NATIVE_MINT.toString(),
    name: "Solana",
    symbol: "SOL",
    decimals: 9,
    logoURI: "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png",
};
/**
 * Creates a Token for all networks.
 */
const makeTokenForAllNetworks = (token) => ({
    "mainnet-beta": new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.MainnetBeta })),
    devnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Devnet })),
    testnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Testnet })),
    localnet: new Token(Object.assign(Object.assign({}, token), { chainId: ChainId.Localnet })),
});
exports.makeTokenForAllNetworks = makeTokenForAllNetworks;
// comes from @solana/spl-token-registry, except we've added localnet
var ChainId;
(function (ChainId) {
    ChainId[ChainId["MainnetBeta"] = 101] = "MainnetBeta";
    ChainId[ChainId["Testnet"] = 102] = "Testnet";
    ChainId[ChainId["Devnet"] = 103] = "Devnet";
    ChainId[ChainId["Localnet"] = 104] = "Localnet";
})(ChainId = exports.ChainId || (exports.ChainId = {}));
exports.NETWORK_TO_CHAIN_ID = {
    "mainnet-beta": ChainId.MainnetBeta,
    devnet: ChainId.Devnet,
    testnet: ChainId.Testnet,
    localnet: 104,
};
exports.CHAIN_ID_TO_NETWORK = Object.entries(exports.NETWORK_TO_CHAIN_ID).reduce((acc, [network, env]) => (Object.assign(Object.assign({}, acc), { [env]: network })), {});
/**
 * Gets the chain id associated with a network.
 * @param network
 * @returns
 */
const networkToChainId = (network) => exports.NETWORK_TO_CHAIN_ID[network];
exports.networkToChainId = networkToChainId;
/**
 * Gets the Network associated with a chain id.
 * @param network
 * @returns
 */
const chainIdToNetwork = (env) => exports.CHAIN_ID_TO_NETWORK[env];
exports.chainIdToNetwork = chainIdToNetwork;
/**
 * Solana native token.
 */
exports.SOL = (0, exports.makeTokenForAllNetworks)(sol);
//# sourceMappingURL=token.js.map