import type { Network } from "@saberhq/solana-contrib";
import type { TokenInfo } from "@solana/spl-token-registry";
import { PublicKey } from "@solana/web3.js";
import type { Token as UToken } from "@ubeswap/token-math";
/**
 * Token information.
 */
export declare class Token implements UToken<Token> {
    readonly info: TokenInfo;
    readonly mintAccount: PublicKey;
    readonly network: Network;
    constructor(info: TokenInfo);
    get chainId(): number;
    get decimals(): number;
    get name(): string;
    get symbol(): string;
    get address(): string;
    get icon(): string | undefined;
    equals(other: Token): boolean;
    toString(): string;
    toJSON(): unknown;
    /**
     * Loads a token from a Mint.
     * @param mint
     * @param opts
     * @returns
     */
    static fromMint: (mint: PublicKey | string, decimals: number, opts?: Partial<Omit<TokenInfo, "address" | "decimals">>) => Token;
}
export declare const tokensEqual: (a: Token | undefined, b: Token | undefined) => boolean;
/**
 * Map of network to Token
 */
export declare type TokenMap = {
    [c in Network]: Token;
};
/**
 * Creates a Token for all networks.
 */
export declare const makeTokenForAllNetworks: (token: Omit<TokenInfo, "chainId">) => TokenMap;
export declare enum ChainId {
    MainnetBeta = 101,
    Testnet = 102,
    Devnet = 103,
    Localnet = 104
}
export declare const NETWORK_TO_CHAIN_ID: {
    "mainnet-beta": ChainId;
    devnet: ChainId;
    testnet: ChainId;
    localnet: number;
};
export declare const CHAIN_ID_TO_NETWORK: {
    [E in ChainId]: Network;
};
/**
 * Gets the chain id associated with a network.
 * @param network
 * @returns
 */
export declare const networkToChainId: (network: Network) => ChainId;
/**
 * Gets the Network associated with a chain id.
 * @param network
 * @returns
 */
export declare const chainIdToNetwork: (env: ChainId) => Network;
/**
 * Solana native token.
 */
export declare const SOL: TokenMap;
//# sourceMappingURL=token.d.ts.map