/// <reference types="node" />
import type { Layout } from "@solana/buffer-layout";
import * as BufferLayout from "@solana/buffer-layout";
import type { AccountInfo, MintInfo } from "@solana/spl-token";
/**
 * Layout with decode/encode types.
 */
export declare type TypedLayout<T> = Omit<Layout, "decode" | "encode"> & {
    decode: (data: Buffer) => T;
    encode: (data: T, out: Buffer) => number;
};
/**
 * Structure with decode/encode types.
 */
export declare type TypedStructure<T> = Omit<BufferLayout.Structure, "decode" | "encode"> & TypedLayout<T>;
/**
 * Typed struct buffer layout
 * @param fields
 * @param property
 * @param decodePrefixes
 * @returns
 */
export declare const structLayout: <T extends unknown>(fields: Layout[], property?: string | undefined, decodePrefixes?: boolean | undefined) => TypedStructure<T>;
/**
 * Layout for a public key
 */
export declare const PublicKeyLayout: (property?: string) => Layout;
/**
 * Layout for a 64bit unsigned value
 */
export declare const Uint64Layout: (property?: string) => Layout;
/**
 * Layout for a TokenAccount.
 */
export declare const TokenAccountLayout: TypedLayout<{
    mint: Buffer;
    owner: Buffer;
    amount: Buffer;
    delegateOption: number;
    delegate: Buffer;
    state: number;
    delegatedAmount: Buffer;
    isNativeOption: number;
    isNative: Buffer;
    closeAuthorityOption: number;
    closeAuthority: Buffer;
}>;
/**
 * Layout for a Mint.
 */
export declare const MintLayout: TypedLayout<{
    mintAuthorityOption: number;
    mintAuthority: Buffer;
    supply: Buffer;
    decimals: number;
    isInitialized: number;
    freezeAuthorityOption: number;
    freezeAuthority: Buffer;
}>;
/**
 * Deserializes a token account.
 * @param address
 * @param data
 * @returns
 */
export declare const deserializeAccount: (data: Buffer) => Omit<AccountInfo, "address">;
/**
 * Deserialize a {@link Buffer} into a {@link MintInfo}.
 * @param data
 * @returns
 */
export declare const deserializeMint: (data: Buffer) => MintInfo;
//# sourceMappingURL=layout.d.ts.map