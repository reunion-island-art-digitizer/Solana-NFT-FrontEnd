"use strict";
/**
 * This file is a port of serum-common, which was built for web3.js 0.x.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.getTokenAccount = exports.getMintInfo = exports.createAccountRentExempt = exports.createTokenAccountInstrs = exports.createMintAndVault = exports.createMintInstructions = exports.createMint = exports.SPL_SHARED_MEMORY_ID = exports.token = void 0;
const tslib_1 = require("tslib");
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const _1 = require(".");
exports.token = (0, tslib_1.__importStar)(require("./token"));
exports.SPL_SHARED_MEMORY_ID = new web3_js_1.PublicKey("shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL");
function createMint(provider, authority, decimals) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        if (authority === undefined) {
            authority = provider.wallet.publicKey;
        }
        const mint = web3_js_1.Keypair.generate();
        const instructions = yield createMintInstructions(provider, authority, mint.publicKey, decimals);
        const tx = new web3_js_1.Transaction();
        tx.add(...instructions);
        yield provider.send(tx, [mint]);
        return mint.publicKey;
    });
}
exports.createMint = createMint;
function createMintInstructions(provider, authority, mint, decimals = 6) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const instructions = [
            web3_js_1.SystemProgram.createAccount({
                fromPubkey: provider.wallet.publicKey,
                newAccountPubkey: mint,
                space: 82,
                lamports: yield provider.connection.getMinimumBalanceForRentExemption(82),
                programId: spl_token_1.TOKEN_PROGRAM_ID,
            }),
            spl_token_1.Token.createInitMintInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, decimals, authority, null),
        ];
        return instructions;
    });
}
exports.createMintInstructions = createMintInstructions;
function createMintAndVault(provider, amount, owner, decimals) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        if (owner === undefined) {
            owner = provider.wallet.publicKey;
        }
        const mint = web3_js_1.Keypair.generate();
        const vault = web3_js_1.Keypair.generate();
        const tx = new web3_js_1.Transaction();
        tx.add(...(yield createMintInstructions(provider, provider.wallet.publicKey, mint.publicKey, decimals)), web3_js_1.SystemProgram.createAccount({
            fromPubkey: provider.wallet.publicKey,
            newAccountPubkey: vault.publicKey,
            space: 165,
            lamports: yield provider.connection.getMinimumBalanceForRentExemption(165),
            programId: spl_token_1.TOKEN_PROGRAM_ID,
        }), spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, owner), spl_token_1.Token.createMintToInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint.publicKey, vault.publicKey, provider.wallet.publicKey, [], amount));
        yield provider.send(tx, [mint, vault]);
        return [mint.publicKey, vault.publicKey];
    });
}
exports.createMintAndVault = createMintAndVault;
function createTokenAccountInstrs(provider, newAccountPubkey, mint, owner, lamports) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        if (lamports === undefined) {
            lamports = yield provider.connection.getMinimumBalanceForRentExemption(165);
        }
        return [
            web3_js_1.SystemProgram.createAccount({
                fromPubkey: provider.wallet.publicKey,
                newAccountPubkey,
                space: 165,
                lamports,
                programId: spl_token_1.TOKEN_PROGRAM_ID,
            }),
            spl_token_1.Token.createInitAccountInstruction(spl_token_1.TOKEN_PROGRAM_ID, mint, newAccountPubkey, owner),
        ];
    });
}
exports.createTokenAccountInstrs = createTokenAccountInstrs;
function createAccountRentExempt(provider, programId, size) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const acc = web3_js_1.Keypair.generate();
        const tx = new web3_js_1.Transaction();
        tx.add(web3_js_1.SystemProgram.createAccount({
            fromPubkey: provider.wallet.publicKey,
            newAccountPubkey: acc.publicKey,
            space: size,
            lamports: yield provider.connection.getMinimumBalanceForRentExemption(size),
            programId,
        }));
        yield provider.send(tx, [acc]);
        return acc;
    });
}
exports.createAccountRentExempt = createAccountRentExempt;
function getMintInfo(provider, addr) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);
        if (depositorAccInfo === null) {
            throw new Error("Failed to find token account");
        }
        return (0, _1.deserializeMint)(depositorAccInfo.data);
    });
}
exports.getMintInfo = getMintInfo;
function getTokenAccount(provider, addr) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
        const depositorAccInfo = yield provider.connection.getAccountInfo(addr);
        if (depositorAccInfo === null) {
            throw new Error("Failed to find token account");
        }
        return (0, _1.deserializeAccount)(depositorAccInfo.data);
    });
}
exports.getTokenAccount = getTokenAccount;
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
exports.sleep = sleep;
//# sourceMappingURL=common.js.map